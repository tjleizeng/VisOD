{"version":3,"sources":["../../../src/io/load-files.js"],"names":["noop","loadTexture","gl","url","opts","then","image","Texture2D","Object","assign","id","data","loadFiles","urls","onProgress","every","count","Promise","all","map","promise","file","progress","length","total","loadImages","loadTextures","images","img","i","loadProgram","vs","fs","vsText","fsText","Program","loadModel","parseModel","program","json","parseJSON","attributes","modelOptions","key","value","Array","isArray","Uint16Array","Float32Array","Model","geometry","Geometry","JSON","parse","error","Error"],"mappings":"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","sourcesContent":["/* eslint-disable guard-for-in, complexity, no-try-catch */\nimport assert from '../utils/assert';\nimport {loadFile, loadImage} from './browser-load';\nimport {Program, Texture2D} from '../webgl';\nimport {Model} from '../core';\nimport {Geometry} from '../geometry';\n\nfunction noop() {}\n\nexport function loadTexture(gl, url, opts = {}) {\n  assert(typeof url === 'string', 'loadTexture: url must be string');\n\n  return loadImage(url, opts).then(image => {\n    return new Texture2D(gl, Object.assign({id: url}, opts, {data: image}));\n  });\n}\n\n/*\n * Loads (Requests) multiple files asynchronously\n */\nexport function loadFiles(opts = {}) {\n  const {urls, onProgress = noop} = opts;\n  assert(urls.every(url => typeof url === 'string'), 'loadImages: {urls} must be array of strings');\n  let count = 0;\n  return Promise.all(\n    urls.map(url => {\n      const promise = loadFile(Object.assign({url}, opts));\n      promise.then(file =>\n        onProgress({\n          progress: ++count / urls.length,\n          count,\n          total: urls.length,\n          url\n        })\n      );\n      return promise;\n    })\n  );\n}\n\n/*\n * Loads (requests) multiple images asynchronously\n */\nexport function loadImages(opts = {}) {\n  const {urls, onProgress = noop} = opts;\n  assert(urls.every(url => typeof url === 'string'), 'loadImages: {urls} must be array of strings');\n  let count = 0;\n  return Promise.all(\n    urls.map(url => {\n      const promise = loadImage(url, opts);\n      promise.then(file =>\n        onProgress({\n          progress: ++count / urls.length,\n          count,\n          total: urls.length,\n          url\n        })\n      );\n      return promise;\n    })\n  );\n}\n\nexport function loadTextures(gl, opts = {}) {\n  const {urls, onProgress = noop} = opts;\n  assert(\n    urls.every(url => typeof url === 'string'),\n    'loadTextures: {urls} must be array of strings'\n  );\n\n  return loadImages(Object.assign({urls, onProgress}, opts)).then(images =>\n    images.map((img, i) => {\n      return new Texture2D(gl, Object.assign({id: urls[i]}, opts, {data: img}));\n    })\n  );\n}\n\nexport function loadProgram(gl, opts = {}) {\n  const {vs, fs, onProgress = noop} = opts;\n  return loadFiles(Object.assign({urls: [vs, fs], onProgress}, opts)).then(\n    ([vsText, fsText]) => new Program(gl, Object.assign({vs: vsText, fs: fsText}, opts))\n  );\n}\n\n// Loads a simple JSON format\nexport function loadModel(gl, opts = {}) {\n  const {url, onProgress = noop} = opts;\n  return loadFiles(Object.assign({urls: [url], onProgress}, opts)).then(([file]) =>\n    parseModel(gl, Object.assign({file}, opts))\n  );\n}\n\nexport function parseModel(gl, opts = {}) {\n  const {file, program = new Program(gl)} = opts;\n  const json = typeof file === 'string' ? parseJSON(file) : file;\n  // Remove any attributes so that we can create a geometry\n  // TODO - change format to put these in geometry sub object?\n  const attributes = {};\n  const modelOptions = {};\n  for (const key in json) {\n    const value = json[key];\n    if (Array.isArray(value)) {\n      attributes[key] = key === 'indices' ? new Uint16Array(value) : new Float32Array(value);\n    } else {\n      modelOptions[key] = value;\n    }\n  }\n\n  return new Model(\n    gl,\n    Object.assign({program, geometry: new Geometry({attributes})}, modelOptions, opts)\n  );\n}\n\nfunction parseJSON(file) {\n  try {\n    return JSON.parse(file);\n  } catch (error) {\n    throw new Error(`Failed to parse JSON: ${error}`);\n  }\n}\n"],"file":"load-files.js"}