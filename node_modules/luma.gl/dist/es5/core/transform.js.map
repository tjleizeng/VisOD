{"version":3,"sources":["../../../src/core/transform.js"],"names":["SRC_TEX_PARAMETER_OVERRIDES","FS_OUTPUT_VARIABLE","Transform","gl","props","model","elementCount","currentIndex","sourceBuffers","Array","sourceTextures","feedbackBuffers","targetTextures","transformFeedbacks","framebuffers","_createdBuffers","elementIDBuffer","_targetRefTexName","_initialize","Object","seal","name","delete","varyingName","bufferOrParams","Buffer","buffer","attachments","packed","getBuffer","getData","targetTextureVarying","pixels","readPixels","ArrayType","constructor","channelCount","targetTextureType","packedPixels","length","packCount","i","j","uniforms","current","attributes","assign","hasSourceTextures","transform_elementID","sampler","samplerTextureMap","textureName","_setSourceTextureParameters","sizeUniforms","sourceTextureMap","targetTexture","opts","_getInputs","parameters","clearRenderTarget","framebuffer","discard","renderingToTexture","viewport","width","height","clear","COLOR_BUFFER_BIT","setAttributes","transform","transformFeedback","log","deprecated","swap","feedbackMap","_swapTexture","_setElementCount","bufferName","_createFeedbackBuffers","setBuffers","_setupSwapBuffers","_sourceTextures","_targetTexture","_updateTargetTexture","_setupSwapTextures","index","setParameters","_updateElementIDBuffer","setVertexCount","texture","_buildTargetTexture","update","resizeAttachments","resize","_validateProps","varyings","_targetTextureVarying","varyingsArray","isArray","values","_setupBuffers","_setupTextures","_buildModel","id","drawMode","destinationBuffers","sourceDestinationMap","vs","Texture2D","keys","textureOrAttribute","refTexture","pixelStore","sourceBufferName","feedbackBufferName","sourceBuffer","bytes","type","usage","accessor","next","srcName","dstName","_getShaders","fs","modules","inject","Model","vertexCount","_setupTransformFeedback","_setupFramebuffers","TransformFeedback","program","buffers","Framebuffer","elementIds","Float32Array","forEach","_","array","data","size","setData","_processVertexShader","combinedInject","version","input","inputType","output","concat"],"mappings":"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","sourcesContent":["import GL from '../constants';\nimport Model from './model';\nimport Buffer from '../webgl/buffer';\nimport Framebuffer from '../webgl/framebuffer';\nimport Texture2D from '../webgl/texture-2d';\nimport TransformFeedback from '../webgl/transform-feedback';\nimport {combineInjects} from '../shadertools/src/lib/inject-shader';\nimport {_transform as transform, getPassthroughFS, typeToChannelCount} from '../shadertools/src';\nimport {isWebGL2, assertWebGL2Context, getShaderVersion, cloneTextureFrom} from '../webgl-utils';\nimport assert from '../utils/assert';\nimport {log, isObjectEmpty} from '../utils';\nimport {updateForTextures, getSizeUniforms} from './transform-shader-utils';\n\n// Texture parameters needed so sample can precisely pick pixel for given element id.\nconst SRC_TEX_PARAMETER_OVERRIDES = {\n  [GL.TEXTURE_MIN_FILTER]: GL.NEAREST,\n  [GL.TEXTURE_MAG_FILTER]: GL.NEAREST,\n  [GL.TEXTURE_WRAP_S]: GL.CLAMP_TO_EDGE,\n  [GL.TEXTURE_WRAP_T]: GL.CLAMP_TO_EDGE\n};\nconst FS_OUTPUT_VARIABLE = 'transform_output';\n\nexport default class Transform {\n  static isSupported(gl) {\n    // For now WebGL2 only\n    return isWebGL2(gl);\n  }\n\n  constructor(gl, props = {}) {\n    assertWebGL2Context(gl);\n\n    this.gl = gl;\n    this.model = null;\n    this.elementCount = 0;\n    this.currentIndex = 0;\n\n    // Source and destination resources are stored in two element Arrays for easier swapping when\n    // 'feedbackMap' is provided. If not only the first array elment is used.\n\n    // Each array element is an object with attribute name as Key and Buffer object as value.\n    this.sourceBuffers = new Array(2);\n\n    // Each array element is an object with attribute name as Key and Texture object as value.\n    this.sourceTextures = new Array(2);\n\n    // Each array element is an object with varying name as Key and Buffer object as value.\n    this.feedbackBuffers = new Array(2);\n\n    // Each array element is a Texture object used as color attachment for framebuffer.\n    this.targetTextures = new Array(2);\n\n    // Each array element is a TransformFeedback object.\n    this.transformFeedbacks = new Array(2);\n\n    // Each array element is a Framebuffer object.\n    this.framebuffers = new Array(2);\n    this._createdBuffers = {};\n    this.elementIDBuffer = null;\n\n    // reference source texture name for target texture\n    this._targetRefTexName = null;\n\n    this._initialize(props);\n    Object.seal(this);\n  }\n\n  // Delete owned resources.\n  delete() {\n    for (const name in this._createdBuffers) {\n      this._createdBuffers[name].delete();\n    }\n    this.model.delete();\n  }\n\n  // Return Buffer object for given varying name.\n  getBuffer(varyingName = null) {\n    const bufferOrParams = varyingName\n      ? this.feedbackBuffers[this.currentIndex][varyingName]\n      : null;\n    if (!bufferOrParams) {\n      return null;\n    }\n    return bufferOrParams instanceof Buffer ? bufferOrParams : bufferOrParams.buffer;\n  }\n\n  // Returns the color attachment textuer from current framebuffer target\n  _getTargetTexture() {\n    if (this.framebuffers[this.currentIndex]) {\n      return this.framebuffers[this.currentIndex].attachments[GL.COLOR_ATTACHMENT0];\n    }\n    return null;\n  }\n\n  // Return data either from Buffer or from Texture\n  getData({varyingName = null, packed = false} = {}) {\n    // Either there should be specified feedbackBuffer or we should be rendering to a texture\n    const buffer = this.getBuffer(varyingName);\n    if (buffer) {\n      return buffer.getData();\n    }\n\n    // When varyingName is not provided return data from framebuffer object.\n    assert(!varyingName || varyingName === this.targetTextureVarying);\n\n    const pixels = this.framebuffers[this.currentIndex].readPixels();\n\n    if (!packed) {\n      return pixels;\n    }\n\n    // readPixels returns 4 elements for each pixel, pack the elements when requested\n    const ArrayType = pixels.constructor;\n    const channelCount = typeToChannelCount(this.targetTextureType);\n    const packedPixels = new ArrayType((pixels.length * channelCount) / 4);\n    let packCount = 0;\n    for (let i = 0; i < pixels.length; i += 4) {\n      for (let j = 0; j < channelCount; j++) {\n        packedPixels[packCount++] = pixels[i + j];\n      }\n    }\n    return packedPixels;\n  }\n\n  // returns current framebuffer object that is being used.\n  getFramebuffer() {\n    return this.framebuffers[this.currentIndex];\n  }\n\n  _getInputs() {\n    const uniforms = {};\n    const current = this.currentIndex;\n\n    // Buffer inputs\n    const attributes = Object.assign({}, this.sourceBuffers[current]);\n\n    // Texture inputs\n    if (this.hasSourceTextures || this.targetTextureVarying) {\n      // TODO: add option not generate position using element id.\n      attributes.transform_elementID = this.elementIDBuffer;\n      for (const sampler in this.samplerTextureMap) {\n        const textureName = this.samplerTextureMap[sampler];\n        uniforms[sampler] = this.sourceTextures[current][textureName];\n      }\n      // Also update size uniforms , add samplerSizeMap\n      this._setSourceTextureParameters();\n\n      // get texture size uniforms\n      const sizeUniforms = getSizeUniforms({\n        sourceTextureMap: this.sourceTextures[current],\n        targetTextureVarying: this.targetTextureVarying,\n        targetTexture: this.targetTextures[current]\n      });\n      Object.assign(uniforms, sizeUniforms);\n    }\n    return {attributes, uniforms};\n  }\n\n  // Run one transform feedback loop.\n  run(opts = {}) {\n    const {attributes, uniforms} = this._getInputs();\n    Object.assign(uniforms, opts.uniforms);\n    const parameters = Object.assign({}, opts.parameters);\n    const {clearRenderTarget = true} = opts;\n    let framebuffer = null;\n    let discard = true;\n\n    if (this.renderingToTexture) {\n      discard = false;\n      framebuffer = this.framebuffers[this.currentIndex];\n      assert(framebuffer);\n      parameters.viewport = [0, 0, framebuffer.width, framebuffer.height];\n      if (clearRenderTarget) {\n        this.gl.clear(this.gl.COLOR_BUFFER_BIT);\n      }\n    }\n    this.model.setAttributes(attributes);\n    this.model.transform(\n      Object.assign({}, opts, {\n        transformFeedback: this.transformFeedbacks[this.currentIndex],\n        uniforms,\n        discard,\n        framebuffer,\n        parameters\n      })\n    );\n  }\n\n  // Swap source and destination buffers and textures.\n  swapBuffers() {\n    log.deprecated('swapBuffers()', 'swap()');\n    this.swap();\n  }\n\n  // Swap source and destination buffers and textures.\n  swap() {\n    assert(this.feedbackMap || this._swapTexture);\n    this.currentIndex = (this.currentIndex + 1) % 2;\n  }\n\n  // Update some or all buffer bindings.\n  update(opts = {}) {\n    if (opts.elementCount) {\n      this._setElementCount(opts.elementCount);\n    }\n\n    const {sourceBuffers = null, feedbackBuffers = null} = opts;\n    const {currentIndex} = this;\n    if (sourceBuffers || feedbackBuffers) {\n      for (const bufferName in feedbackBuffers) {\n        assert(\n          feedbackBuffers[bufferName] instanceof Buffer ||\n            feedbackBuffers[bufferName].buffer instanceof Buffer\n        );\n      }\n\n      Object.assign(this.sourceBuffers[currentIndex], sourceBuffers);\n      Object.assign(this.feedbackBuffers[currentIndex], feedbackBuffers);\n      this._createFeedbackBuffers({feedbackBuffers});\n      if (this.transformFeedbacks[currentIndex]) {\n        this.transformFeedbacks[currentIndex].setBuffers(this.feedbackBuffers[currentIndex]);\n      }\n\n      // Buffers have changed, need to re-setup swap buffers.\n      this._setupSwapBuffers();\n    }\n\n    const {_sourceTextures, _targetTexture} = opts;\n    if (_sourceTextures || _targetTexture) {\n      Object.assign(this.sourceTextures[currentIndex], _sourceTextures);\n      // if _targetTexture specified use it, other wise rebuild traget texture using\n      // '_targetRefTexName' as coresponding source texture may have been update.\n      this._updateTargetTexture(_targetTexture || this._targetRefTexName, currentIndex);\n      // textures have changed, need to re-setup swap textures.\n      this._setupSwapTextures();\n    }\n  }\n\n  // set texture filtering parameters on source textures.\n  _setSourceTextureParameters() {\n    const index = this.currentIndex;\n    for (const name in this.sourceTextures[index]) {\n      this.sourceTextures[index][name].setParameters(SRC_TEX_PARAMETER_OVERRIDES);\n    }\n  }\n\n  // set element count and updated elementID buffer if needed.\n  _setElementCount(elementCount) {\n    if (this.elementCount === elementCount) {\n      return;\n    }\n    if (this.elementCount < elementCount) {\n      this._updateElementIDBuffer(elementCount);\n    }\n    this.model.setVertexCount(elementCount);\n    this.elementCount = elementCount;\n  }\n\n  // sets target texture for rendering by updating framebuffer\n  _updateTargetTexture(texture, index) {\n    const targetTexture = this._buildTargetTexture(texture);\n    if (targetTexture) {\n      this.targetTextures[index] = targetTexture;\n      if (this.framebuffers[index]) {\n        // First update texture without re-sizing attachments\n        this.framebuffers[index].update({\n          attachments: {[GL.COLOR_ATTACHMENT0]: this.targetTextures[index]},\n          resizeAttachments: false\n        });\n        // Resize to new taget texture size\n        this.framebuffers[index].resize({\n          width: targetTexture.width,\n          height: targetTexture.height\n        });\n      }\n    }\n  }\n\n  // Private\n\n  _initialize(props = {}) {\n    const {feedbackBuffers, feedbackMap} = this._validateProps(props);\n    const {sourceBuffers, varyings, _targetTexture, _targetTextureVarying, _swapTexture} = props;\n\n    let varyingsArray = varyings;\n    if (feedbackMap && !Array.isArray(varyings)) {\n      varyingsArray = Object.values(feedbackMap);\n    }\n    this.varyingsArray = varyingsArray;\n    this.feedbackMap = feedbackMap;\n    this._swapTexture = _swapTexture;\n    if (_targetTexture) {\n      this.targetTextureVarying = _targetTextureVarying;\n      this.renderingToTexture = true;\n      assert(this.targetTextureVarying);\n    }\n\n    this._setupBuffers({sourceBuffers, feedbackBuffers});\n    this._setupTextures(props);\n    this._setupSwapBuffers();\n    this._setupSwapTextures();\n    this._buildModel(\n      Object.assign({}, props, {\n        id: props.id || 'transform-model',\n        drawMode: props.drawMode || GL.POINTS,\n        varyings: varyingsArray\n      })\n    );\n  }\n\n  // assert on required parameters\n  /* eslint-disable complexity */\n  _validateProps(props) {\n    let {feedbackBuffers, feedbackMap} = props;\n\n    // backward compitability\n    const {destinationBuffers, sourceDestinationMap} = props;\n    if (destinationBuffers) {\n      log.deprecated('destinationBuffers', 'feedbackBuffers')();\n      feedbackBuffers = feedbackBuffers || destinationBuffers;\n    }\n    if (sourceDestinationMap) {\n      log.deprecated('sourceDestinationMap', 'feedbackMap')();\n      feedbackMap = feedbackMap || sourceDestinationMap;\n    }\n\n    // assert on required parameters\n    const {vs, elementCount, varyings} = props;\n    const {_sourceTextures, _targetTexture, _targetTextureVarying, _swapTexture} = props;\n\n    assert(\n      vs &&\n        // destinations are provided\n        (varyings || feedbackMap || _targetTexture) &&\n        // when only writting to textures auto-duduce from texture dimenstions\n        elementCount\n    );\n\n    for (const bufferName in feedbackBuffers || {}) {\n      assert(\n        feedbackBuffers[bufferName] instanceof Buffer ||\n          feedbackBuffers[bufferName].buffer instanceof Buffer\n      );\n    }\n    for (const textureName in _sourceTextures || {}) {\n      assert(_sourceTextures[textureName] instanceof Texture2D);\n    }\n\n    // If rendering to texture , varying is provided\n    assert(!_targetTexture || _targetTextureVarying);\n\n    // swap texture must be a valid source texture\n    assert(!_swapTexture || _sourceTextures[_swapTexture]);\n\n    return {feedbackBuffers, feedbackMap};\n  }\n  /* eslint-enable complexity */\n\n  // setup source and destination buffers\n  _setupBuffers({sourceBuffers = null, feedbackBuffers = null}) {\n    this.sourceBuffers[0] = Object.assign({}, sourceBuffers);\n    this.feedbackBuffers[0] = Object.assign({}, feedbackBuffers);\n    this._createFeedbackBuffers({feedbackBuffers});\n    this.sourceBuffers[1] = {};\n    this.feedbackBuffers[1] = {};\n  }\n\n  // setup source and destination textures\n  _setupTextures(props = {}) {\n    const {_sourceTextures, _targetTexture} = props;\n    // Setup source texture\n    this.sourceTextures[0] = Object.assign({}, _sourceTextures);\n    this.sourceTextures[1] = {};\n    this.hasSourceTextures = Object.keys(this.sourceTextures[0]).length > 0;\n\n    if (this.targetTextureVarying) {\n      const texture = this._buildTargetTexture(_targetTexture);\n      // Either a texture or refAttribute must be provided\n      assert(texture);\n      this.targetTextures[0] = texture;\n      this.targetTextures[1] = null;\n    }\n  }\n\n  // Builds target texture using source reference or provided texture object.\n  _buildTargetTexture(textureOrAttribute) {\n    if (textureOrAttribute instanceof Texture2D) {\n      return textureOrAttribute;\n    }\n    const refTexture = this.sourceTextures[0][textureOrAttribute];\n    if (!refTexture) {\n      return null;\n    }\n    // save reference texture name, when corresponding source texture is updated\n    // we also update target texture.\n    this._targetRefTexName = textureOrAttribute;\n    return cloneTextureFrom(refTexture, {\n      parameters: {\n        [GL.TEXTURE_MIN_FILTER]: GL.NEAREST,\n        [GL.TEXTURE_MAG_FILTER]: GL.NEAREST,\n        [GL.TEXTURE_WRAP_S]: GL.CLAMP_TO_EDGE,\n        [GL.TEXTURE_WRAP_T]: GL.CLAMP_TO_EDGE\n      },\n      pixelStore: {\n        [GL.UNPACK_FLIP_Y_WEBGL]: false\n      }\n    });\n  }\n\n  // auto create any feedback buffers\n  _createFeedbackBuffers({feedbackBuffers}) {\n    if (!this.feedbackMap) {\n      // feedbackMap required to auto create buffers.\n      return;\n    }\n    const current = this.currentIndex;\n    for (const sourceBufferName in this.feedbackMap) {\n      const feedbackBufferName = this.feedbackMap[sourceBufferName];\n      if (\n        feedbackBufferName !== this.targetTextureVarying &&\n        (!feedbackBuffers || !feedbackBuffers[feedbackBufferName])\n      ) {\n        // Create new buffer with same layout and settings as source buffer\n        const sourceBuffer = this.sourceBuffers[current][sourceBufferName];\n        const {bytes, type, usage, accessor} = sourceBuffer;\n        const buffer = new Buffer(this.gl, {bytes, type, usage, accessor});\n\n        if (this._createdBuffers[feedbackBufferName]) {\n          this._createdBuffers[feedbackBufferName].delete();\n        }\n        this._createdBuffers[feedbackBufferName] = buffer;\n        this.feedbackBuffers[current][feedbackBufferName] = buffer;\n      }\n    }\n  }\n\n  // Create a buffer and add to list of buffers to be deleted.\n  _createNewBuffer(name, opts) {\n    const buffer = new Buffer(this.gl, opts);\n    if (this._createdBuffers[name]) {\n      this._createdBuffers[name].delete();\n      this._createdBuffers[name] = buffer;\n    }\n    return buffer;\n  }\n\n  // setup buffers for swapping.\n  // Second set of source and feedback objects are setup to point\n  // to corresponding feedback and source buffers.\n  _setupSwapBuffers() {\n    if (!this.feedbackMap) {\n      // feedbackMap required set up swap buffers.\n      return;\n    }\n    const current = this.currentIndex;\n    const next = (current + 1) % 2;\n\n    // Copy all buffers/textures so un-mapped sources will remain same\n    Object.assign(this.sourceBuffers[next], this.sourceBuffers[current]);\n    Object.assign(this.feedbackBuffers[next], this.feedbackBuffers[current]);\n\n    for (const srcName in this.feedbackMap) {\n      const dstName = this.feedbackMap[srcName];\n      // TODO: add textureMap and remove this if loop\n      if (dstName !== this.targetTextureVarying) {\n        this.sourceBuffers[next][srcName] = this.feedbackBuffers[current][dstName];\n        this.feedbackBuffers[next][dstName] = this.sourceBuffers[current][srcName];\n\n        // make sure the new destination buffer is a Buffer object\n        assert(this.feedbackBuffers[next][dstName] instanceof Buffer);\n      }\n    }\n\n    // When triggered by `update()` TranformFeedback objects are already set up,\n    // if so update buffers\n    if (this.transformFeedbacks[next]) {\n      this.transformFeedbacks[next].setBuffers(this.feedbackBuffers[next]);\n    }\n\n    // TODO: add swap support for targetTexture and framebuffers\n  }\n\n  // setup textures for swapping.\n  _setupSwapTextures() {\n    if (!this._swapTexture || !this.targetTextureVarying) {\n      // Must be rendering to a texture and _swapTexture is provided\n      return;\n    }\n    const current = this.currentIndex;\n    const next = (current + 1) % 2;\n\n    Object.assign(this.sourceTextures[next], this.sourceTextures[current]);\n\n    this.sourceTextures[next][this._swapTexture] = this.targetTextures[current];\n\n    this._updateTargetTexture(this.sourceTextures[current][this._swapTexture], next);\n  }\n\n  // build Model and TransformFeedback objects\n  _buildModel(props = {}) {\n    const {vs, fs, modules, uniforms, inject, samplerTextureMap} = this._getShaders(props);\n    this.model = new Model(\n      this.gl,\n      Object.assign({}, props, {\n        vs,\n        fs,\n        vertexCount: props.elementCount,\n        modules,\n        uniforms,\n        inject\n      })\n    );\n    this.samplerTextureMap = samplerTextureMap;\n\n    // setup TF to capture varyings.\n    this._setupTransformFeedback();\n\n    // setup Framebuffer object for rendering to Texture.\n    this._setupFramebuffers();\n\n    // create buffer to access source texture pixesl.\n    this._setElementCount(props.elementCount);\n  }\n\n  // setup TransformFeedback objects to capture the results\n  _setupTransformFeedback() {\n    if (isObjectEmpty(this.feedbackBuffers[0])) {\n      return;\n    }\n    this.transformFeedbacks[0] = new TransformFeedback(this.gl, {\n      program: this.model.program,\n      buffers: this.feedbackBuffers[0]\n    });\n\n    // If buffers are swappable setup second transform feedback object.\n    if (this.feedbackMap) {\n      this.transformFeedbacks[1] = new TransformFeedback(this.gl, {\n        program: this.model.program,\n        buffers: this.feedbackBuffers[1]\n      });\n    }\n  }\n\n  // setup framebuffers with texture attachments, to which results are rendered\n  _setupFramebuffers() {\n    if (!this.renderingToTexture) {\n      return;\n    }\n\n    let {width, height} = this.targetTextures[0];\n    this.framebuffers[0] = new Framebuffer(this.gl, {\n      id: `${this.id || 'transform'}-framebuffer-0`,\n      width,\n      height,\n      attachments: {\n        [GL.COLOR_ATTACHMENT0]: this.targetTextures[0]\n      }\n    });\n\n    if (this._swapTexture) {\n      ({width, height} = this.targetTextures[1]);\n\n      this.framebuffers[1] = new Framebuffer(this.gl, {\n        id: `${this.id || 'transform'}-framebuffer-1`,\n        width,\n        height,\n        attachments: {\n          [GL.COLOR_ATTACHMENT0]: this.targetTextures[1]\n        }\n      });\n    }\n  }\n\n  // create/update buffer to access source texture's individual pixels.\n  _updateElementIDBuffer(elementCount) {\n    if (!this.hasSourceTextures && !this.targetTextureVarying) {\n      return;\n    }\n    // NOTE: using float so this will work with GLSL 1.0 shaders.\n    const elementIds = new Float32Array(elementCount);\n    elementIds.forEach((_, index, array) => {\n      array[index] = index;\n    });\n    if (!this.elementIDBuffer) {\n      this.elementIDBuffer = new Buffer(this.gl, {data: elementIds, size: 1});\n    } else {\n      this.elementIDBuffer.setData({data: elementIds});\n    }\n  }\n\n  // build and return shader releated parameters\n  _getShaders(props = {}) {\n    const {vs, uniforms, targetTextureType, inject, samplerTextureMap} = this._processVertexShader(\n      props.vs\n    );\n    const combinedInject = combineInjects([props.inject || {}, inject]);\n    this.targetTextureType = targetTextureType;\n    const fs = getPassthroughFS({\n      version: getShaderVersion(vs),\n      input: this.targetTextureVarying,\n      inputType: targetTextureType,\n      output: FS_OUTPUT_VARIABLE\n    });\n    const modules =\n      this.hasSourceTextures || this.targetTextureVarying\n        ? [transform].concat(props.modules || [])\n        : props.modules;\n    return {vs, fs, modules, uniforms, inject: combinedInject, samplerTextureMap};\n  }\n\n  // scan and update vertex shader for texture atrributes.\n  _processVertexShader(vs) {\n    return updateForTextures({\n      vs,\n      sourceTextureMap: this.sourceTextures[this.currentIndex],\n      targetTextureVarying: this.targetTextureVarying,\n      targetTexture: this.targetTextures[this.currentIndex]\n    });\n  }\n}\n"],"file":"transform.js"}