{"version":3,"sources":["../../../src/webgl/vertex-array-object.js"],"names":["OES_vertex_array_object","ERR_ELEMENTS","VertexArrayObject","gl","options","constantAttributeZero","getExtension","luma","defaultVertexArray","handle","MAX_ATTRIBUTES","getParameter","location","array","constructor","Float32Array","_setConstantFloatArray","Int32Array","_setConstantIntArray","Uint32Array","_setConstantUintArray","opts","id","program","Object","assign","hasVertexArrays","isSupported","buffer","bufferValue","initialize","seal","delete","props","setProps","elementBuffer","target","bind","bindBuffer","accessor","setElementBuffer","size","type","stride","offset","normalized","integer","divisor","Number","vertexAttribIPointer","vertexAttribPointer","enableVertexAttribArray","vertexAttribDivisor","enable","disablingAttributeZero","disableVertexAttribArray","elementCount","value","constantValue","_normalizeConstantArrayValue","byteLength","length","updateNeeded","Buffer","setByteLength","_compareConstantArrayValues","typedArray","source","start","count","subData","arrayValue","Array","isArray","v1","v2","i","createVertexArray","deleteVertexArray","elements","bindVertexArray","pname","isFinite","getVertexAttribOffset","getVertexAttrib","getMaxAttributes","vertexAttrib1fv","vertexAttrib2fv","vertexAttrib3fv","vertexAttrib4fv","vertexAttribI1iv","vertexAttribI2iv","vertexAttribI3iv","vertexAttribI4iv","vertexAttribI1uiv","vertexAttribI2uiv","vertexAttribI3uiv","vertexAttribI4uiv","Resource"],"mappings":"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","sourcesContent":["// WebGL2 VertexArrayObject class\n\nimport GL from '../constants';\nimport Resource from './resource';\nimport Buffer from './buffer';\nimport {isWebGL2} from '../webgl-utils';\nimport {getScratchArray, fillArray} from '../utils/array-utils-flat';\nimport {assert} from '../utils';\nimport {getBrowser} from 'probe.gl';\n\n/* eslint-disable camelcase */\nconst OES_vertex_array_object = 'OES_vertex_array_object';\n\nconst ERR_ELEMENTS = 'elements must be GL.ELEMENT_ARRAY_BUFFER';\n\nexport default class VertexArrayObject extends Resource {\n  static isSupported(gl, options = {}) {\n    // Attribute 0 can not be disable on most desktop OpenGL based browsers\n    // and on iOS Safari browser.\n    if (options.constantAttributeZero) {\n      return isWebGL2(gl) || getBrowser() === 'Chrome';\n    }\n\n    // Whether additional objects can be created\n    return isWebGL2(gl) || gl.getExtension(OES_vertex_array_object);\n  }\n\n  // Returns the global (null) vertex array object. Exists even when no extension available\n  static getDefaultArray(gl) {\n    gl.luma = gl.luma || {};\n    if (!gl.luma.defaultVertexArray) {\n      gl.luma.defaultVertexArray = new VertexArrayObject(gl, {handle: null});\n    }\n    return gl.luma.defaultVertexArray;\n  }\n\n  static getMaxAttributes(gl) {\n    // TODO - should be cached per context\n    VertexArrayObject.MAX_ATTRIBUTES =\n      VertexArrayObject.MAX_ATTRIBUTES || gl.getParameter(gl.MAX_VERTEX_ATTRIBS);\n    return VertexArrayObject.MAX_ATTRIBUTES;\n  }\n\n  // Note: Constants are stored globally on the WebGL context, not the VAO\n  // So they need to be updated before every render\n  // TODO - use known type (in configuration or passed in) to allow non-typed arrays?\n  // TODO - remember/cache values to avoid setting them unnecessarily?\n  static setConstant(gl, location, array) {\n    switch (array.constructor) {\n      case Float32Array:\n        VertexArrayObject._setConstantFloatArray(gl, location, array);\n        break;\n      case Int32Array:\n        VertexArrayObject._setConstantIntArray(gl, location, array);\n        break;\n      case Uint32Array:\n        VertexArrayObject._setConstantUintArray(gl, location, array);\n        break;\n      default:\n        assert(false);\n    }\n  }\n\n  // Create a VertexArray\n  constructor(gl, opts = {}) {\n    // Use program's id if program but no id is supplied\n    const id = opts.id || (opts.program && opts.program.id);\n    super(gl, Object.assign({}, opts, {id}));\n\n    this.hasVertexArrays = VertexArrayObject.isSupported(gl);\n    this.buffer = null;\n    this.bufferValue = null;\n\n    this.initialize(opts);\n\n    Object.seal(this);\n  }\n\n  delete() {\n    super.delete();\n    if (this.buffer) {\n      this.buffer.delete();\n    }\n  }\n\n  get MAX_ATTRIBUTES() {\n    return VertexArrayObject.getMaxAttributes(this.gl);\n  }\n\n  initialize(props = {}) {\n    return this.setProps(props);\n  }\n\n  setProps(props) {\n    // TODO: decide which props should be supported\n    return this;\n  }\n\n  // Set (bind) an elements buffer, for indexed rendering.\n  // Must be a Buffer bound to GL.ELEMENT_ARRAY_BUFFER. Constants not supported\n  setElementBuffer(elementBuffer = null, opts = {}) {\n    assert(!elementBuffer || elementBuffer.target === GL.ELEMENT_ARRAY_BUFFER, ERR_ELEMENTS);\n\n    // The GL.ELEMENT_ARRAY_BUFFER_BINDING is stored on the VertexArrayObject...\n    this.bind(() => {\n      this.gl.bindBuffer(GL.ELEMENT_ARRAY_BUFFER, elementBuffer ? elementBuffer.handle : null);\n    });\n\n    return this;\n  }\n\n  // Set a location in vertex attributes array to a bufferk, enables the location, sets divisor\n  setBuffer(location, buffer, accessor) {\n    // Check target\n    if (buffer.target === GL.ELEMENT_ARRAY_BUFFER) {\n      return this.setElementBuffer(buffer, accessor);\n    }\n\n    const {size, type, stride, offset, normalized, integer, divisor} = accessor;\n\n    const {gl} = this;\n    location = Number(location);\n\n    this.bind(() => {\n      // A non-zero buffer object must be bound to the GL_ARRAY_BUFFER target\n      gl.bindBuffer(gl.ARRAY_BUFFER, buffer.handle);\n\n      // WebGL2 supports *integer* data formats, i.e. GPU will see integer values\n      if (integer) {\n        assert(isWebGL2(gl));\n        gl.vertexAttribIPointer(location, size, type, stride, offset);\n      } else {\n        // Attaches ARRAY_BUFFER with specified buffer format to location\n        gl.vertexAttribPointer(location, size, type, normalized, stride, offset);\n      }\n      gl.enableVertexAttribArray(location);\n      gl.vertexAttribDivisor(location, divisor || 0);\n\n      // NOTE We don't unbind buffer here, typically another buffer will be bound just after\n    });\n\n    return this;\n  }\n\n  // Enabling an attribute location makes it reference the currently bound buffer\n  // Disabling an attribute location makes it reference the global constant value\n  // TODO - handle single values for size 1 attributes?\n  // TODO - convert classic arrays based on known type?\n  enable(location, enable = true) {\n    // Attribute 0 cannot be disabled in most desktop OpenGL based browsers\n    const disablingAttributeZero =\n      !enable &&\n      location === 0 &&\n      !VertexArrayObject.isSupported(this.gl, {constantAttributeZero: true});\n\n    if (!disablingAttributeZero) {\n      location = Number(location);\n      this.bind(\n        () =>\n          enable\n            ? this.gl.enableVertexAttribArray(location)\n            : this.gl.disableVertexAttribArray(location)\n      );\n    }\n    return this;\n  }\n\n  // Provide a means to create a buffer that is equivalent to a constant.\n  // NOTE: Desktop OpenGL cannot disable attribute 0.\n  // https://stackoverflow.com/questions/20305231/webgl-warning-attribute-0-is-disabled-\n  // this-has-significant-performance-penalt\n  getConstantBuffer(elementCount, value, accessor) {\n    // Create buffer only when needed, and reuse it (avoids inflating buffer creation statistics)\n\n    const constantValue = this._normalizeConstantArrayValue(value, accessor);\n\n    const byteLength = constantValue.byteLength * elementCount;\n    const length = constantValue.length * elementCount;\n\n    let updateNeeded = !this.buffer;\n\n    this.buffer = this.buffer || new Buffer(this.gl, byteLength);\n    updateNeeded = updateNeeded || this.buffer.setByteLength(byteLength);\n\n    // Reallocate and update contents if needed\n    updateNeeded =\n      updateNeeded || !this._compareConstantArrayValues(constantValue, this.bufferValue);\n\n    if (updateNeeded) {\n      // Create a typed array that is big enough, and fill it with the required data\n      const typedArray = getScratchArray(value.constructor, length);\n      fillArray({target: typedArray, source: constantValue, start: 0, count: length});\n      this.buffer.subData(typedArray);\n      this.bufferValue = value;\n    }\n\n    return this.buffer;\n  }\n\n  // PRIVATE\n\n  // TODO - convert Arrays based on known type? (read type from accessor, don't assume Float32Array)\n  // TODO - handle single values for size 1 attributes?\n  _normalizeConstantArrayValue(arrayValue, accessor) {\n    if (Array.isArray(arrayValue)) {\n      return new Float32Array(arrayValue);\n    }\n    return arrayValue;\n  }\n\n  _compareConstantArrayValues(v1, v2) {\n    if (!v1 || !v2 || v1.length !== v2.length || v1.constructor !== v2.constructor) {\n      return false;\n    }\n    for (let i = 0; i < v1.length; ++i) {\n      if (v1[i] !== v2[i]) {\n        return false;\n      }\n    }\n    return true;\n  }\n\n  static _setConstantFloatArray(gl, location, array) {\n    switch (array.length) {\n      case 1:\n        gl.vertexAttrib1fv(location, array);\n        break;\n      case 2:\n        gl.vertexAttrib2fv(location, array);\n        break;\n      case 3:\n        gl.vertexAttrib3fv(location, array);\n        break;\n      case 4:\n        gl.vertexAttrib4fv(location, array);\n        break;\n      default:\n        assert(false);\n    }\n  }\n\n  static _setConstantIntArray(gl, location, array) {\n    assert(isWebGL2(gl));\n    switch (array.length) {\n      case 1:\n        gl.vertexAttribI1iv(location, array);\n        break;\n      case 2:\n        gl.vertexAttribI2iv(location, array);\n        break;\n      case 3:\n        gl.vertexAttribI3iv(location, array);\n        break;\n      case 4:\n        gl.vertexAttribI4iv(location, array);\n        break;\n      default:\n        assert(false);\n    }\n  }\n\n  static _setConstantUintArray(gl, location, array) {\n    assert(isWebGL2(gl));\n    switch (array.length) {\n      case 1:\n        gl.vertexAttribI1uiv(location, array);\n        break;\n      case 2:\n        gl.vertexAttribI2uiv(location, array);\n        break;\n      case 3:\n        gl.vertexAttribI3uiv(location, array);\n        break;\n      case 4:\n        gl.vertexAttribI4uiv(location, array);\n        break;\n      default:\n        assert(false);\n    }\n  }\n\n  // RESOURCE IMPLEMENTATION\n\n  _createHandle() {\n    this.hasVertexArrays = VertexArrayObject.isSupported(this.gl);\n    if (this.hasVertexArrays) {\n      return this.gl.createVertexArray();\n    }\n    return null;\n  }\n\n  _deleteHandle(handle) {\n    if (this.hasVertexArrays) {\n      this.gl.deleteVertexArray(handle);\n    }\n    return [this.elements];\n    // return [this.elements, ...this.buffers];\n  }\n\n  _bindHandle(handle) {\n    if (this.hasVertexArrays) {\n      this.gl.bindVertexArray(handle);\n    }\n  }\n\n  // Generic getter for information about a vertex attribute at a given position\n  _getParameter(pname, {location}) {\n    assert(Number.isFinite(location));\n    return this.bind(() => {\n      switch (pname) {\n        case GL.VERTEX_ATTRIB_ARRAY_POINTER:\n          return this.gl.getVertexAttribOffset(location, pname);\n        default:\n          return this.gl.getVertexAttrib(location, pname);\n      }\n    });\n  }\n\n  // DEPRECATED\n\n  /*\n  setDivisor(location, divisor) {\n    location = Number(location);\n    this.bind(() => this.gl.vertexAttribDivisor(location, divisor));\n    return this;\n  }\n\n  // match assumed WebGL defaults\n  static resetConstants(gl) {\n    const MAX_ATTRIBUTES = VertexArrayObject.getMaxAttributes(gl);\n    for (let i = 0; i < MAX_ATTRIBUTES; i++) {\n      VertexArrayObject.setConstant(gl, i, [0, 0, 0, 1]);\n    }\n  }\n\n  // Resets all attributes (to default valued constants)\n  resetAttributes() {\n    // WebGL offers disabling, but no clear way to set a VertexArray buffer to `null`\n    // But Chrome does not like buffers that are bound to several binding points.\n    // So we just bind all the attributes to the dummy \"attribute zero\" buffer\n    this.buffer = this.buffer || new Buffer(this.gl, {size: 4});\n\n    for (const location in this.values) {\n      if (this.values[location] instanceof Buffer) {\n        this.gl.disableVertexAttribArray(location);\n        this.gl.bindBuffer(GL.ARRAY_BUFFER, this.buffer.handle);\n        this.gl.vertexAttribPointer(location, 1, GL.FLOAT, false, 0, 0);\n      }\n    }\n\n    this.setElementBuffer(null);\n    return this;\n  }\n  */\n}\n"],"file":"vertex-array-object.js"}