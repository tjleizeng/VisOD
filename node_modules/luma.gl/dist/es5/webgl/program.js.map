{"version":3,"sources":["../../../src/webgl/program.js"],"names":["LOG_PROGRAM_PERF_PRIORITY","GL_SEPARATE_ATTRIBS","Program","gl","opts","stubRemovedMethods","_isCached","initialize","Object","seal","_setId","id","props","vs","fs","varyings","bufferMode","VertexShader","source","FragmentShader","uniforms","samplers","transformFeedbackVaryings","handle","_compileAndLink","_readUniformLocationsFromLinkedProgram","configuration","ProgramConfiguration","setProps","setUniforms","logPriority","drawMode","vertexCount","offset","start","end","isIndexed","indexType","isInstanced","instanceCount","vertexArray","transformFeedback","framebuffer","parameters","undefined","fb","message","log","useProgram","bindForDraw","deprecated","_bindTextures","assign","primitiveMode","begin","drawElementsInstanced","isNaN","drawRangeElements","drawElements","drawArraysInstanced","drawArrays","_onChangeCallback","somethingChanged","changedUniforms","key","_uniformSetters","_setUniforms","uniformName","uniformSetter","textureIndex","uniform","sampler","Framebuffer","texture","Texture","bind","_textureIndexCounter","createProgram","deleteProgram","shaderHandles","getAttachedShaders","shaderHandle","type","getShaderParameter","pname","getProgramParameter","programName","_getName","getName","replace","attachShader","time","linkProgram","timeEnd","debug","priority","validateProgram","linked","Error","getProgramInfoLog","_uniformCount","_getParameter","i","info","getActiveUniform","name","isArray","location","getUniformLocation","uniformIndices","getActiveUniforms","blockName","getUniformBlockIndex","blockIndex","getActiveUniformBlockParameter","blockBinding","uniformBlockBinding","Resource"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;AAEA;;AACA;;AACA;;AACA;;AACA;;AACA;;AACA;;AACA;;AACA;;AACA;;AACA;;AACA;;AACA;;AAdA;AAgBA,IAAMA,yBAAyB,GAAG,CAAlC,C,CAEA;;AACA,IAAMC,mBAAmB,GAAG,MAA5B;;IAEqBC,O;;;;;AACnB,mBAAYC,EAAZ,EAA2B;AAAA;;AAAA,QAAXC,IAAW,uEAAJ,EAAI;AAAA;AACzB,6GAAMD,EAAN,EAAUC,IAAV;;AAEA,UAAKC,kBAAL,CAAwB,SAAxB,EAAmC,MAAnC,EAA2C,CACzC,gBADyC,EAEzC,eAFyC,EAGzC,YAHyC,EAIzC,cAJyC,EAMzC,KANyC,EAOzC,iBAPyC,EAQzC,gBARyC,EASzC,oBATyC,EAUzC,iBAVyC,EAYzC,YAZyC,EAazC,qBAbyC,EAczC,oBAdyC,EAezC,mBAfyC,EAgBzC,sBAhByC,EAiBzC,kBAjByC,CAA3C,EAHyB,CAuBzB;;;AACA,UAAKC,SAAL,GAAiB,KAAjB;;AAEA,UAAKC,UAAL,CAAgBH,IAAhB;;AAEAI,IAAAA,MAAM,CAACC,IAAP;;AAEA,UAAKC,MAAL,CAAYN,IAAI,CAACO,EAAjB;;AA9ByB;AA+B1B;;;;iCAEsB;AAAA,UAAZC,KAAY,uEAAJ,EAAI;AAAA,UACdC,EADc,GACwCD,KADxC,CACdC,EADc;AAAA,UACVC,EADU,GACwCF,KADxC,CACVE,EADU;AAAA,UACNC,QADM,GACwCH,KADxC,CACNG,QADM;AAAA,8BACwCH,KADxC,CACII,UADJ;AAAA,UACIA,UADJ,kCACiBf,mBADjB,sBAErB;;AACA,WAAKY,EAAL,GACE,OAAOA,EAAP,KAAc,QAAd,GAAyB,IAAII,oBAAJ,CAAiB,KAAKd,EAAtB,EAA0B;AAACQ,QAAAA,EAAE,YAAKC,KAAK,CAACD,EAAX,QAAH;AAAuBO,QAAAA,MAAM,EAAEL;AAA/B,OAA1B,CAAzB,GAAyFA,EAD3F;AAEA,WAAKC,EAAL,GACE,OAAOA,EAAP,KAAc,QAAd,GAAyB,IAAIK,sBAAJ,CAAmB,KAAKhB,EAAxB,EAA4B;AAACQ,QAAAA,EAAE,YAAKC,KAAK,CAACD,EAAX,QAAH;AAAuBO,QAAAA,MAAM,EAAEJ;AAA/B,OAA5B,CAAzB,GAA2FA,EAD7F;AAEA,2BAAO,KAAKD,EAAL,YAAmBI,oBAA1B;AACA,2BAAO,KAAKH,EAAL,YAAmBK,sBAA1B,EARqB,CAUrB;;AACA,WAAKC,QAAL,GAAgB,EAAhB;AACA,WAAKC,QAAL,GAAgB,EAAhB,CAZqB,CAcrB;;AACA,UAAIN,QAAJ,EAAc;AACZ,6CAAoB,KAAKZ,EAAzB;AACA,aAAKY,QAAL,GAAgBA,QAAhB;AACA,aAAKZ,EAAL,CAAQmB,yBAAR,CAAkC,KAAKC,MAAvC,EAA+CR,QAA/C,EAAyDC,UAAzD;AACD;;AAED,WAAKQ,eAAL;;AACA,WAAKC,sCAAL;;AACA,WAAKC,aAAL,GAAqB,IAAIC,6BAAJ,CAAyB,IAAzB,CAArB;AAEA,aAAO,KAAKC,QAAL,CAAchB,KAAd,CAAP;AACD;;;8BAEiB;AAAA,UAAXR,IAAW,uEAAJ,EAAI;;AAChB,UAAI,KAAKE,SAAT,EAAoB;AAClB;AACA,eAAO,IAAP;AACD;;AACD,6GAAoBF,IAApB;AACD;;;6BAEQQ,K,EAAO;AACd,UAAI,cAAcA,KAAlB,EAAyB;AACvB,aAAKiB,WAAL,CAAiBjB,KAAK,CAACQ,QAAvB,EAAiCR,KAAK,CAACS,QAAvC;AACD;;AACD,aAAO,IAAP;AACD,K,CAED;AACA;;;;+BAsBG;AAAA;;AAAA,UApBDS,WAoBC,QApBDA,WAoBC;AAAA,+BAlBDC,QAkBC;AAAA,UAlBDA,QAkBC;AAAA,UAjBDC,WAiBC,QAjBDA,WAiBC;AAAA,6BAhBDC,MAgBC;AAAA,UAhBDA,MAgBC,4BAhBQ,CAgBR;AAAA,UAfDC,KAeC,QAfDA,KAeC;AAAA,UAdDC,GAcC,QAdDA,GAcC;AAAA,gCAbDC,SAaC;AAAA,UAbDA,SAaC,+BAbW,KAaX;AAAA,gCAZDC,SAYC;AAAA,UAZDA,SAYC;AAAA,kCAXDC,WAWC;AAAA,UAXDA,WAWC,iCAXa,KAWb;AAAA,oCAVDC,aAUC;AAAA,UAVDA,aAUC,mCAVe,CAUf;AAAA,kCARDC,WAQC;AAAA,UARDA,WAQC,iCARa,IAQb;AAAA,UAPDC,iBAOC,QAPDA,iBAOC;AAAA,UANDC,WAMC,QANDA,WAMC;AAAA,iCALDC,UAKC;AAAA,UALDA,UAKC,gCALY,EAKZ;AAAA,+BAFDvB,QAEC;AAAA,UAFDA,QAEC,8BAFU,EAEV;AAAA,+BADDC,QACC;AAAA,UADDA,QACC,8BADU,EACV;;AACD,UAAIS,WAAW,KAAKc,SAApB,EAA+B;AAC7B,YAAMC,EAAE,GAAGH,WAAW,GAAGA,WAAW,CAAC/B,EAAf,GAAoB,SAA1C;AACA,YAAMmC,OAAO,GACX,eAAQ,6BAAO,KAAK3C,EAAZ,EAAgB4B,QAAhB,CAAR,oBAA2CC,WAA3C,6BACaO,aADb,wBACwC,6BAAO,KAAKpC,EAAZ,EAAgBkC,SAAhB,CADxC,+BAEeC,WAFf,wBAEwCF,SAFxC,+BAGeS,EAHf,CADF;;AAKAE,mBAAIA,GAAJ,CAAQjB,WAAR,EAAqBgB,OAArB;AACD;;AAED,WAAK3C,EAAL,CAAQ6C,UAAR,CAAmB,KAAKzB,MAAxB,EAXC,CAaD;;AACA,2BAAOiB,WAAP;AAEAA,MAAAA,WAAW,CAACS,WAAZ,CAAwBjB,WAAxB,EAAqCO,aAArC,EAAoD,YAAM;AACxD,YAAInB,QAAJ,EAAc;AACZ2B,qBAAIG,UAAJ,CAAe,0BAAf,EAA2C,+BAA3C;;AACA,UAAA,MAAI,CAACrB,WAAL,CAAiBT,QAAjB,EAA2BC,QAA3B;AACD;;AAED,QAAA,MAAI,CAAC8B,aAAL;;AAEA,YAAIT,WAAW,KAAKE,SAApB,EAA+B;AAC7BD,UAAAA,UAAU,GAAGnC,MAAM,CAAC4C,MAAP,CAAc,EAAd,EAAkBT,UAAlB,EAA8B;AAACD,YAAAA,WAAW,EAAXA;AAAD,WAA9B,CAAb;AACD;;AAED,YAAID,iBAAJ,EAAuB;AACrB,cAAMY,aAAa,GAAG,0CAAqBtB,QAArB,CAAtB;AACAU,UAAAA,iBAAiB,CAACa,KAAlB,CAAwBD,aAAxB;AACD;;AAED,0CAAe,MAAI,CAAClD,EAApB,EAAwBwC,UAAxB,EAAoC,YAAM;AACxC;AACA,cAAIP,SAAS,IAAIE,WAAjB,EAA8B;AAC5B,YAAA,MAAI,CAACnC,EAAL,CAAQoD,qBAAR,CAA8BxB,QAA9B,EAAwCC,WAAxC,EAAqDK,SAArD,EAAgEJ,MAAhE,EAAwEM,aAAxE;AACD,WAFD,MAEO,IAAIH,SAAS,IAAI,0BAAS,MAAI,CAACjC,EAAd,CAAb,IAAkC,CAACqD,KAAK,CAACtB,KAAD,CAAxC,IAAmD,CAACsB,KAAK,CAACrB,GAAD,CAA7D,EAAoE;AACzE,YAAA,MAAI,CAAChC,EAAL,CAAQsD,iBAAR,CAA0B1B,QAA1B,EAAoCG,KAApC,EAA2CC,GAA3C,EAAgDH,WAAhD,EAA6DK,SAA7D,EAAwEJ,MAAxE;AACD,WAFM,MAEA,IAAIG,SAAJ,EAAe;AACpB,YAAA,MAAI,CAACjC,EAAL,CAAQuD,YAAR,CAAqB3B,QAArB,EAA+BC,WAA/B,EAA4CK,SAA5C,EAAuDJ,MAAvD;AACD,WAFM,MAEA,IAAIK,WAAJ,EAAiB;AACtB,YAAA,MAAI,CAACnC,EAAL,CAAQwD,mBAAR,CAA4B5B,QAA5B,EAAsCE,MAAtC,EAA8CD,WAA9C,EAA2DO,aAA3D;AACD,WAFM,MAEA;AACL,YAAA,MAAI,CAACpC,EAAL,CAAQyD,UAAR,CAAmB7B,QAAnB,EAA6BE,MAA7B,EAAqCD,WAArC;AACD;AACF,SAbD;;AAeA,YAAIS,iBAAJ,EAAuB;AACrBA,UAAAA,iBAAiB,CAACN,GAAlB;AACD;AACF,OAnCD;AAqCA,aAAO,IAAP;AACD;;;gCAEWd,Q,EAAU;AACpBb,MAAAA,MAAM,CAAC4C,MAAP,CAAc,KAAK/B,QAAnB,EAA6BA,QAA7B;AACD;;;kCAEuE;AAAA,UAA5DD,QAA4D,uEAAjD,EAAiD;AAAA,UAA7CC,QAA6C,uEAAlC,EAAkC;;AAAA,UAA9BwC,iBAA8B,uEAAV,YAAM,CAAE,CAAE;;AACtE;AACA;AACA;AACA;AACA,UAAIC,gBAAgB,GAAG,KAAvB;AACA,UAAMC,eAAe,GAAG,EAAxB;;AACA,WAAK,IAAMC,GAAX,IAAkB5C,QAAlB,EAA4B;AAC1B,YAAI,CAAC,iCAAiB,KAAKA,QAAL,CAAc4C,GAAd,CAAjB,EAAqC5C,QAAQ,CAAC4C,GAAD,CAA7C,CAAL,EAA0D;AACxDF,UAAAA,gBAAgB,GAAG,IAAnB;AACAC,UAAAA,eAAe,CAACC,GAAD,CAAf,GAAuB5C,QAAQ,CAAC4C,GAAD,CAA/B;AACA,eAAK5C,QAAL,CAAc4C,GAAd,IAAqB,+BAAe5C,QAAQ,CAAC4C,GAAD,CAAvB,CAArB;AACD;AACF;;AAED,UAAIF,gBAAJ,EAAsB;AACpBD,QAAAA,iBAAiB;;AACjB,2CAAmBE,eAAnB,EAAoC,KAAKpD,EAAzC,EAA6C,KAAKsD,eAAlD;AACAzD,QAAAA,MAAM,CAAC4C,MAAP,CAAc,KAAK/B,QAAnB,EAA6BA,QAA7B;;AACA,aAAK6C,YAAL,CAAkBH,eAAlB;AACD;;AAED,aAAO,IAAP;AACD,K,CAED;AAEA;;;;oCACgB;AACd,WAAK,IAAMI,WAAX,IAA0B,KAAK/C,QAA/B,EAAyC;AACvC,YAAMgD,aAAa,GAAG,KAAKH,eAAL,CAAqBE,WAArB,CAAtB;;AAEA,YAAIC,aAAa,IAAIA,aAAa,CAACC,YAAd,KAA+BzB,SAApD,EAA+D;AAC7D,cAAI0B,OAAO,GAAG,KAAKlD,QAAL,CAAc+C,WAAd,CAAd;AACA,cAAMI,OAAO,GAAG,KAAKlD,QAAL,CAAc8C,WAAd,CAAhB;;AAEA,cAAIG,OAAO,YAAYE,oBAAvB,EAAoC;AAClCF,YAAAA,OAAO,GAAGA,OAAO,CAACG,OAAlB;AACD;;AACD,cAAIH,OAAO,YAAYI,gBAAvB,EAAgC;AAC9B;AACAJ,YAAAA,OAAO,CAACK,IAAR,CAAaP,aAAa,CAACC,YAA3B;AACD,WAV4D,CAW7D;;;AACA,cAAIE,OAAJ,EAAa;AACXA,YAAAA,OAAO,CAACI,IAAR,CAAaP,aAAa,CAACC,YAA3B;AACD;AACF;AACF;AACF,K,CAED;AACA;;AACA;;;;iCACajD,Q,EAAU;AACrB,WAAKjB,EAAL,CAAQ6C,UAAR,CAAmB,KAAKzB,MAAxB;;AAEA,WAAK,IAAM4C,WAAX,IAA0B/C,QAA1B,EAAoC;AAClC,YAAIkD,OAAO,GAAGlD,QAAQ,CAAC+C,WAAD,CAAtB;AACA,YAAMC,aAAa,GAAG,KAAKH,eAAL,CAAqBE,WAArB,CAAtB;;AAEA,YAAIC,aAAJ,EAAmB;AACjB,cAAIE,OAAO,YAAYE,oBAAvB,EAAoC;AAClCF,YAAAA,OAAO,GAAGA,OAAO,CAACG,OAAlB;AACD;;AACD,cAAIH,OAAO,YAAYI,gBAAvB,EAAgC;AAC9B,gBAAIN,aAAa,CAACC,YAAd,KAA+BzB,SAAnC,EAA8C;AAC5CwB,cAAAA,aAAa,CAACC,YAAd,GAA6B,KAAKO,oBAAL,EAA7B;AACD,aAH6B,CAK9B;;;AACA,gBAAMH,OAAO,GAAGH,OAAhB;AAN8B,gBAOvBD,YAPuB,GAOPD,aAPO,CAOvBC,YAPuB;AAS9BI,YAAAA,OAAO,CAACE,IAAR,CAAaN,YAAb,EAT8B,CAW9B;;AACAD,YAAAA,aAAa,CAACC,YAAD,CAAb;AACD,WAbD,MAaO;AACL;AACAD,YAAAA,aAAa,CAACE,OAAD,CAAb;AACD;AACF;AACF;;AAED,aAAO,IAAP;AACD,K,CAED;;;;oCAEgB;AACd,aAAO,KAAKnE,EAAL,CAAQ0E,aAAR,EAAP;AACD;;;oCAEe;AACd,WAAK1E,EAAL,CAAQ2E,aAAR,CAAsB,KAAKvD,MAA3B;AACD,K,CAED;;;;0CACsBA,M,EAAQ;AAC5B,UAAMwD,aAAa,GAAG,KAAK5E,EAAL,CAAQ6E,kBAAR,CAA2BzD,MAA3B,CAAtB;AACA,UAAMnB,IAAI,GAAG,EAAb;AAF4B;AAAA;AAAA;;AAAA;AAG5B,6BAA2B2E,aAA3B,8HAA0C;AAAA,cAA/BE,YAA+B;AACxC,cAAMC,IAAI,GAAG,KAAK/E,EAAL,CAAQgF,kBAAR,CAA2B,KAAK5D,MAAhC,QAAb;;AACA,kBAAQ2D,IAAR;AACE;AACE9E,cAAAA,IAAI,CAACS,EAAL,GAAU,IAAII,oBAAJ,CAAiB;AAACM,gBAAAA,MAAM,EAAE0D;AAAT,eAAjB,CAAV;AACA;;AACF;AACE7E,cAAAA,IAAI,CAACU,EAAL,GAAU,IAAIK,sBAAJ,CAAmB;AAACI,gBAAAA,MAAM,EAAE0D;AAAT,eAAnB,CAAV;AACA;;AACF;AAPF;AASD;AAd2B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AAe5B,aAAO7E,IAAP;AACD;;;kCAEagF,K,EAAO;AACnB,aAAO,KAAKjF,EAAL,CAAQkF,mBAAR,CAA4B,KAAK9D,MAAjC,EAAyC6D,KAAzC,CAAP;AACD,K,CAED;AACA;;;;2BACOzE,E,EAAI;AACT,UAAI,CAACA,EAAL,EAAS;AACP,YAAM2E,WAAW,GAAG,KAAKC,QAAL,EAApB;;AACA,aAAK5E,EAAL,GAAU,gBAAI2E,WAAJ,CAAV;AACD;AACF,K,CAED;;;;+BACW;AACT,UAAIA,WAAW,GAAG,KAAKzE,EAAL,CAAQ2E,OAAR,MAAqB,KAAK1E,EAAL,CAAQ0E,OAAR,EAAvC;AACAF,MAAAA,WAAW,GAAGA,WAAW,CAACG,OAAZ,CAAoB,SAApB,EAA+B,EAA/B,CAAd;AACAH,MAAAA,WAAW,GAAGA,WAAW,aAAMA,WAAN,gBAA8B,SAAvD;AACA,aAAOA,WAAP;AACD;;;sCAEiB;AAAA,UACTnF,EADS,GACH,IADG,CACTA,EADS;AAEhBA,MAAAA,EAAE,CAACuF,YAAH,CAAgB,KAAKnE,MAArB,EAA6B,KAAKV,EAAL,CAAQU,MAArC;AACApB,MAAAA,EAAE,CAACuF,YAAH,CAAgB,KAAKnE,MAArB,EAA6B,KAAKT,EAAL,CAAQS,MAArC;;AACAwB,iBAAI4C,IAAJ,CAAS3F,yBAAT,4BAAuD,KAAKuF,QAAL,EAAvD;;AACApF,MAAAA,EAAE,CAACyF,WAAH,CAAe,KAAKrE,MAApB;;AACAwB,iBAAI8C,OAAJ,CAAY7F,yBAAZ,4BAA0D,KAAKuF,QAAL,EAA1D,KANgB,CAQhB;;;AACA,UAAIpF,EAAE,CAAC2F,KAAH,IAAY/C,WAAIgD,QAAJ,GAAe,CAA/B,EAAkC;AAChC5F,QAAAA,EAAE,CAAC6F,eAAH,CAAmB,KAAKzE,MAAxB;AACA,YAAM0E,MAAM,GAAG9F,EAAE,CAACkF,mBAAH,CAAuB,KAAK9D,MAA5B,QAAf;;AACA,YAAI,CAAC0E,MAAL,EAAa;AACX,gBAAM,IAAIC,KAAJ,0BAA4B/F,EAAE,CAACgG,iBAAH,CAAqB,KAAK5E,MAA1B,CAA5B,EAAN;AACD;AACF;AACF,K,CAED;;;;6DACyC;AAAA,UAChCpB,EADgC,GAC1B,IAD0B,CAChCA,EADgC;AAEvC,WAAK8D,eAAL,GAAuB,EAAvB;AACA,WAAKmC,aAAL,GAAqB,KAAKC,aAAL,OAArB;;AACA,WAAK,IAAIC,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAG,KAAKF,aAAzB,EAAwCE,CAAC,EAAzC,EAA6C;AAC3C,YAAMC,IAAI,GAAG,KAAKpG,EAAL,CAAQqG,gBAAR,CAAyB,KAAKjF,MAA9B,EAAsC+E,CAAtC,CAAb;;AAD2C,gCAEnB,gCAAiBC,IAAI,CAACE,IAAtB,CAFmB;AAAA,YAEpCA,IAFoC,qBAEpCA,IAFoC;AAAA,YAE9BC,OAF8B,qBAE9BA,OAF8B;;AAG3C,YAAMC,QAAQ,GAAGxG,EAAE,CAACyG,kBAAH,CAAsB,KAAKrF,MAA3B,EAAmCkF,IAAnC,CAAjB;AACA,aAAKxC,eAAL,CAAqBwC,IAArB,IAA6B,gCAAiBtG,EAAjB,EAAqBwG,QAArB,EAA+BJ,IAA/B,EAAqCG,OAArC,CAA7B;AACD;;AACD,WAAK9B,oBAAL,GAA4B,CAA5B;AACD,K,CAED;;;;4BACQ,CAAE,C,CAEV;AAEA;AACA;AACA;;;;sCACkBiC,c,EAAgBzB,K,EAAO;AACvC,aAAO,KAAKjF,EAAL,CAAQ2G,iBAAR,CAA0B,KAAKvF,MAA/B,EAAuCsF,cAAvC,EAAuDzB,KAAvD,CAAP;AACD,K,CAED;;;;yCACqB2B,S,EAAW;AAC9B,aAAO,KAAK5G,EAAL,CAAQ6G,oBAAR,CAA6B,KAAKzF,MAAlC,EAA0CwF,SAA1C,CAAP;AACD,K,CAED;AACA;AACA;;;;mDAC+BE,U,EAAY7B,K,EAAO;AAChD,aAAO,KAAKjF,EAAL,CAAQ+G,8BAAR,CAAuC,KAAK3F,MAA5C,EAAoD0F,UAApD,EAAgE7B,KAAhE,CAAP;AACD,K,CAED;;;;wCACoB6B,U,EAAYE,Y,EAAc;AAC5C,WAAKhH,EAAL,CAAQiH,mBAAR,CAA4B,KAAK7F,MAAjC,EAAyC0F,UAAzC,EAAqDE,YAArD;AACD;;;EArWkCE,iB","sourcesContent":["/* eslint-disable no-inline-comments */\nimport GL from '../constants';\nimport Resource from './resource';\nimport Texture from './texture';\nimport Framebuffer from './framebuffer';\nimport {parseUniformName, getUniformSetter} from './uniforms';\nimport {VertexShader, FragmentShader} from './shader';\nimport ProgramConfiguration from './program-configuration';\nimport {withParameters} from '../webgl-context/context-state';\nimport {checkUniformValues, areUniformsEqual, getUniformCopy} from '../webgl/uniforms';\nimport {assertWebGL2Context, isWebGL2} from '../webgl-utils';\nimport {getPrimitiveDrawMode} from '../webgl-utils/attribute-utils';\nimport {getKey} from '../webgl-utils/constants-to-keys';\nimport {log, uid} from '../utils';\nimport assert from '../utils/assert';\n\nconst LOG_PROGRAM_PERF_PRIORITY = 4;\n\n// const GL_INTERLEAVED_ATTRIBS = 0x8C8C;\nconst GL_SEPARATE_ATTRIBS = 0x8c8d;\n\nexport default class Program extends Resource {\n  constructor(gl, opts = {}) {\n    super(gl, opts);\n\n    this.stubRemovedMethods('Program', 'v6.0', [\n      'setVertexArray',\n      'setAttributes',\n      'setBuffers',\n      'unsetBuffers',\n\n      'use',\n      'getUniformCount',\n      'getUniformInfo',\n      'getUniformLocation',\n      'getUniformValue',\n\n      'getVarying',\n      'getFragDataLocation',\n      'getAttachedShaders',\n      'getAttributeCount',\n      'getAttributeLocation',\n      'getAttributeInfo'\n    ]);\n\n    // Experimental flag to avoid deleting Program object while it is cached\n    this._isCached = false;\n\n    this.initialize(opts);\n\n    Object.seal(this);\n\n    this._setId(opts.id);\n  }\n\n  initialize(props = {}) {\n    const {vs, fs, varyings, bufferMode = GL_SEPARATE_ATTRIBS} = props;\n    // Create shaders if needed\n    this.vs =\n      typeof vs === 'string' ? new VertexShader(this.gl, {id: `${props.id}-vs`, source: vs}) : vs;\n    this.fs =\n      typeof fs === 'string' ? new FragmentShader(this.gl, {id: `${props.id}-fs`, source: fs}) : fs;\n    assert(this.vs instanceof VertexShader);\n    assert(this.fs instanceof FragmentShader);\n\n    // uniforms\n    this.uniforms = {};\n    this.samplers = {};\n\n    // Setup varyings if supplied\n    if (varyings) {\n      assertWebGL2Context(this.gl);\n      this.varyings = varyings;\n      this.gl.transformFeedbackVaryings(this.handle, varyings, bufferMode);\n    }\n\n    this._compileAndLink();\n    this._readUniformLocationsFromLinkedProgram();\n    this.configuration = new ProgramConfiguration(this);\n\n    return this.setProps(props);\n  }\n\n  delete(opts = {}) {\n    if (this._isCached) {\n      // This object is cached, do not delete\n      return this;\n    }\n    return super.delete(opts);\n  }\n\n  setProps(props) {\n    if ('uniforms' in props) {\n      this.setUniforms(props.uniforms, props.samplers);\n    }\n    return this;\n  }\n\n  // Another thing about the WebGL API is that there are so many ways to draw things.\n  // This function unifies those ways into a single call using common parameters with sane defaults\n  draw({\n    logPriority,\n\n    drawMode = GL.TRIANGLES,\n    vertexCount,\n    offset = 0,\n    start,\n    end,\n    isIndexed = false,\n    indexType = GL.UNSIGNED_SHORT,\n    isInstanced = false,\n    instanceCount = 0,\n\n    vertexArray = null,\n    transformFeedback,\n    framebuffer,\n    parameters = {},\n\n    // Deprecated\n    uniforms = {},\n    samplers = {}\n  }) {\n    if (logPriority !== undefined) {\n      const fb = framebuffer ? framebuffer.id : 'default';\n      const message =\n        `mode=${getKey(this.gl, drawMode)} verts=${vertexCount} ` +\n        `instances=${instanceCount} indexType=${getKey(this.gl, indexType)} ` +\n        `isInstanced=${isInstanced} isIndexed=${isIndexed} ` +\n        `Framebuffer=${fb}`;\n      log.log(logPriority, message)();\n    }\n\n    this.gl.useProgram(this.handle);\n\n    // TODO - move vertex array binding and transform feedback binding to withParameters?\n    assert(vertexArray);\n\n    vertexArray.bindForDraw(vertexCount, instanceCount, () => {\n      if (uniforms) {\n        log.deprecated('Program.draw({uniforms})', 'Program.setUniforms(uniforms)');\n        this.setUniforms(uniforms, samplers);\n      }\n\n      this._bindTextures();\n\n      if (framebuffer !== undefined) {\n        parameters = Object.assign({}, parameters, {framebuffer});\n      }\n\n      if (transformFeedback) {\n        const primitiveMode = getPrimitiveDrawMode(drawMode);\n        transformFeedback.begin(primitiveMode);\n      }\n\n      withParameters(this.gl, parameters, () => {\n        // TODO - Use polyfilled WebGL2RenderingContext instead of ANGLE extension\n        if (isIndexed && isInstanced) {\n          this.gl.drawElementsInstanced(drawMode, vertexCount, indexType, offset, instanceCount);\n        } else if (isIndexed && isWebGL2(this.gl) && !isNaN(start) && !isNaN(end)) {\n          this.gl.drawRangeElements(drawMode, start, end, vertexCount, indexType, offset);\n        } else if (isIndexed) {\n          this.gl.drawElements(drawMode, vertexCount, indexType, offset);\n        } else if (isInstanced) {\n          this.gl.drawArraysInstanced(drawMode, offset, vertexCount, instanceCount);\n        } else {\n          this.gl.drawArrays(drawMode, offset, vertexCount);\n        }\n      });\n\n      if (transformFeedback) {\n        transformFeedback.end();\n      }\n    });\n\n    return this;\n  }\n\n  setSamplers(samplers) {\n    Object.assign(this.samplers, samplers);\n  }\n\n  setUniforms(uniforms = {}, samplers = {}, _onChangeCallback = () => {}) {\n    // Simple change detection - if all uniforms are unchanged, do nothing\n    // TODO - Disabled since it interferes with textures\n    // we must still rebind texture units to current program's textures before drawing\n    // If modifying, test with `picking` example on website\n    let somethingChanged = false;\n    const changedUniforms = {};\n    for (const key in uniforms) {\n      if (!areUniformsEqual(this.uniforms[key], uniforms[key])) {\n        somethingChanged = true;\n        changedUniforms[key] = uniforms[key];\n        this.uniforms[key] = getUniformCopy(uniforms[key]);\n      }\n    }\n\n    if (somethingChanged) {\n      _onChangeCallback();\n      checkUniformValues(changedUniforms, this.id, this._uniformSetters);\n      Object.assign(this.samplers, samplers);\n      this._setUniforms(changedUniforms);\n    }\n\n    return this;\n  }\n\n  // PRIVATE METHODS\n\n  // This needs to be done before every draw call\n  _bindTextures() {\n    for (const uniformName in this.uniforms) {\n      const uniformSetter = this._uniformSetters[uniformName];\n\n      if (uniformSetter && uniformSetter.textureIndex !== undefined) {\n        let uniform = this.uniforms[uniformName];\n        const sampler = this.samplers[uniformName];\n\n        if (uniform instanceof Framebuffer) {\n          uniform = uniform.texture;\n        }\n        if (uniform instanceof Texture) {\n          // Bind texture to index\n          uniform.bind(uniformSetter.textureIndex);\n        }\n        // Bind a sampler (if supplied) to index\n        if (sampler) {\n          sampler.bind(uniformSetter.textureIndex);\n        }\n      }\n    }\n  }\n\n  // Apply a set of uniform values to a program\n  // Only uniforms actually present in the linked program will be updated.\n  /* eslint-disable max-depth */\n  _setUniforms(uniforms) {\n    this.gl.useProgram(this.handle);\n\n    for (const uniformName in uniforms) {\n      let uniform = uniforms[uniformName];\n      const uniformSetter = this._uniformSetters[uniformName];\n\n      if (uniformSetter) {\n        if (uniform instanceof Framebuffer) {\n          uniform = uniform.texture;\n        }\n        if (uniform instanceof Texture) {\n          if (uniformSetter.textureIndex === undefined) {\n            uniformSetter.textureIndex = this._textureIndexCounter++;\n          }\n\n          // Bind texture to index\n          const texture = uniform;\n          const {textureIndex} = uniformSetter;\n\n          texture.bind(textureIndex);\n\n          // Set the uniform sampler to the texture index\n          uniformSetter(textureIndex);\n        } else {\n          // Just set the value\n          uniformSetter(uniform);\n        }\n      }\n    }\n\n    return this;\n  }\n\n  // RESOURCE METHODS\n\n  _createHandle() {\n    return this.gl.createProgram();\n  }\n\n  _deleteHandle() {\n    this.gl.deleteProgram(this.handle);\n  }\n\n  // Extract opts needed to initialize a `Program` from an independently created WebGLProgram handle\n  _getOptionsFromHandle(handle) {\n    const shaderHandles = this.gl.getAttachedShaders(handle);\n    const opts = {};\n    for (const shaderHandle of shaderHandles) {\n      const type = this.gl.getShaderParameter(this.handle, GL.SHADER_TYPE);\n      switch (type) {\n        case GL.VERTEX_SHADER:\n          opts.vs = new VertexShader({handle: shaderHandle});\n          break;\n        case GL.FRAGMENT_SHADER:\n          opts.fs = new FragmentShader({handle: shaderHandle});\n          break;\n        default:\n      }\n    }\n    return opts;\n  }\n\n  _getParameter(pname) {\n    return this.gl.getProgramParameter(this.handle, pname);\n  }\n\n  // If program is not named, name it after shader names\n  // TODO - this.id will already have been initialized\n  _setId(id) {\n    if (!id) {\n      const programName = this._getName();\n      this.id = uid(programName);\n    }\n  }\n\n  // Generate a default name for the program based on names of the shaders\n  _getName() {\n    let programName = this.vs.getName() || this.fs.getName();\n    programName = programName.replace(/shader/i, '');\n    programName = programName ? `${programName}-program` : 'program';\n    return programName;\n  }\n\n  _compileAndLink() {\n    const {gl} = this;\n    gl.attachShader(this.handle, this.vs.handle);\n    gl.attachShader(this.handle, this.fs.handle);\n    log.time(LOG_PROGRAM_PERF_PRIORITY, `linkProgram for ${this._getName()}`)();\n    gl.linkProgram(this.handle);\n    log.timeEnd(LOG_PROGRAM_PERF_PRIORITY, `linkProgram for ${this._getName()}`)();\n\n    // Avoid checking program linking error in production\n    if (gl.debug || log.priority > 0) {\n      gl.validateProgram(this.handle);\n      const linked = gl.getProgramParameter(this.handle, gl.LINK_STATUS);\n      if (!linked) {\n        throw new Error(`Error linking: ${gl.getProgramInfoLog(this.handle)}`);\n      }\n    }\n  }\n\n  // query uniform locations and build name to setter map.\n  _readUniformLocationsFromLinkedProgram() {\n    const {gl} = this;\n    this._uniformSetters = {};\n    this._uniformCount = this._getParameter(GL.ACTIVE_UNIFORMS);\n    for (let i = 0; i < this._uniformCount; i++) {\n      const info = this.gl.getActiveUniform(this.handle, i);\n      const {name, isArray} = parseUniformName(info.name);\n      const location = gl.getUniformLocation(this.handle, name);\n      this._uniformSetters[name] = getUniformSetter(gl, location, info, isArray);\n    }\n    this._textureIndexCounter = 0;\n  }\n\n  // stub for shader chache, should reset uniforms to default valiues\n  reset() {}\n\n  // TO BE REMOVED in v7?\n\n  // Rretrieves information about active uniforms identifed by their indices (`uniformIndices`)\n  // https://\n  // developer.mozilla.org/en-US/docs/Web/API/WebGL2RenderingContext/getActiveUniforms\n  getActiveUniforms(uniformIndices, pname) {\n    return this.gl.getActiveUniforms(this.handle, uniformIndices, pname);\n  }\n\n  // Retrieves the index of a uniform block\n  getUniformBlockIndex(blockName) {\n    return this.gl.getUniformBlockIndex(this.handle, blockName);\n  }\n\n  // Retrieves information about an active uniform block (`blockIndex`)\n  // https://\n  // developer.mozilla.org/en-US/docs/Web/API/WebGL2RenderingContext/getActiveUniformBlockParameter\n  getActiveUniformBlockParameter(blockIndex, pname) {\n    return this.gl.getActiveUniformBlockParameter(this.handle, blockIndex, pname);\n  }\n\n  // Binds a uniform block (`blockIndex`) to a specific binding point (`blockBinding`)\n  uniformBlockBinding(blockIndex, blockBinding) {\n    this.gl.uniformBlockBinding(this.handle, blockIndex, blockBinding);\n  }\n}\n"],"file":"program.js"}