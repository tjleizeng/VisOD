{"version":3,"sources":["../../../src/webgl/program.js"],"names":["Resource","Texture","Framebuffer","parseUniformName","getUniformSetter","VertexShader","FragmentShader","ProgramConfiguration","withParameters","checkUniformValues","areUniformsEqual","getUniformCopy","assertWebGL2Context","isWebGL2","getPrimitiveDrawMode","getKey","log","uid","assert","LOG_PROGRAM_PERF_PRIORITY","GL_SEPARATE_ATTRIBS","Program","constructor","gl","opts","stubRemovedMethods","_isCached","initialize","Object","seal","_setId","id","props","vs","fs","varyings","bufferMode","source","uniforms","samplers","transformFeedbackVaryings","handle","_compileAndLink","_readUniformLocationsFromLinkedProgram","configuration","setProps","delete","setUniforms","draw","logPriority","drawMode","vertexCount","offset","start","end","isIndexed","indexType","isInstanced","instanceCount","vertexArray","transformFeedback","framebuffer","parameters","undefined","fb","message","useProgram","bindForDraw","deprecated","_bindTextures","assign","primitiveMode","begin","drawElementsInstanced","isNaN","drawRangeElements","drawElements","drawArraysInstanced","drawArrays","setSamplers","_onChangeCallback","somethingChanged","changedUniforms","key","_uniformSetters","_setUniforms","uniformName","uniformSetter","textureIndex","uniform","sampler","texture","bind","_textureIndexCounter","_createHandle","createProgram","_deleteHandle","deleteProgram","_getOptionsFromHandle","shaderHandles","getAttachedShaders","shaderHandle","type","getShaderParameter","_getParameter","pname","getProgramParameter","programName","_getName","getName","replace","attachShader","time","linkProgram","timeEnd","debug","priority","validateProgram","linked","Error","getProgramInfoLog","_uniformCount","i","info","getActiveUniform","name","isArray","location","getUniformLocation","reset","getActiveUniforms","uniformIndices","getUniformBlockIndex","blockName","getActiveUniformBlockParameter","blockIndex","uniformBlockBinding","blockBinding"],"mappings":"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","sourcesContent":["/* eslint-disable no-inline-comments */\nimport GL from '../constants';\nimport Resource from './resource';\nimport Texture from './texture';\nimport Framebuffer from './framebuffer';\nimport {parseUniformName, getUniformSetter} from './uniforms';\nimport {VertexShader, FragmentShader} from './shader';\nimport ProgramConfiguration from './program-configuration';\nimport {withParameters} from '../webgl-context/context-state';\nimport {checkUniformValues, areUniformsEqual, getUniformCopy} from '../webgl/uniforms';\nimport {assertWebGL2Context, isWebGL2} from '../webgl-utils';\nimport {getPrimitiveDrawMode} from '../webgl-utils/attribute-utils';\nimport {getKey} from '../webgl-utils/constants-to-keys';\nimport {log, uid} from '../utils';\nimport assert from '../utils/assert';\n\nconst LOG_PROGRAM_PERF_PRIORITY = 4;\n\n// const GL_INTERLEAVED_ATTRIBS = 0x8C8C;\nconst GL_SEPARATE_ATTRIBS = 0x8c8d;\n\nexport default class Program extends Resource {\n  constructor(gl, opts = {}) {\n    super(gl, opts);\n\n    this.stubRemovedMethods('Program', 'v6.0', [\n      'setVertexArray',\n      'setAttributes',\n      'setBuffers',\n      'unsetBuffers',\n\n      'use',\n      'getUniformCount',\n      'getUniformInfo',\n      'getUniformLocation',\n      'getUniformValue',\n\n      'getVarying',\n      'getFragDataLocation',\n      'getAttachedShaders',\n      'getAttributeCount',\n      'getAttributeLocation',\n      'getAttributeInfo'\n    ]);\n\n    // Experimental flag to avoid deleting Program object while it is cached\n    this._isCached = false;\n\n    this.initialize(opts);\n\n    Object.seal(this);\n\n    this._setId(opts.id);\n  }\n\n  initialize(props = {}) {\n    const {vs, fs, varyings, bufferMode = GL_SEPARATE_ATTRIBS} = props;\n    // Create shaders if needed\n    this.vs =\n      typeof vs === 'string' ? new VertexShader(this.gl, {id: `${props.id}-vs`, source: vs}) : vs;\n    this.fs =\n      typeof fs === 'string' ? new FragmentShader(this.gl, {id: `${props.id}-fs`, source: fs}) : fs;\n    assert(this.vs instanceof VertexShader);\n    assert(this.fs instanceof FragmentShader);\n\n    // uniforms\n    this.uniforms = {};\n    this.samplers = {};\n\n    // Setup varyings if supplied\n    if (varyings) {\n      assertWebGL2Context(this.gl);\n      this.varyings = varyings;\n      this.gl.transformFeedbackVaryings(this.handle, varyings, bufferMode);\n    }\n\n    this._compileAndLink();\n    this._readUniformLocationsFromLinkedProgram();\n    this.configuration = new ProgramConfiguration(this);\n\n    return this.setProps(props);\n  }\n\n  delete(opts = {}) {\n    if (this._isCached) {\n      // This object is cached, do not delete\n      return this;\n    }\n    return super.delete(opts);\n  }\n\n  setProps(props) {\n    if ('uniforms' in props) {\n      this.setUniforms(props.uniforms, props.samplers);\n    }\n    return this;\n  }\n\n  // Another thing about the WebGL API is that there are so many ways to draw things.\n  // This function unifies those ways into a single call using common parameters with sane defaults\n  draw({\n    logPriority,\n\n    drawMode = GL.TRIANGLES,\n    vertexCount,\n    offset = 0,\n    start,\n    end,\n    isIndexed = false,\n    indexType = GL.UNSIGNED_SHORT,\n    isInstanced = false,\n    instanceCount = 0,\n\n    vertexArray = null,\n    transformFeedback,\n    framebuffer,\n    parameters = {},\n\n    // Deprecated\n    uniforms = {},\n    samplers = {}\n  }) {\n    if (logPriority !== undefined) {\n      const fb = framebuffer ? framebuffer.id : 'default';\n      const message =\n        `mode=${getKey(this.gl, drawMode)} verts=${vertexCount} ` +\n        `instances=${instanceCount} indexType=${getKey(this.gl, indexType)} ` +\n        `isInstanced=${isInstanced} isIndexed=${isIndexed} ` +\n        `Framebuffer=${fb}`;\n      log.log(logPriority, message)();\n    }\n\n    this.gl.useProgram(this.handle);\n\n    // TODO - move vertex array binding and transform feedback binding to withParameters?\n    assert(vertexArray);\n\n    vertexArray.bindForDraw(vertexCount, instanceCount, () => {\n      if (uniforms) {\n        log.deprecated('Program.draw({uniforms})', 'Program.setUniforms(uniforms)');\n        this.setUniforms(uniforms, samplers);\n      }\n\n      this._bindTextures();\n\n      if (framebuffer !== undefined) {\n        parameters = Object.assign({}, parameters, {framebuffer});\n      }\n\n      if (transformFeedback) {\n        const primitiveMode = getPrimitiveDrawMode(drawMode);\n        transformFeedback.begin(primitiveMode);\n      }\n\n      withParameters(this.gl, parameters, () => {\n        // TODO - Use polyfilled WebGL2RenderingContext instead of ANGLE extension\n        if (isIndexed && isInstanced) {\n          this.gl.drawElementsInstanced(drawMode, vertexCount, indexType, offset, instanceCount);\n        } else if (isIndexed && isWebGL2(this.gl) && !isNaN(start) && !isNaN(end)) {\n          this.gl.drawRangeElements(drawMode, start, end, vertexCount, indexType, offset);\n        } else if (isIndexed) {\n          this.gl.drawElements(drawMode, vertexCount, indexType, offset);\n        } else if (isInstanced) {\n          this.gl.drawArraysInstanced(drawMode, offset, vertexCount, instanceCount);\n        } else {\n          this.gl.drawArrays(drawMode, offset, vertexCount);\n        }\n      });\n\n      if (transformFeedback) {\n        transformFeedback.end();\n      }\n    });\n\n    return this;\n  }\n\n  setSamplers(samplers) {\n    Object.assign(this.samplers, samplers);\n  }\n\n  setUniforms(uniforms = {}, samplers = {}, _onChangeCallback = () => {}) {\n    // Simple change detection - if all uniforms are unchanged, do nothing\n    // TODO - Disabled since it interferes with textures\n    // we must still rebind texture units to current program's textures before drawing\n    // If modifying, test with `picking` example on website\n    let somethingChanged = false;\n    const changedUniforms = {};\n    for (const key in uniforms) {\n      if (!areUniformsEqual(this.uniforms[key], uniforms[key])) {\n        somethingChanged = true;\n        changedUniforms[key] = uniforms[key];\n        this.uniforms[key] = getUniformCopy(uniforms[key]);\n      }\n    }\n\n    if (somethingChanged) {\n      _onChangeCallback();\n      checkUniformValues(changedUniforms, this.id, this._uniformSetters);\n      Object.assign(this.samplers, samplers);\n      this._setUniforms(changedUniforms);\n    }\n\n    return this;\n  }\n\n  // PRIVATE METHODS\n\n  // This needs to be done before every draw call\n  _bindTextures() {\n    for (const uniformName in this.uniforms) {\n      const uniformSetter = this._uniformSetters[uniformName];\n\n      if (uniformSetter && uniformSetter.textureIndex !== undefined) {\n        let uniform = this.uniforms[uniformName];\n        const sampler = this.samplers[uniformName];\n\n        if (uniform instanceof Framebuffer) {\n          uniform = uniform.texture;\n        }\n        if (uniform instanceof Texture) {\n          // Bind texture to index\n          uniform.bind(uniformSetter.textureIndex);\n        }\n        // Bind a sampler (if supplied) to index\n        if (sampler) {\n          sampler.bind(uniformSetter.textureIndex);\n        }\n      }\n    }\n  }\n\n  // Apply a set of uniform values to a program\n  // Only uniforms actually present in the linked program will be updated.\n  /* eslint-disable max-depth */\n  _setUniforms(uniforms) {\n    this.gl.useProgram(this.handle);\n\n    for (const uniformName in uniforms) {\n      let uniform = uniforms[uniformName];\n      const uniformSetter = this._uniformSetters[uniformName];\n\n      if (uniformSetter) {\n        if (uniform instanceof Framebuffer) {\n          uniform = uniform.texture;\n        }\n        if (uniform instanceof Texture) {\n          if (uniformSetter.textureIndex === undefined) {\n            uniformSetter.textureIndex = this._textureIndexCounter++;\n          }\n\n          // Bind texture to index\n          const texture = uniform;\n          const {textureIndex} = uniformSetter;\n\n          texture.bind(textureIndex);\n\n          // Set the uniform sampler to the texture index\n          uniformSetter(textureIndex);\n        } else {\n          // Just set the value\n          uniformSetter(uniform);\n        }\n      }\n    }\n\n    return this;\n  }\n\n  // RESOURCE METHODS\n\n  _createHandle() {\n    return this.gl.createProgram();\n  }\n\n  _deleteHandle() {\n    this.gl.deleteProgram(this.handle);\n  }\n\n  // Extract opts needed to initialize a `Program` from an independently created WebGLProgram handle\n  _getOptionsFromHandle(handle) {\n    const shaderHandles = this.gl.getAttachedShaders(handle);\n    const opts = {};\n    for (const shaderHandle of shaderHandles) {\n      const type = this.gl.getShaderParameter(this.handle, GL.SHADER_TYPE);\n      switch (type) {\n        case GL.VERTEX_SHADER:\n          opts.vs = new VertexShader({handle: shaderHandle});\n          break;\n        case GL.FRAGMENT_SHADER:\n          opts.fs = new FragmentShader({handle: shaderHandle});\n          break;\n        default:\n      }\n    }\n    return opts;\n  }\n\n  _getParameter(pname) {\n    return this.gl.getProgramParameter(this.handle, pname);\n  }\n\n  // If program is not named, name it after shader names\n  // TODO - this.id will already have been initialized\n  _setId(id) {\n    if (!id) {\n      const programName = this._getName();\n      this.id = uid(programName);\n    }\n  }\n\n  // Generate a default name for the program based on names of the shaders\n  _getName() {\n    let programName = this.vs.getName() || this.fs.getName();\n    programName = programName.replace(/shader/i, '');\n    programName = programName ? `${programName}-program` : 'program';\n    return programName;\n  }\n\n  _compileAndLink() {\n    const {gl} = this;\n    gl.attachShader(this.handle, this.vs.handle);\n    gl.attachShader(this.handle, this.fs.handle);\n    log.time(LOG_PROGRAM_PERF_PRIORITY, `linkProgram for ${this._getName()}`)();\n    gl.linkProgram(this.handle);\n    log.timeEnd(LOG_PROGRAM_PERF_PRIORITY, `linkProgram for ${this._getName()}`)();\n\n    // Avoid checking program linking error in production\n    if (gl.debug || log.priority > 0) {\n      gl.validateProgram(this.handle);\n      const linked = gl.getProgramParameter(this.handle, gl.LINK_STATUS);\n      if (!linked) {\n        throw new Error(`Error linking: ${gl.getProgramInfoLog(this.handle)}`);\n      }\n    }\n  }\n\n  // query uniform locations and build name to setter map.\n  _readUniformLocationsFromLinkedProgram() {\n    const {gl} = this;\n    this._uniformSetters = {};\n    this._uniformCount = this._getParameter(GL.ACTIVE_UNIFORMS);\n    for (let i = 0; i < this._uniformCount; i++) {\n      const info = this.gl.getActiveUniform(this.handle, i);\n      const {name, isArray} = parseUniformName(info.name);\n      const location = gl.getUniformLocation(this.handle, name);\n      this._uniformSetters[name] = getUniformSetter(gl, location, info, isArray);\n    }\n    this._textureIndexCounter = 0;\n  }\n\n  // stub for shader chache, should reset uniforms to default valiues\n  reset() {}\n\n  // TO BE REMOVED in v7?\n\n  // Rretrieves information about active uniforms identifed by their indices (`uniformIndices`)\n  // https://\n  // developer.mozilla.org/en-US/docs/Web/API/WebGL2RenderingContext/getActiveUniforms\n  getActiveUniforms(uniformIndices, pname) {\n    return this.gl.getActiveUniforms(this.handle, uniformIndices, pname);\n  }\n\n  // Retrieves the index of a uniform block\n  getUniformBlockIndex(blockName) {\n    return this.gl.getUniformBlockIndex(this.handle, blockName);\n  }\n\n  // Retrieves information about an active uniform block (`blockIndex`)\n  // https://\n  // developer.mozilla.org/en-US/docs/Web/API/WebGL2RenderingContext/getActiveUniformBlockParameter\n  getActiveUniformBlockParameter(blockIndex, pname) {\n    return this.gl.getActiveUniformBlockParameter(this.handle, blockIndex, pname);\n  }\n\n  // Binds a uniform block (`blockIndex`) to a specific binding point (`blockBinding`)\n  uniformBlockBinding(blockIndex, blockBinding) {\n    this.gl.uniformBlockBinding(this.handle, blockIndex, blockBinding);\n  }\n}\n"],"file":"program.js"}