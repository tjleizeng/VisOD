{"version":3,"sources":["../../../src/io/browser-load.js"],"names":["requestFile","pathPrefix","setPathPrefix","prefix","loadFile","url","opts","loadImage","Image","URL","location","pathname","href","responseType","then","arraybuffer","blob","Blob","Uint8Array","createImageBitmap","Promise","resolve","reject","image","onload","onerror","Error","crossOrigin","src","error"],"mappings":"AAAA,SAAQA,WAAR,QAA0B,wBAA1B;AAEA,IAAIC,UAAU,GAAG,EAAjB;AAEA;;;;AAGA,OAAO,SAASC,aAAT,CAAuBC,MAAvB,EAA+B;AACpCF,EAAAA,UAAU,GAAGE,MAAb;AACD;AAED,OAAO,SAASC,QAAT,CAAkBC,GAAlB,EAAuBC,IAAvB,EAA6B;AAClC,MAAI,OAAOD,GAAP,KAAe,QAAf,IAA2B,CAACC,IAAhC,EAAsC;AACpC;AACAA,IAAAA,IAAI,GAAGD,GAAP;AACAA,IAAAA,GAAG,GAAGC,IAAI,CAACD,GAAX;AACD;;AACDC,EAAAA,IAAI,CAACD,GAAL,GAAWJ,UAAU,GAAGA,UAAU,GAAGI,GAAhB,GAAsBA,GAA3C;AACA,SAAOL,WAAW,CAACM,IAAD,CAAlB;AACD;AAED;;AAEA;;;;;;AAKA,OAAO,SAASC,SAAT,CAAmBF,GAAnB,EAAwBC,IAAxB,EAA8B;AACnCD,EAAAA,GAAG,GAAGJ,UAAU,GAAGA,UAAU,GAAGI,GAAhB,GAAsBA,GAAtC;;AAEA,MAAI,OAAOG,KAAP,KAAiB,WAArB,EAAkC;AAChC;AACA;AACA;AACAH,IAAAA,GAAG,GAAG,IAAII,GAAJ,CAAQJ,GAAR,EAAaK,QAAQ,CAACC,QAAtB,EAAgCC,IAAtC;AACA,WAAOZ,WAAW,CAAC;AAACK,MAAAA,GAAD;AAAMQ,MAAAA,YAAY,EAAE;AAApB,KAAD,CAAX,CAAgDC,IAAhD,CAAqDC,WAAW,IAAI;AACzE,YAAMC,IAAI,GAAG,IAAIC,IAAJ,CAAS,CAAC,IAAIC,UAAJ,CAAeH,WAAf,CAAD,CAAT,CAAb;AACA,aAAOI,iBAAiB,CAACH,IAAD,CAAxB;AACD,KAHM,CAAP;AAID;;AAED,SAAO,IAAII,OAAJ,CAAY,CAACC,OAAD,EAAUC,MAAV,KAAqB;AACtC,QAAI;AACF,YAAMC,KAAK,GAAG,IAAIf,KAAJ,EAAd;;AACAe,MAAAA,KAAK,CAACC,MAAN,GAAe,MAAMH,OAAO,CAACE,KAAD,CAA5B;;AACAA,MAAAA,KAAK,CAACE,OAAN,GAAgB,MAAMH,MAAM,CAAC,IAAII,KAAJ,CAAW,wBAAuBrB,GAAI,GAAtC,CAAD,CAA5B;;AACAkB,MAAAA,KAAK,CAACI,WAAN,GAAqBrB,IAAI,IAAIA,IAAI,CAACqB,WAAd,IAA8B,WAAlD;AACAJ,MAAAA,KAAK,CAACK,GAAN,GAAYvB,GAAZ;AACD,KAND,CAME,OAAOwB,KAAP,EAAc;AACdP,MAAAA,MAAM,CAACO,KAAD,CAAN;AACD;AACF,GAVM,CAAP;AAWD","sourcesContent":["import {requestFile} from './browser-request-file';\n\nlet pathPrefix = '';\n\n/*\n * Set a relative path prefix\n */\nexport function setPathPrefix(prefix) {\n  pathPrefix = prefix;\n}\n\nexport function loadFile(url, opts) {\n  if (typeof url !== 'string' && !opts) {\n    // TODO - warn for deprecated mode\n    opts = url;\n    url = opts.url;\n  }\n  opts.url = pathPrefix ? pathPrefix + url : url;\n  return requestFile(opts);\n}\n\n/* global Image, Blob, URL, createImageBitmap, location */\n\n/*\n * Loads images asynchronously\n * image.crossOrigin can be set via opts.crossOrigin, default to 'anonymous'\n * returns a promise tracking the load\n */\nexport function loadImage(url, opts) {\n  url = pathPrefix ? pathPrefix + url : url;\n\n  if (typeof Image === 'undefined') {\n    // In a web worker\n    // XMLHttpRequest throws invalid URL error if using relative path\n    // resolve url relative to original base\n    url = new URL(url, location.pathname).href;\n    return requestFile({url, responseType: 'arraybuffer'}).then(arraybuffer => {\n      const blob = new Blob([new Uint8Array(arraybuffer)]);\n      return createImageBitmap(blob);\n    });\n  }\n\n  return new Promise((resolve, reject) => {\n    try {\n      const image = new Image();\n      image.onload = () => resolve(image);\n      image.onerror = () => reject(new Error(`Could not load image ${url}.`));\n      image.crossOrigin = (opts && opts.crossOrigin) || 'anonymous';\n      image.src = url;\n    } catch (error) {\n      reject(error);\n    }\n  });\n}\n"],"file":"browser-load.js"}