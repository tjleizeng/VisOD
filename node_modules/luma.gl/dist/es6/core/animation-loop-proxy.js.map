{"version":3,"sources":["../../../src/core/animation-loop-proxy.js"],"names":["getPageLoadPromise","getCanvas","requestAnimationFrame","cancelAnimationFrame","log","assert","AnimationLoopProxy","createWorker","animationLoop","self","setProps","useDevicePixels","autoResizeDrawingBuffer","canvas","initializeCanvas","eventHandlers","Map","addEventListener","type","handler","postMessage","command","has","set","get","push","removeEventListener","handlers","splice","indexOf","dispatchEvent","event","forEach","evt","data","opts","start","stop","width","height","constructor","worker","onInitialize","onFinalize","props","Worker","_stopped","_animationFrameId","_startPromise","_onMessage","bind","_onEvent","_updateFrame","onmessage","then","_createAndTransferCanvas","devicePixelRatio","window","safeEvent","key","value","valueType","_resizeCanvasDrawingBuffer","screenCanvas","transferControlToOffscreen","error","offscreenCanvas","Object","assign","clientWidth","clientHeight"],"mappings":"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","sourcesContent":["/* global window, Worker */\nimport {getPageLoadPromise, getCanvas} from '../webgl-context';\nimport {requestAnimationFrame, cancelAnimationFrame} from '../webgl-utils';\nimport {log} from '../utils';\nimport assert from '../utils/assert';\n\nexport default class AnimationLoopProxy {\n  // Create the script for the rendering worker.\n  // @param opts {object} - options to construct an AnimationLoop instance\n  static createWorker(animationLoop) {\n    return self => {\n      animationLoop.setProps({\n        // Prevent the animation loop from trying to access DOM properties\n        useDevicePixels: false,\n        autoResizeDrawingBuffer: false\n      });\n\n      self.canvas = null;\n\n      function initializeCanvas(canvas) {\n        const eventHandlers = new Map();\n\n        canvas.addEventListener = (type, handler) => {\n          self.postMessage({command: 'addEventListener', type});\n          if (!eventHandlers.has(type)) {\n            eventHandlers.set(type, []);\n          }\n          eventHandlers.get(type).push(handler);\n        };\n        canvas.removeEventListener = (type, handler) => {\n          self.postMessage({command: 'removeEventListener', type});\n          const handlers = eventHandlers.get(type);\n          if (handlers) {\n            handlers.splice(handlers.indexOf(handler), 1);\n          }\n        };\n        canvas.dispatchEvent = (type, event) => {\n          const handlers = eventHandlers.get(type);\n          if (handlers) {\n            handlers.forEach(handler => handler(event));\n          }\n        };\n\n        self.canvas = canvas;\n      }\n\n      self.addEventListener('message', evt => {\n        switch (evt.data.command) {\n          case 'start':\n            initializeCanvas(evt.data.opts.canvas);\n            animationLoop.start(evt.data.opts);\n            break;\n\n          case 'stop':\n            animationLoop.stop();\n            break;\n\n          case 'resize':\n            self.canvas.width = evt.data.width;\n            self.canvas.height = evt.data.height;\n            break;\n\n          case 'event':\n            self.canvas.dispatchEvent(evt.data.type, evt.data.event);\n            break;\n\n          default:\n        }\n      });\n    };\n  }\n\n  /*\n   * @param {HTMLCanvasElement} canvas - if provided, width and height will be passed to context\n   */\n  constructor(worker, opts = {}) {\n    const {\n      onInitialize = () => {},\n      onFinalize = () => {},\n      useDevicePixels = true,\n      autoResizeDrawingBuffer = true\n    } = opts;\n\n    this.props = {\n      onInitialize,\n      onFinalize\n    };\n\n    this.setProps({\n      autoResizeDrawingBuffer,\n      useDevicePixels\n    });\n\n    // state\n    assert(worker instanceof Worker);\n    this.worker = worker;\n    this.canvas = null;\n    this.width = null;\n    this.height = null;\n\n    this._stopped = true;\n    this._animationFrameId = null;\n    this._startPromise = null;\n\n    // bind methods\n    this._onMessage = this._onMessage.bind(this);\n    this._onEvent = this._onEvent.bind(this);\n    this._updateFrame = this._updateFrame.bind(this);\n  }\n\n  setProps(props) {\n    if ('autoResizeDrawingBuffer' in props) {\n      this.autoResizeDrawingBuffer = props.autoResizeDrawingBuffer;\n    }\n    if ('useDevicePixels' in props) {\n      this.useDevicePixels = props.useDevicePixels;\n    }\n    return this;\n  }\n\n  /* Public methods */\n\n  // Starts a render loop if not already running\n  start(opts = {}) {\n    this._stopped = false;\n    // console.debug(`Starting ${this.constructor.name}`);\n    if (!this._animationFrameId) {\n      this.worker.onmessage = this._onMessage;\n\n      // Wait for start promise before rendering frame\n      this._startPromise = getPageLoadPromise()\n        .then(() => {\n          this._createAndTransferCanvas(opts);\n          return this.props.onInitialize(this);\n        })\n        .then(() => {\n          if (!this._stopped) {\n            this._animationFrameId = requestAnimationFrame(this._updateFrame);\n          }\n        });\n    }\n    return this;\n  }\n\n  // Stops a render loop if already running, finalizing\n  stop() {\n    if (this._animationFrameId) {\n      cancelAnimationFrame(this._animationFrameId);\n      this._animationFrameId = null;\n      this._stopped = true;\n      this.props.onFinalize(this);\n    }\n    this.worker.postMessage({command: 'stop'});\n    return this;\n  }\n\n  // PRIVATE METHODS\n\n  _onMessage(evt) {\n    switch (evt.data.command) {\n      case 'addEventListener':\n        this.canvas.addEventListener(evt.data.type, this._onEvent);\n        break;\n\n      case 'removeEventListener':\n        this.canvas.removeEventListener(evt.data.type, this._onEvent);\n        break;\n\n      default:\n    }\n  }\n\n  _onEvent(evt) {\n    const devicePixelRatio = this.useDevicePixels ? window.devicePixelRatio || 1 : 1;\n    const type = evt.type;\n\n    const safeEvent = {};\n    for (const key in evt) {\n      let value = evt[key];\n      const valueType = typeof value;\n      if (key === 'offsetX' || key === 'offsetY') {\n        value *= devicePixelRatio;\n      }\n      if (valueType === 'number' || valueType === 'boolean' || valueType === 'string') {\n        safeEvent[key] = value;\n      }\n    }\n\n    this.worker.postMessage({\n      command: 'event',\n      type,\n      event: safeEvent\n    });\n  }\n\n  _updateFrame() {\n    this._resizeCanvasDrawingBuffer();\n    this._animationFrameId = requestAnimationFrame(this._updateFrame);\n  }\n\n  _createAndTransferCanvas(opts) {\n    // Create a canvas on the main thread\n    const screenCanvas = getCanvas(opts);\n\n    // Create an offscreen canvas controlling the main canvas\n    if (!screenCanvas.transferControlToOffscreen) {\n      log.error('OffscreenCanvas is not available in your browser.')(); // eslint-disable-line\n    }\n    const offscreenCanvas = screenCanvas.transferControlToOffscreen();\n\n    // Transfer the offscreen canvas to the worker\n    this.worker.postMessage(\n      {\n        command: 'start',\n        opts: Object.assign({}, opts, {canvas: offscreenCanvas})\n      },\n      [offscreenCanvas]\n    );\n\n    // store the main canvas on the local thread\n    this.canvas = screenCanvas;\n  }\n\n  _resizeCanvasDrawingBuffer() {\n    if (this.autoResizeDrawingBuffer) {\n      const devicePixelRatio = this.useDevicePixels ? window.devicePixelRatio || 1 : 1;\n      const width = this.canvas.clientWidth * devicePixelRatio;\n      const height = this.canvas.clientHeight * devicePixelRatio;\n\n      if (this.width !== width || this.height !== height) {\n        this.width = width;\n        this.height = height;\n        this.worker.postMessage({\n          command: 'resize',\n          width,\n          height\n        });\n      }\n    }\n  }\n}\n"],"file":"animation-loop-proxy.js"}