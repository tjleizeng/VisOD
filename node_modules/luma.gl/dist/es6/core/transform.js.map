{"version":3,"sources":["../../../src/core/transform.js"],"names":["Model","Buffer","Framebuffer","Texture2D","TransformFeedback","combineInjects","_transform","transform","getPassthroughFS","typeToChannelCount","isWebGL2","assertWebGL2Context","getShaderVersion","cloneTextureFrom","assert","log","isObjectEmpty","updateForTextures","getSizeUniforms","SRC_TEX_PARAMETER_OVERRIDES","FS_OUTPUT_VARIABLE","Transform","isSupported","gl","constructor","props","model","elementCount","currentIndex","sourceBuffers","Array","sourceTextures","feedbackBuffers","targetTextures","transformFeedbacks","framebuffers","_createdBuffers","elementIDBuffer","_targetRefTexName","_initialize","Object","seal","delete","name","getBuffer","varyingName","bufferOrParams","buffer","_getTargetTexture","attachments","getData","packed","targetTextureVarying","pixels","readPixels","ArrayType","channelCount","targetTextureType","packedPixels","length","packCount","i","j","getFramebuffer","_getInputs","uniforms","current","attributes","assign","hasSourceTextures","transform_elementID","sampler","samplerTextureMap","textureName","_setSourceTextureParameters","sizeUniforms","sourceTextureMap","targetTexture","run","opts","parameters","clearRenderTarget","framebuffer","discard","renderingToTexture","viewport","width","height","clear","COLOR_BUFFER_BIT","setAttributes","transformFeedback","swapBuffers","deprecated","swap","feedbackMap","_swapTexture","update","_setElementCount","bufferName","_createFeedbackBuffers","setBuffers","_setupSwapBuffers","_sourceTextures","_targetTexture","_updateTargetTexture","_setupSwapTextures","index","setParameters","_updateElementIDBuffer","setVertexCount","texture","_buildTargetTexture","resizeAttachments","resize","_validateProps","varyings","_targetTextureVarying","varyingsArray","isArray","values","_setupBuffers","_setupTextures","_buildModel","id","drawMode","destinationBuffers","sourceDestinationMap","vs","keys","textureOrAttribute","refTexture","pixelStore","sourceBufferName","feedbackBufferName","sourceBuffer","bytes","type","usage","accessor","_createNewBuffer","next","srcName","dstName","_getShaders","fs","modules","inject","vertexCount","_setupTransformFeedback","_setupFramebuffers","program","buffers","elementIds","Float32Array","forEach","_","array","data","size","setData","_processVertexShader","combinedInject","version","input","inputType","output","concat"],"mappings":"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","sourcesContent":["import GL from '../constants';\nimport Model from './model';\nimport Buffer from '../webgl/buffer';\nimport Framebuffer from '../webgl/framebuffer';\nimport Texture2D from '../webgl/texture-2d';\nimport TransformFeedback from '../webgl/transform-feedback';\nimport {combineInjects} from '../shadertools/src/lib/inject-shader';\nimport {_transform as transform, getPassthroughFS, typeToChannelCount} from '../shadertools/src';\nimport {isWebGL2, assertWebGL2Context, getShaderVersion, cloneTextureFrom} from '../webgl-utils';\nimport assert from '../utils/assert';\nimport {log, isObjectEmpty} from '../utils';\nimport {updateForTextures, getSizeUniforms} from './transform-shader-utils';\n\n// Texture parameters needed so sample can precisely pick pixel for given element id.\nconst SRC_TEX_PARAMETER_OVERRIDES = {\n  [GL.TEXTURE_MIN_FILTER]: GL.NEAREST,\n  [GL.TEXTURE_MAG_FILTER]: GL.NEAREST,\n  [GL.TEXTURE_WRAP_S]: GL.CLAMP_TO_EDGE,\n  [GL.TEXTURE_WRAP_T]: GL.CLAMP_TO_EDGE\n};\nconst FS_OUTPUT_VARIABLE = 'transform_output';\n\nexport default class Transform {\n  static isSupported(gl) {\n    // For now WebGL2 only\n    return isWebGL2(gl);\n  }\n\n  constructor(gl, props = {}) {\n    assertWebGL2Context(gl);\n\n    this.gl = gl;\n    this.model = null;\n    this.elementCount = 0;\n    this.currentIndex = 0;\n\n    // Source and destination resources are stored in two element Arrays for easier swapping when\n    // 'feedbackMap' is provided. If not only the first array elment is used.\n\n    // Each array element is an object with attribute name as Key and Buffer object as value.\n    this.sourceBuffers = new Array(2);\n\n    // Each array element is an object with attribute name as Key and Texture object as value.\n    this.sourceTextures = new Array(2);\n\n    // Each array element is an object with varying name as Key and Buffer object as value.\n    this.feedbackBuffers = new Array(2);\n\n    // Each array element is a Texture object used as color attachment for framebuffer.\n    this.targetTextures = new Array(2);\n\n    // Each array element is a TransformFeedback object.\n    this.transformFeedbacks = new Array(2);\n\n    // Each array element is a Framebuffer object.\n    this.framebuffers = new Array(2);\n    this._createdBuffers = {};\n    this.elementIDBuffer = null;\n\n    // reference source texture name for target texture\n    this._targetRefTexName = null;\n\n    this._initialize(props);\n    Object.seal(this);\n  }\n\n  // Delete owned resources.\n  delete() {\n    for (const name in this._createdBuffers) {\n      this._createdBuffers[name].delete();\n    }\n    this.model.delete();\n  }\n\n  // Return Buffer object for given varying name.\n  getBuffer(varyingName = null) {\n    const bufferOrParams = varyingName\n      ? this.feedbackBuffers[this.currentIndex][varyingName]\n      : null;\n    if (!bufferOrParams) {\n      return null;\n    }\n    return bufferOrParams instanceof Buffer ? bufferOrParams : bufferOrParams.buffer;\n  }\n\n  // Returns the color attachment textuer from current framebuffer target\n  _getTargetTexture() {\n    if (this.framebuffers[this.currentIndex]) {\n      return this.framebuffers[this.currentIndex].attachments[GL.COLOR_ATTACHMENT0];\n    }\n    return null;\n  }\n\n  // Return data either from Buffer or from Texture\n  getData({varyingName = null, packed = false} = {}) {\n    // Either there should be specified feedbackBuffer or we should be rendering to a texture\n    const buffer = this.getBuffer(varyingName);\n    if (buffer) {\n      return buffer.getData();\n    }\n\n    // When varyingName is not provided return data from framebuffer object.\n    assert(!varyingName || varyingName === this.targetTextureVarying);\n\n    const pixels = this.framebuffers[this.currentIndex].readPixels();\n\n    if (!packed) {\n      return pixels;\n    }\n\n    // readPixels returns 4 elements for each pixel, pack the elements when requested\n    const ArrayType = pixels.constructor;\n    const channelCount = typeToChannelCount(this.targetTextureType);\n    const packedPixels = new ArrayType((pixels.length * channelCount) / 4);\n    let packCount = 0;\n    for (let i = 0; i < pixels.length; i += 4) {\n      for (let j = 0; j < channelCount; j++) {\n        packedPixels[packCount++] = pixels[i + j];\n      }\n    }\n    return packedPixels;\n  }\n\n  // returns current framebuffer object that is being used.\n  getFramebuffer() {\n    return this.framebuffers[this.currentIndex];\n  }\n\n  _getInputs() {\n    const uniforms = {};\n    const current = this.currentIndex;\n\n    // Buffer inputs\n    const attributes = Object.assign({}, this.sourceBuffers[current]);\n\n    // Texture inputs\n    if (this.hasSourceTextures || this.targetTextureVarying) {\n      // TODO: add option not generate position using element id.\n      attributes.transform_elementID = this.elementIDBuffer;\n      for (const sampler in this.samplerTextureMap) {\n        const textureName = this.samplerTextureMap[sampler];\n        uniforms[sampler] = this.sourceTextures[current][textureName];\n      }\n      // Also update size uniforms , add samplerSizeMap\n      this._setSourceTextureParameters();\n\n      // get texture size uniforms\n      const sizeUniforms = getSizeUniforms({\n        sourceTextureMap: this.sourceTextures[current],\n        targetTextureVarying: this.targetTextureVarying,\n        targetTexture: this.targetTextures[current]\n      });\n      Object.assign(uniforms, sizeUniforms);\n    }\n    return {attributes, uniforms};\n  }\n\n  // Run one transform feedback loop.\n  run(opts = {}) {\n    const {attributes, uniforms} = this._getInputs();\n    Object.assign(uniforms, opts.uniforms);\n    const parameters = Object.assign({}, opts.parameters);\n    const {clearRenderTarget = true} = opts;\n    let framebuffer = null;\n    let discard = true;\n\n    if (this.renderingToTexture) {\n      discard = false;\n      framebuffer = this.framebuffers[this.currentIndex];\n      assert(framebuffer);\n      parameters.viewport = [0, 0, framebuffer.width, framebuffer.height];\n      if (clearRenderTarget) {\n        this.gl.clear(this.gl.COLOR_BUFFER_BIT);\n      }\n    }\n    this.model.setAttributes(attributes);\n    this.model.transform(\n      Object.assign({}, opts, {\n        transformFeedback: this.transformFeedbacks[this.currentIndex],\n        uniforms,\n        discard,\n        framebuffer,\n        parameters\n      })\n    );\n  }\n\n  // Swap source and destination buffers and textures.\n  swapBuffers() {\n    log.deprecated('swapBuffers()', 'swap()');\n    this.swap();\n  }\n\n  // Swap source and destination buffers and textures.\n  swap() {\n    assert(this.feedbackMap || this._swapTexture);\n    this.currentIndex = (this.currentIndex + 1) % 2;\n  }\n\n  // Update some or all buffer bindings.\n  update(opts = {}) {\n    if (opts.elementCount) {\n      this._setElementCount(opts.elementCount);\n    }\n\n    const {sourceBuffers = null, feedbackBuffers = null} = opts;\n    const {currentIndex} = this;\n    if (sourceBuffers || feedbackBuffers) {\n      for (const bufferName in feedbackBuffers) {\n        assert(\n          feedbackBuffers[bufferName] instanceof Buffer ||\n            feedbackBuffers[bufferName].buffer instanceof Buffer\n        );\n      }\n\n      Object.assign(this.sourceBuffers[currentIndex], sourceBuffers);\n      Object.assign(this.feedbackBuffers[currentIndex], feedbackBuffers);\n      this._createFeedbackBuffers({feedbackBuffers});\n      if (this.transformFeedbacks[currentIndex]) {\n        this.transformFeedbacks[currentIndex].setBuffers(this.feedbackBuffers[currentIndex]);\n      }\n\n      // Buffers have changed, need to re-setup swap buffers.\n      this._setupSwapBuffers();\n    }\n\n    const {_sourceTextures, _targetTexture} = opts;\n    if (_sourceTextures || _targetTexture) {\n      Object.assign(this.sourceTextures[currentIndex], _sourceTextures);\n      // if _targetTexture specified use it, other wise rebuild traget texture using\n      // '_targetRefTexName' as coresponding source texture may have been update.\n      this._updateTargetTexture(_targetTexture || this._targetRefTexName, currentIndex);\n      // textures have changed, need to re-setup swap textures.\n      this._setupSwapTextures();\n    }\n  }\n\n  // set texture filtering parameters on source textures.\n  _setSourceTextureParameters() {\n    const index = this.currentIndex;\n    for (const name in this.sourceTextures[index]) {\n      this.sourceTextures[index][name].setParameters(SRC_TEX_PARAMETER_OVERRIDES);\n    }\n  }\n\n  // set element count and updated elementID buffer if needed.\n  _setElementCount(elementCount) {\n    if (this.elementCount === elementCount) {\n      return;\n    }\n    if (this.elementCount < elementCount) {\n      this._updateElementIDBuffer(elementCount);\n    }\n    this.model.setVertexCount(elementCount);\n    this.elementCount = elementCount;\n  }\n\n  // sets target texture for rendering by updating framebuffer\n  _updateTargetTexture(texture, index) {\n    const targetTexture = this._buildTargetTexture(texture);\n    if (targetTexture) {\n      this.targetTextures[index] = targetTexture;\n      if (this.framebuffers[index]) {\n        // First update texture without re-sizing attachments\n        this.framebuffers[index].update({\n          attachments: {[GL.COLOR_ATTACHMENT0]: this.targetTextures[index]},\n          resizeAttachments: false\n        });\n        // Resize to new taget texture size\n        this.framebuffers[index].resize({\n          width: targetTexture.width,\n          height: targetTexture.height\n        });\n      }\n    }\n  }\n\n  // Private\n\n  _initialize(props = {}) {\n    const {feedbackBuffers, feedbackMap} = this._validateProps(props);\n    const {sourceBuffers, varyings, _targetTexture, _targetTextureVarying, _swapTexture} = props;\n\n    let varyingsArray = varyings;\n    if (feedbackMap && !Array.isArray(varyings)) {\n      varyingsArray = Object.values(feedbackMap);\n    }\n    this.varyingsArray = varyingsArray;\n    this.feedbackMap = feedbackMap;\n    this._swapTexture = _swapTexture;\n    if (_targetTexture) {\n      this.targetTextureVarying = _targetTextureVarying;\n      this.renderingToTexture = true;\n      assert(this.targetTextureVarying);\n    }\n\n    this._setupBuffers({sourceBuffers, feedbackBuffers});\n    this._setupTextures(props);\n    this._setupSwapBuffers();\n    this._setupSwapTextures();\n    this._buildModel(\n      Object.assign({}, props, {\n        id: props.id || 'transform-model',\n        drawMode: props.drawMode || GL.POINTS,\n        varyings: varyingsArray\n      })\n    );\n  }\n\n  // assert on required parameters\n  /* eslint-disable complexity */\n  _validateProps(props) {\n    let {feedbackBuffers, feedbackMap} = props;\n\n    // backward compitability\n    const {destinationBuffers, sourceDestinationMap} = props;\n    if (destinationBuffers) {\n      log.deprecated('destinationBuffers', 'feedbackBuffers')();\n      feedbackBuffers = feedbackBuffers || destinationBuffers;\n    }\n    if (sourceDestinationMap) {\n      log.deprecated('sourceDestinationMap', 'feedbackMap')();\n      feedbackMap = feedbackMap || sourceDestinationMap;\n    }\n\n    // assert on required parameters\n    const {vs, elementCount, varyings} = props;\n    const {_sourceTextures, _targetTexture, _targetTextureVarying, _swapTexture} = props;\n\n    assert(\n      vs &&\n        // destinations are provided\n        (varyings || feedbackMap || _targetTexture) &&\n        // when only writting to textures auto-duduce from texture dimenstions\n        elementCount\n    );\n\n    for (const bufferName in feedbackBuffers || {}) {\n      assert(\n        feedbackBuffers[bufferName] instanceof Buffer ||\n          feedbackBuffers[bufferName].buffer instanceof Buffer\n      );\n    }\n    for (const textureName in _sourceTextures || {}) {\n      assert(_sourceTextures[textureName] instanceof Texture2D);\n    }\n\n    // If rendering to texture , varying is provided\n    assert(!_targetTexture || _targetTextureVarying);\n\n    // swap texture must be a valid source texture\n    assert(!_swapTexture || _sourceTextures[_swapTexture]);\n\n    return {feedbackBuffers, feedbackMap};\n  }\n  /* eslint-enable complexity */\n\n  // setup source and destination buffers\n  _setupBuffers({sourceBuffers = null, feedbackBuffers = null}) {\n    this.sourceBuffers[0] = Object.assign({}, sourceBuffers);\n    this.feedbackBuffers[0] = Object.assign({}, feedbackBuffers);\n    this._createFeedbackBuffers({feedbackBuffers});\n    this.sourceBuffers[1] = {};\n    this.feedbackBuffers[1] = {};\n  }\n\n  // setup source and destination textures\n  _setupTextures(props = {}) {\n    const {_sourceTextures, _targetTexture} = props;\n    // Setup source texture\n    this.sourceTextures[0] = Object.assign({}, _sourceTextures);\n    this.sourceTextures[1] = {};\n    this.hasSourceTextures = Object.keys(this.sourceTextures[0]).length > 0;\n\n    if (this.targetTextureVarying) {\n      const texture = this._buildTargetTexture(_targetTexture);\n      // Either a texture or refAttribute must be provided\n      assert(texture);\n      this.targetTextures[0] = texture;\n      this.targetTextures[1] = null;\n    }\n  }\n\n  // Builds target texture using source reference or provided texture object.\n  _buildTargetTexture(textureOrAttribute) {\n    if (textureOrAttribute instanceof Texture2D) {\n      return textureOrAttribute;\n    }\n    const refTexture = this.sourceTextures[0][textureOrAttribute];\n    if (!refTexture) {\n      return null;\n    }\n    // save reference texture name, when corresponding source texture is updated\n    // we also update target texture.\n    this._targetRefTexName = textureOrAttribute;\n    return cloneTextureFrom(refTexture, {\n      parameters: {\n        [GL.TEXTURE_MIN_FILTER]: GL.NEAREST,\n        [GL.TEXTURE_MAG_FILTER]: GL.NEAREST,\n        [GL.TEXTURE_WRAP_S]: GL.CLAMP_TO_EDGE,\n        [GL.TEXTURE_WRAP_T]: GL.CLAMP_TO_EDGE\n      },\n      pixelStore: {\n        [GL.UNPACK_FLIP_Y_WEBGL]: false\n      }\n    });\n  }\n\n  // auto create any feedback buffers\n  _createFeedbackBuffers({feedbackBuffers}) {\n    if (!this.feedbackMap) {\n      // feedbackMap required to auto create buffers.\n      return;\n    }\n    const current = this.currentIndex;\n    for (const sourceBufferName in this.feedbackMap) {\n      const feedbackBufferName = this.feedbackMap[sourceBufferName];\n      if (\n        feedbackBufferName !== this.targetTextureVarying &&\n        (!feedbackBuffers || !feedbackBuffers[feedbackBufferName])\n      ) {\n        // Create new buffer with same layout and settings as source buffer\n        const sourceBuffer = this.sourceBuffers[current][sourceBufferName];\n        const {bytes, type, usage, accessor} = sourceBuffer;\n        const buffer = new Buffer(this.gl, {bytes, type, usage, accessor});\n\n        if (this._createdBuffers[feedbackBufferName]) {\n          this._createdBuffers[feedbackBufferName].delete();\n        }\n        this._createdBuffers[feedbackBufferName] = buffer;\n        this.feedbackBuffers[current][feedbackBufferName] = buffer;\n      }\n    }\n  }\n\n  // Create a buffer and add to list of buffers to be deleted.\n  _createNewBuffer(name, opts) {\n    const buffer = new Buffer(this.gl, opts);\n    if (this._createdBuffers[name]) {\n      this._createdBuffers[name].delete();\n      this._createdBuffers[name] = buffer;\n    }\n    return buffer;\n  }\n\n  // setup buffers for swapping.\n  // Second set of source and feedback objects are setup to point\n  // to corresponding feedback and source buffers.\n  _setupSwapBuffers() {\n    if (!this.feedbackMap) {\n      // feedbackMap required set up swap buffers.\n      return;\n    }\n    const current = this.currentIndex;\n    const next = (current + 1) % 2;\n\n    // Copy all buffers/textures so un-mapped sources will remain same\n    Object.assign(this.sourceBuffers[next], this.sourceBuffers[current]);\n    Object.assign(this.feedbackBuffers[next], this.feedbackBuffers[current]);\n\n    for (const srcName in this.feedbackMap) {\n      const dstName = this.feedbackMap[srcName];\n      // TODO: add textureMap and remove this if loop\n      if (dstName !== this.targetTextureVarying) {\n        this.sourceBuffers[next][srcName] = this.feedbackBuffers[current][dstName];\n        this.feedbackBuffers[next][dstName] = this.sourceBuffers[current][srcName];\n\n        // make sure the new destination buffer is a Buffer object\n        assert(this.feedbackBuffers[next][dstName] instanceof Buffer);\n      }\n    }\n\n    // When triggered by `update()` TranformFeedback objects are already set up,\n    // if so update buffers\n    if (this.transformFeedbacks[next]) {\n      this.transformFeedbacks[next].setBuffers(this.feedbackBuffers[next]);\n    }\n\n    // TODO: add swap support for targetTexture and framebuffers\n  }\n\n  // setup textures for swapping.\n  _setupSwapTextures() {\n    if (!this._swapTexture || !this.targetTextureVarying) {\n      // Must be rendering to a texture and _swapTexture is provided\n      return;\n    }\n    const current = this.currentIndex;\n    const next = (current + 1) % 2;\n\n    Object.assign(this.sourceTextures[next], this.sourceTextures[current]);\n\n    this.sourceTextures[next][this._swapTexture] = this.targetTextures[current];\n\n    this._updateTargetTexture(this.sourceTextures[current][this._swapTexture], next);\n  }\n\n  // build Model and TransformFeedback objects\n  _buildModel(props = {}) {\n    const {vs, fs, modules, uniforms, inject, samplerTextureMap} = this._getShaders(props);\n    this.model = new Model(\n      this.gl,\n      Object.assign({}, props, {\n        vs,\n        fs,\n        vertexCount: props.elementCount,\n        modules,\n        uniforms,\n        inject\n      })\n    );\n    this.samplerTextureMap = samplerTextureMap;\n\n    // setup TF to capture varyings.\n    this._setupTransformFeedback();\n\n    // setup Framebuffer object for rendering to Texture.\n    this._setupFramebuffers();\n\n    // create buffer to access source texture pixesl.\n    this._setElementCount(props.elementCount);\n  }\n\n  // setup TransformFeedback objects to capture the results\n  _setupTransformFeedback() {\n    if (isObjectEmpty(this.feedbackBuffers[0])) {\n      return;\n    }\n    this.transformFeedbacks[0] = new TransformFeedback(this.gl, {\n      program: this.model.program,\n      buffers: this.feedbackBuffers[0]\n    });\n\n    // If buffers are swappable setup second transform feedback object.\n    if (this.feedbackMap) {\n      this.transformFeedbacks[1] = new TransformFeedback(this.gl, {\n        program: this.model.program,\n        buffers: this.feedbackBuffers[1]\n      });\n    }\n  }\n\n  // setup framebuffers with texture attachments, to which results are rendered\n  _setupFramebuffers() {\n    if (!this.renderingToTexture) {\n      return;\n    }\n\n    let {width, height} = this.targetTextures[0];\n    this.framebuffers[0] = new Framebuffer(this.gl, {\n      id: `${this.id || 'transform'}-framebuffer-0`,\n      width,\n      height,\n      attachments: {\n        [GL.COLOR_ATTACHMENT0]: this.targetTextures[0]\n      }\n    });\n\n    if (this._swapTexture) {\n      ({width, height} = this.targetTextures[1]);\n\n      this.framebuffers[1] = new Framebuffer(this.gl, {\n        id: `${this.id || 'transform'}-framebuffer-1`,\n        width,\n        height,\n        attachments: {\n          [GL.COLOR_ATTACHMENT0]: this.targetTextures[1]\n        }\n      });\n    }\n  }\n\n  // create/update buffer to access source texture's individual pixels.\n  _updateElementIDBuffer(elementCount) {\n    if (!this.hasSourceTextures && !this.targetTextureVarying) {\n      return;\n    }\n    // NOTE: using float so this will work with GLSL 1.0 shaders.\n    const elementIds = new Float32Array(elementCount);\n    elementIds.forEach((_, index, array) => {\n      array[index] = index;\n    });\n    if (!this.elementIDBuffer) {\n      this.elementIDBuffer = new Buffer(this.gl, {data: elementIds, size: 1});\n    } else {\n      this.elementIDBuffer.setData({data: elementIds});\n    }\n  }\n\n  // build and return shader releated parameters\n  _getShaders(props = {}) {\n    const {vs, uniforms, targetTextureType, inject, samplerTextureMap} = this._processVertexShader(\n      props.vs\n    );\n    const combinedInject = combineInjects([props.inject || {}, inject]);\n    this.targetTextureType = targetTextureType;\n    const fs = getPassthroughFS({\n      version: getShaderVersion(vs),\n      input: this.targetTextureVarying,\n      inputType: targetTextureType,\n      output: FS_OUTPUT_VARIABLE\n    });\n    const modules =\n      this.hasSourceTextures || this.targetTextureVarying\n        ? [transform].concat(props.modules || [])\n        : props.modules;\n    return {vs, fs, modules, uniforms, inject: combinedInject, samplerTextureMap};\n  }\n\n  // scan and update vertex shader for texture atrributes.\n  _processVertexShader(vs) {\n    return updateForTextures({\n      vs,\n      sourceTextureMap: this.sourceTextures[this.currentIndex],\n      targetTextureVarying: this.targetTextureVarying,\n      targetTexture: this.targetTextures[this.currentIndex]\n    });\n  }\n}\n"],"file":"transform.js"}