{"version":3,"sources":["../../../src/path-layer/path-layer.js"],"names":["DEFAULT_COLOR","defaultProps","widthScale","type","min","value","widthMinPixels","widthMaxPixels","Number","MAX_SAFE_INTEGER","rounded","miterLimit","fp64","dashJustified","getPath","object","path","getColor","getWidth","getDashArray","ATTRIBUTE_TRANSITION","enter","chunk","length","subarray","PathLayer","use64bitProjection","vs","vs64","fs","modules","noAlloc","attributeManager","getAttributeManager","addInstanced","instanceStartPositions","size","transition","accessor","update","calculateStartPositions","instanceEndPositions","calculateEndPositions","instanceStartEndPositions64xyLow","calculateInstanceStartEndPositions64xyLow","instanceLeftDeltas","calculateLeftDeltas","instanceRightDeltas","calculateRightDeltas","instanceStrokeWidths","calculateStrokeWidths","defaultValue","instanceDashArrays","calculateDashArrays","instanceColors","GL","UNSIGNED_BYTE","calculateColors","instancePickingColors","calculatePickingColors","setState","pathTesselator","PathTesselator","oldProps","props","changeFlags","geometryChanged","dataChanged","updateTriggersChanged","all","state","updateGeometry","data","getGeometry","positionFormat","use64bitPositions","numInstances","instanceCount","invalidateAll","gl","context","model","delete","_getModel","uniforms","render","Object","assign","jointType","alignMode","SEGMENT_INDICES","SEGMENT_POSITIONS","Model","getShaders","id","geometry","Geometry","drawMode","TRIANGLES","attributes","indices","Uint16Array","positions","Float32Array","isInstanced","shaderCache","attribute","bufferLayout","get","isFP64","constant","pickingColor","index","encodePickingColor","color","pickedPathIndex","decodePickingColor","numVertices","startInstanceIndex","pathIndex","endInstanceIndex","fill","Layer","layerName"],"mappings":"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","sourcesContent":["// Copyright (c) 2015 - 2017 Uber Technologies, Inc.\n//\n// Permission is hereby granted, free of charge, to any person obtaining a copy\n// of this software and associated documentation files (the \"Software\"), to deal\n// in the Software without restriction, including without limitation the rights\n// to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n// copies of the Software, and to permit persons to whom the Software is\n// furnished to do so, subject to the following conditions:\n//\n// The above copyright notice and this permission notice shall be included in\n// all copies or substantial portions of the Software.\n//\n// THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\n// THE SOFTWARE.\n\nimport {Layer} from '@deck.gl/core';\nimport GL from 'luma.gl/constants';\nimport {Model, Geometry} from 'luma.gl';\n\nimport PathTesselator from './path-tesselator';\n\nimport vs from './path-layer-vertex.glsl';\nimport vs64 from './path-layer-vertex-64.glsl';\nimport fs from './path-layer-fragment.glsl';\n\nconst DEFAULT_COLOR = [0, 0, 0, 255];\n\nconst defaultProps = {\n  widthScale: {type: 'number', min: 0, value: 1}, // stroke width in meters\n  widthMinPixels: {type: 'number', min: 0, value: 0}, //  min stroke width in pixels\n  widthMaxPixels: {type: 'number', min: 0, value: Number.MAX_SAFE_INTEGER}, // max stroke width in pixels\n  rounded: false,\n  miterLimit: {type: 'number', min: 0, value: 4},\n  fp64: false,\n  dashJustified: false,\n\n  getPath: {type: 'accessor', value: object => object.path},\n  getColor: {type: 'accessor', value: DEFAULT_COLOR},\n  getWidth: {type: 'accessor', value: 1},\n  getDashArray: {type: 'accessor', value: [0, 0]}\n};\n\nconst ATTRIBUTE_TRANSITION = {\n  enter: (value, chunk) => {\n    return chunk.length ? chunk.subarray(chunk.length - value.length) : value;\n  }\n};\n\nexport default class PathLayer extends Layer {\n  getShaders() {\n    return this.use64bitProjection()\n      ? {vs: vs64, fs, modules: ['project64', 'picking']}\n      : {vs, fs, modules: ['picking']}; // 'project' module added by default.\n  }\n\n  initializeState() {\n    const noAlloc = true;\n    const attributeManager = this.getAttributeManager();\n    /* eslint-disable max-len */\n    attributeManager.addInstanced({\n      instanceStartPositions: {\n        size: 3,\n        transition: ATTRIBUTE_TRANSITION,\n        accessor: 'getPath',\n        update: this.calculateStartPositions,\n        noAlloc\n      },\n      instanceEndPositions: {\n        size: 3,\n        transition: ATTRIBUTE_TRANSITION,\n        accessor: 'getPath',\n        update: this.calculateEndPositions,\n        noAlloc\n      },\n      instanceStartEndPositions64xyLow: {\n        size: 4,\n        update: this.calculateInstanceStartEndPositions64xyLow,\n        noAlloc\n      },\n      instanceLeftDeltas: {size: 3, update: this.calculateLeftDeltas, noAlloc},\n      instanceRightDeltas: {size: 3, update: this.calculateRightDeltas, noAlloc},\n      instanceStrokeWidths: {\n        size: 1,\n        accessor: 'getWidth',\n        transition: ATTRIBUTE_TRANSITION,\n        update: this.calculateStrokeWidths,\n        defaultValue: 1\n      },\n      instanceDashArrays: {size: 2, accessor: 'getDashArray', update: this.calculateDashArrays},\n      instanceColors: {\n        size: 4,\n        type: GL.UNSIGNED_BYTE,\n        accessor: 'getColor',\n        transition: ATTRIBUTE_TRANSITION,\n        update: this.calculateColors,\n        defaultValue: DEFAULT_COLOR\n      },\n      instancePickingColors: {size: 3, type: GL.UNSIGNED_BYTE, update: this.calculatePickingColors}\n    });\n    /* eslint-enable max-len */\n\n    this.setState({\n      pathTesselator: new PathTesselator({})\n    });\n  }\n\n  updateState({oldProps, props, changeFlags}) {\n    super.updateState({props, oldProps, changeFlags});\n\n    const attributeManager = this.getAttributeManager();\n\n    const geometryChanged =\n      changeFlags.dataChanged ||\n      props.fp64 !== oldProps.fp64 ||\n      (changeFlags.updateTriggersChanged &&\n        (changeFlags.updateTriggersChanged.all || changeFlags.updateTriggersChanged.getPath));\n\n    if (geometryChanged) {\n      this.state.pathTesselator.updateGeometry({\n        data: props.data,\n        getGeometry: props.getPath,\n        positionFormat: props.positionFormat,\n        fp64: this.use64bitPositions()\n      });\n      this.setState({\n        numInstances: this.state.pathTesselator.instanceCount\n      });\n      attributeManager.invalidateAll();\n    }\n\n    if (props.fp64 !== oldProps.fp64) {\n      const {gl} = this.context;\n      if (this.state.model) {\n        this.state.model.delete();\n      }\n      this.setState({model: this._getModel(gl)});\n      attributeManager.invalidateAll();\n    }\n  }\n\n  draw({uniforms}) {\n    const {\n      rounded,\n      miterLimit,\n      widthScale,\n      widthMinPixels,\n      widthMaxPixels,\n      dashJustified\n    } = this.props;\n\n    this.state.model.render(\n      Object.assign({}, uniforms, {\n        jointType: Number(rounded),\n        alignMode: Number(dashJustified),\n        widthScale,\n        miterLimit,\n        widthMinPixels,\n        widthMaxPixels\n      })\n    );\n  }\n\n  _getModel(gl) {\n    /*\n     *       _\n     *        \"-_ 1                   3                       5\n     *     _     \"o---------------------o-------------------_-o\n     *       -   / \"\"--..__              '.             _.-' /\n     *   _     \"@- - - - - \"\"--..__- - - - x - - - -_.@'    /\n     *    \"-_  /                   \"\"--..__ '.  _,-` :     /\n     *       \"o----------------------------\"\"-o'    :     /\n     *      0,2                            4 / '.  :     /\n     *                                      /   '.:     /\n     *                                     /     :'.   /\n     *                                    /     :  ', /\n     *                                   /     :     o\n     */\n\n    const SEGMENT_INDICES = [\n      // start corner\n      0,\n      2,\n      1,\n      // body\n      1,\n      2,\n      4,\n      1,\n      4,\n      3,\n      // end corner\n      3,\n      4,\n      5\n    ];\n\n    // [0] position on segment - 0: start, 1: end\n    // [1] side of path - -1: left, 0: center, 1: right\n    // [2] role - 0: offset point 1: joint point\n    const SEGMENT_POSITIONS = [\n      // bevel start corner\n      0,\n      0,\n      1,\n      // start inner corner\n      0,\n      -1,\n      0,\n      // start outer corner\n      0,\n      1,\n      0,\n      // end inner corner\n      1,\n      -1,\n      0,\n      // end outer corner\n      1,\n      1,\n      0,\n      // bevel end corner\n      1,\n      0,\n      1\n    ];\n\n    return new Model(\n      gl,\n      Object.assign({}, this.getShaders(), {\n        id: this.props.id,\n        geometry: new Geometry({\n          drawMode: GL.TRIANGLES,\n          attributes: {\n            indices: new Uint16Array(SEGMENT_INDICES),\n            positions: new Float32Array(SEGMENT_POSITIONS)\n          }\n        }),\n        isInstanced: true,\n        shaderCache: this.context.shaderCache\n      })\n    );\n  }\n\n  calculateStartPositions(attribute) {\n    const {pathTesselator} = this.state;\n\n    attribute.bufferLayout = pathTesselator.bufferLayout;\n    attribute.value = pathTesselator.get('startPositions');\n  }\n\n  calculateEndPositions(attribute) {\n    const {pathTesselator} = this.state;\n\n    attribute.bufferLayout = pathTesselator.bufferLayout;\n    attribute.value = pathTesselator.get('endPositions');\n  }\n\n  calculateInstanceStartEndPositions64xyLow(attribute) {\n    const isFP64 = this.use64bitPositions();\n    attribute.constant = !isFP64;\n\n    if (isFP64) {\n      attribute.value = this.state.pathTesselator.get('startEndPositions64XyLow');\n    } else {\n      attribute.value = new Float32Array(4);\n    }\n  }\n\n  calculateLeftDeltas(attribute) {\n    const {pathTesselator} = this.state;\n    attribute.value = pathTesselator.get('leftDeltas');\n  }\n\n  calculateRightDeltas(attribute) {\n    const {pathTesselator} = this.state;\n    attribute.value = pathTesselator.get('rightDeltas');\n  }\n\n  calculateStrokeWidths(attribute) {\n    const {getWidth} = this.props;\n    const {pathTesselator} = this.state;\n\n    attribute.bufferLayout = pathTesselator.bufferLayout;\n    attribute.value = pathTesselator.get('strokeWidths', attribute.value, getWidth);\n  }\n\n  calculateDashArrays(attribute) {\n    const {getDashArray} = this.props;\n    const {pathTesselator} = this.state;\n\n    attribute.value = pathTesselator.get('dashArrays', attribute.value, getDashArray);\n  }\n\n  calculateColors(attribute) {\n    const {getColor} = this.props;\n    const {pathTesselator} = this.state;\n\n    attribute.bufferLayout = pathTesselator.bufferLayout;\n    attribute.value = pathTesselator.get('colors', attribute.value, getColor);\n  }\n\n  // Override the default picking colors calculation\n  calculatePickingColors(attribute) {\n    const {pathTesselator} = this.state;\n    const pickingColor = [];\n    attribute.value = pathTesselator.get('pickingColors', attribute.value, index =>\n      this.encodePickingColor(index, pickingColor)\n    );\n  }\n\n  clearPickingColor(color) {\n    const pickedPathIndex = this.decodePickingColor(color);\n    const {bufferLayout} = this.state.pathTesselator;\n    const numVertices = bufferLayout[pickedPathIndex];\n\n    let startInstanceIndex = 0;\n    for (let pathIndex = 0; pathIndex < pickedPathIndex; pathIndex++) {\n      startInstanceIndex += bufferLayout[pathIndex];\n    }\n\n    const {instancePickingColors} = this.getAttributeManager().attributes;\n\n    const {value} = instancePickingColors;\n    const endInstanceIndex = startInstanceIndex + numVertices;\n    value.fill(0, startInstanceIndex * 3, endInstanceIndex * 3);\n    instancePickingColors.update({value});\n  }\n}\n\nPathLayer.layerName = 'PathLayer';\nPathLayer.defaultProps = defaultProps;\n"],"file":"path-layer.js"}