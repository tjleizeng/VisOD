{"version":3,"sources":["../../../src/icon-layer/icon-manager.js"],"names":["MAX_CANVAS_WIDTH","DEFAULT_BUFFER","DEFAULT_TEXTURE_MIN_FILTER","GL","LINEAR_MIPMAP_LINEAR","DEFAULT_TEXTURE_MAG_FILTER","LINEAR","noop","nextPowOfTwo","number","Math","pow","ceil","log2","resizeImage","ctx","imageData","width","height","naturalWidth","naturalHeight","canvas","clearRect","drawImage","buildRowMapping","mapping","columns","yOffset","i","length","icon","xOffset","url","Object","assign","x","y","buildMapping","icons","buffer","maxCanvasWidth","rowHeight","push","max","canvasHeight","getIcons","data","getIcon","point","Error","IconManager","gl","onUpdate","_getIcon","_mapping","_texture","_autoPacking","_canvas","dataPoint","name","autoPacking","iconAtlas","iconMapping","undefined","_updateIconAtlas","document","createElement","_updateAutoPacking","Texture2D","setParameters","TEXTURE_MIN_FILTER","TEXTURE_MAG_FILTER","urls","parameters","then","texture","values","_loadImages","getContext","setSubImageData","UNPACK_FLIP_Y_WEBGL","generateMipmap"],"mappings":"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","sourcesContent":["/* global document */\nimport GL from 'luma.gl/constants';\nimport {Texture2D, loadImages, loadTextures} from 'luma.gl';\n\nconst MAX_CANVAS_WIDTH = 1024;\nconst DEFAULT_BUFFER = 4;\n\nconst DEFAULT_TEXTURE_MIN_FILTER = GL.LINEAR_MIPMAP_LINEAR;\n// GL.LINEAR is the default value but explicitly set it here\nconst DEFAULT_TEXTURE_MAG_FILTER = GL.LINEAR;\n\nconst noop = () => {};\n\nfunction nextPowOfTwo(number) {\n  return Math.pow(2, Math.ceil(Math.log2(number)));\n}\n\n// resize image to given width and height\nfunction resizeImage(ctx, imageData, width, height) {\n  const {naturalWidth, naturalHeight} = imageData;\n  if (width === naturalWidth && height === naturalHeight) {\n    return imageData;\n  }\n\n  ctx.canvas.height = height;\n  ctx.canvas.width = width;\n\n  ctx.clearRect(0, 0, ctx.canvas.width, ctx.canvas.height);\n\n  // image, sx, sy, sWidth, sHeight, dx, dy, dWidth, dHeight\n  ctx.drawImage(imageData, 0, 0, naturalWidth, naturalHeight, 0, 0, width, height);\n\n  return ctx.canvas;\n}\n\n// traverse icons in a row of icon atlas\n// extend each icon with left-top coordinates\nfunction buildRowMapping(mapping, columns, yOffset) {\n  for (let i = 0; i < columns.length; i++) {\n    const {icon, xOffset} = columns[i];\n    mapping[icon.url] = Object.assign({}, icon, {\n      x: xOffset,\n      y: yOffset\n    });\n  }\n}\n\n/**\n * Generate coordinate mapping to retrieve icon left-top position from an icon atlas\n * @param icons {Array<Object>} list of icons, each icon requires url, width, height\n * @param buffer {Number} add buffer to the right and bottom side of the image\n * @param maxCanvasHeight {Number}\n * @returns {{mapping: {'/icon/1': {url, width, height, ...}},, canvasHeight: {Number}}}\n */\nexport function buildMapping({icons, buffer, maxCanvasWidth}) {\n  // x position till current column\n  let xOffset = 0;\n  // y position till current row\n  let yOffset = 0;\n  // height of current row\n  let rowHeight = 0;\n\n  let columns = [];\n  const mapping = {};\n\n  // Strategy to layout all the icons into a texture:\n  // traverse the icons sequentially, layout the icons from left to right, top to bottom\n  // when the sum of the icons width is equal or larger than maxCanvasWidth,\n  // move to next row starting from total height so far plus max height of the icons in previous row\n  // row width is equal to maxCanvasWidth\n  // row height is decided by the max height of the icons in that row\n  // mapping coordinates of each icon is its left-top position in the texture\n  for (let i = 0; i < icons.length; i++) {\n    const icon = icons[i];\n    if (!mapping[icon.url]) {\n      const {height, width} = icon;\n\n      // fill one row\n      if (xOffset + width + buffer > maxCanvasWidth) {\n        buildRowMapping(mapping, columns, yOffset);\n\n        xOffset = 0;\n        yOffset = rowHeight + yOffset + buffer;\n        rowHeight = 0;\n        columns = [];\n      }\n\n      columns.push({\n        icon,\n        xOffset\n      });\n\n      xOffset = xOffset + width + buffer;\n      rowHeight = Math.max(rowHeight, height);\n    }\n  }\n\n  if (columns.length > 0) {\n    buildRowMapping(mapping, columns, yOffset);\n  }\n\n  const canvasHeight = nextPowOfTwo(rowHeight + yOffset + buffer);\n\n  return {\n    mapping,\n    canvasHeight\n  };\n}\n\n// extract unique icons from data\nfunction getIcons(data, getIcon) {\n  if (!data || !getIcon) {\n    return null;\n  }\n\n  const icons = {};\n  for (const point of data) {\n    const icon = getIcon(point);\n    if (!icon) {\n      throw new Error('Icon is missing.');\n    }\n\n    if (!icon.url) {\n      throw new Error('Icon url is missing.');\n    }\n\n    if (!icons[icon.url]) {\n      icons[icon.url] = icon;\n    }\n  }\n  return icons;\n}\n\nexport default class IconManager {\n  constructor(\n    gl,\n    {\n      onUpdate = noop // notify IconLayer when icon texture update\n    }\n  ) {\n    this.gl = gl;\n    this.onUpdate = onUpdate;\n\n    this._getIcon = null;\n    this._mapping = {};\n    this._texture = null;\n    this._autoPacking = false;\n\n    this._canvas = null;\n  }\n\n  getTexture() {\n    return this._texture;\n  }\n\n  getIconMapping(dataPoint) {\n    const icon = this._getIcon(dataPoint);\n    const name = this._autoPacking ? icon.url : icon;\n    return this._mapping[name] || {};\n  }\n\n  setProps({autoPacking, iconAtlas, iconMapping, data, getIcon}) {\n    if (autoPacking !== undefined) {\n      this._autoPacking = autoPacking;\n    }\n\n    if (getIcon) {\n      this._getIcon = getIcon;\n    }\n\n    if (iconMapping) {\n      this._mapping = iconMapping;\n    }\n\n    if (iconAtlas) {\n      this._updateIconAtlas(iconAtlas);\n    }\n\n    if (this._autoPacking && (data || getIcon)) {\n      this._canvas = this._canvas || document.createElement('canvas');\n\n      this._updateAutoPacking({\n        data,\n        buffer: DEFAULT_BUFFER,\n        maxCanvasWidth: MAX_CANVAS_WIDTH\n      });\n    }\n  }\n\n  _updateIconAtlas(iconAtlas) {\n    if (iconAtlas instanceof Texture2D) {\n      iconAtlas.setParameters({\n        [GL.TEXTURE_MIN_FILTER]: DEFAULT_TEXTURE_MIN_FILTER,\n        [GL.TEXTURE_MAG_FILTER]: DEFAULT_TEXTURE_MAG_FILTER\n      });\n\n      this._texture = iconAtlas;\n      this.onUpdate();\n    } else if (typeof iconAtlas === 'string') {\n      loadTextures(this.gl, {\n        urls: [iconAtlas],\n        parameters: {\n          [GL.TEXTURE_MIN_FILTER]: DEFAULT_TEXTURE_MIN_FILTER,\n          [GL.TEXTURE_MAG_FILTER]: DEFAULT_TEXTURE_MAG_FILTER\n        }\n      }).then(([texture]) => {\n        this._texture = texture;\n        this.onUpdate();\n      });\n    }\n  }\n\n  _updateAutoPacking({data, buffer, maxCanvasWidth}) {\n    const icons = Object.values(getIcons(data, this._getIcon) || {});\n    if (icons.length > 0) {\n      // generate icon mapping\n      const {mapping, canvasHeight} = buildMapping({\n        icons,\n        buffer,\n        maxCanvasWidth\n      });\n\n      this._mapping = mapping;\n\n      // create new texture\n      this._texture = new Texture2D(this.gl, {\n        width: maxCanvasWidth,\n        height: canvasHeight\n      });\n\n      this.onUpdate();\n\n      // load images\n      this._loadImages(icons);\n    }\n  }\n\n  _loadImages(icons) {\n    const ctx = this._canvas.getContext('2d');\n    const canvasHeight = this._texture.height;\n\n    for (const icon of icons) {\n      loadImages({urls: [icon.url]}).then(([imageData]) => {\n        const iconMapping = this._mapping[icon.url];\n        const {x, y, width, height} = iconMapping;\n\n        const data = resizeImage(ctx, imageData, width, height);\n\n        this._texture.setSubImageData({\n          data,\n          x,\n          y: canvasHeight - y - height, // flip Y as texture stored as reversed Y\n          width,\n          height,\n          parameters: {\n            [GL.TEXTURE_MIN_FILTER]: DEFAULT_TEXTURE_MIN_FILTER,\n            [GL.TEXTURE_MAG_FILTER]: DEFAULT_TEXTURE_MAG_FILTER,\n            [GL.UNPACK_FLIP_Y_WEBGL]: true\n          }\n        });\n\n        // Call to regenerate mipmaps after modifying texture(s)\n        this._texture.generateMipmap();\n\n        this.onUpdate();\n      });\n    }\n  }\n}\n"],"file":"icon-manager.js"}