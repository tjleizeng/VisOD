{"version":3,"sources":["../../../src/solid-polygon-layer/solid-polygon-layer.js"],"names":["Layer","GL","Model","Geometry","hasFeature","FEATURES","PolygonTesselator","vs","fs","DEFAULT_COLOR","defaultProps","filled","extruded","wireframe","fp64","elevationScale","type","min","value","getPolygon","f","polygon","getElevation","getFillColor","getLineColor","lightSettings","ATTRIBUTE_TRANSITION","enter","chunk","length","subarray","SolidPolygonLayer","projectModule","use64bitProjection","modules","gl","context","setState","numInstances","polygonTesselator","IndexType","ELEMENT_INDEX_UINT32","Uint32Array","Uint16Array","attributeManager","getAttributeManager","noAlloc","remove","add","indices","size","isIndexed","update","calculateIndices","positions","transition","accessor","calculatePositions","positions64xyLow","calculatePositionsLow","vertexValid","UNSIGNED_BYTE","calculateVertexValid","elevations","calculateElevations","fillColors","alias","calculateFillColors","defaultValue","lineColors","calculateLineColors","pickingColors","calculatePickingColors","uniforms","props","state","topModel","sideModel","renderUniforms","Object","assign","Boolean","setUniforms","setDrawMode","LINE_STRIP","render","isWireframe","TRIANGLE_FAN","updateParams","updateGeometry","oldProps","regenerateModels","models","forEach","model","delete","_getModels","invalidateAll","changeFlags","geometryConfigChanged","dataChanged","updateTriggersChanged","all","data","getGeometry","positionFormat","use64bitPositions","instanceCount","attributes","getChangedAttributes","clearChangedFlags","getNumInstances","vertexCount","setVertexCount","setAttributes","setInstanceCount","newAttributes","attributeName","attribute","isInstanced","buffer","getBuffer","nextPositions","id","offset","nextPositions64xyLow","getShaders","geometry","drawMode","TRIANGLES","vertexPositions","constant","Float32Array","isSideVertex","shaderCache","LINES","filter","bufferLayout","indexLayout","get","isFP64","pickingColor","index","encodePickingColor","color","pickedPolygonIndex","decodePickingColor","numVertices","startInstanceIndex","polygonIndex","endInstanceIndex","fill","layerName"],"mappings":"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","sourcesContent":["// Copyright (c) 2015 - 2017 Uber Technologies, Inc.\n//\n// Permission is hereby granted, free of charge, to any person obtaining a copy\n// of this software and associated documentation files (the \"Software\"), to deal\n// in the Software without restriction, including without limitation the rights\n// to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n// copies of the Software, and to permit persons to whom the Software is\n// furnished to do so, subject to the following conditions:\n//\n// The above copyright notice and this permission notice shall be included in\n// all copies or substantial portions of the Software.\n//\n// THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\n// THE SOFTWARE.\n\nimport {Layer} from '@deck.gl/core';\nimport GL from 'luma.gl/constants';\nimport {Model, Geometry, hasFeature, FEATURES} from 'luma.gl';\n\n// Polygon geometry generation is managed by the polygon tesselator\nimport PolygonTesselator from './polygon-tesselator';\n\nimport vs from './solid-polygon-layer-vertex.glsl';\nimport fs from './solid-polygon-layer-fragment.glsl';\n\nconst DEFAULT_COLOR = [0, 0, 0, 255];\n\nconst defaultProps = {\n  filled: true,\n  // Whether to extrude\n  extruded: false,\n  // Whether to draw a GL.LINES wireframe of the polygon\n  wireframe: false,\n  fp64: false,\n\n  // elevation multiplier\n  elevationScale: {type: 'number', min: 0, value: 1},\n\n  // Accessor for polygon geometry\n  getPolygon: {type: 'accessor', value: f => f.polygon},\n  // Accessor for extrusion height\n  getElevation: {type: 'accessor', value: 1000},\n  // Accessor for colors\n  getFillColor: {type: 'accessor', value: DEFAULT_COLOR},\n  getLineColor: {type: 'accessor', value: DEFAULT_COLOR},\n\n  // Optional settings for 'lighting' shader module\n  lightSettings: {}\n};\n\nconst ATTRIBUTE_TRANSITION = {\n  enter: (value, chunk) => {\n    return chunk.length ? chunk.subarray(chunk.length - value.length) : value;\n  }\n};\n\nexport default class SolidPolygonLayer extends Layer {\n  getShaders() {\n    const projectModule = this.use64bitProjection() ? 'project64' : 'project32';\n    return {vs, fs, modules: [projectModule, 'lighting', 'picking']};\n  }\n\n  initializeState() {\n    const {gl} = this.context;\n    this.setState({\n      numInstances: 0,\n      polygonTesselator: new PolygonTesselator({\n        IndexType: !gl || hasFeature(gl, FEATURES.ELEMENT_INDEX_UINT32) ? Uint32Array : Uint16Array\n      })\n    });\n\n    const attributeManager = this.getAttributeManager();\n    const noAlloc = true;\n\n    attributeManager.remove(['instancePickingColors']);\n\n    /* eslint-disable max-len */\n    attributeManager.add({\n      indices: {size: 1, isIndexed: true, update: this.calculateIndices, noAlloc},\n      positions: {\n        size: 3,\n        transition: ATTRIBUTE_TRANSITION,\n        accessor: 'getPolygon',\n        update: this.calculatePositions,\n        noAlloc\n      },\n      positions64xyLow: {size: 2, update: this.calculatePositionsLow, noAlloc},\n      vertexValid: {\n        size: 1,\n        type: GL.UNSIGNED_BYTE,\n        update: this.calculateVertexValid,\n        noAlloc\n      },\n      elevations: {\n        size: 1,\n        transition: ATTRIBUTE_TRANSITION,\n        accessor: 'getElevation',\n        update: this.calculateElevations\n      },\n      fillColors: {\n        alias: 'colors',\n        size: 4,\n        type: GL.UNSIGNED_BYTE,\n        transition: ATTRIBUTE_TRANSITION,\n        accessor: 'getFillColor',\n        update: this.calculateFillColors,\n        defaultValue: DEFAULT_COLOR\n      },\n      lineColors: {\n        alias: 'colors',\n        size: 4,\n        type: GL.UNSIGNED_BYTE,\n        transition: ATTRIBUTE_TRANSITION,\n        accessor: 'getLineColor',\n        update: this.calculateLineColors,\n        defaultValue: DEFAULT_COLOR\n      },\n      pickingColors: {size: 3, type: GL.UNSIGNED_BYTE, update: this.calculatePickingColors}\n    });\n    /* eslint-enable max-len */\n  }\n\n  draw({uniforms}) {\n    const {extruded, filled, wireframe, elevationScale} = this.props;\n    const {topModel, sideModel} = this.state;\n\n    const renderUniforms = Object.assign({}, uniforms, {\n      extruded: Boolean(extruded),\n      elevationScale\n    });\n\n    // Note: the order is important\n    if (sideModel) {\n      sideModel.setUniforms(renderUniforms);\n      if (wireframe) {\n        sideModel.setDrawMode(GL.LINE_STRIP);\n        sideModel.render({isWireframe: true});\n      }\n      if (filled) {\n        sideModel.setDrawMode(GL.TRIANGLE_FAN);\n        sideModel.render({isWireframe: false});\n      }\n    }\n    if (topModel) {\n      topModel.render(renderUniforms);\n    }\n  }\n\n  updateState(updateParams) {\n    super.updateState(updateParams);\n\n    this.updateGeometry(updateParams);\n\n    const {props, oldProps} = updateParams;\n    const attributeManager = this.getAttributeManager();\n\n    const regenerateModels =\n      props.fp64 !== oldProps.fp64 ||\n      props.filled !== oldProps.filled ||\n      props.extruded !== oldProps.extruded;\n\n    if (regenerateModels) {\n      if (this.state.models) {\n        this.state.models.forEach(model => model.delete());\n      }\n\n      this.setState(this._getModels(this.context.gl));\n      attributeManager.invalidateAll();\n    }\n  }\n\n  updateGeometry({props, oldProps, changeFlags}) {\n    const geometryConfigChanged =\n      changeFlags.dataChanged ||\n      props.fp64 !== oldProps.fp64 ||\n      (changeFlags.updateTriggersChanged &&\n        (changeFlags.updateTriggersChanged.all || changeFlags.updateTriggersChanged.getPolygon));\n\n    // When the geometry config  or the data is changed,\n    // tessellator needs to be invoked\n    if (geometryConfigChanged) {\n      const {polygonTesselator} = this.state;\n      polygonTesselator.updateGeometry({\n        data: props.data,\n        getGeometry: props.getPolygon,\n        positionFormat: props.positionFormat,\n        fp64: this.use64bitPositions()\n      });\n\n      this.setState({\n        numInstances: polygonTesselator.instanceCount\n      });\n\n      this.getAttributeManager().invalidateAll();\n    }\n  }\n\n  updateAttributes(props) {\n    super.updateAttributes(props);\n    const attributes = this.getAttributeManager().getChangedAttributes({clearChangedFlags: true});\n    const {topModel, sideModel} = this.state;\n    const numInstances = this.getNumInstances();\n\n    if (topModel) {\n      if (attributes.indices) {\n        const vertexCount = attributes.indices.value.length;\n        topModel.setVertexCount(vertexCount);\n      }\n      topModel.setAttributes(attributes);\n    }\n    if (sideModel) {\n      // Remove one to account for the offset\n      sideModel.setInstanceCount(numInstances - 1);\n      const newAttributes = {};\n      for (const attributeName in attributes) {\n        const attribute = attributes[attributeName];\n\n        if (attributeName !== 'indices') {\n          // Apply layout override to the attribute.\n          newAttributes[attributeName] = Object.assign({}, attribute, {\n            isInstanced: true,\n            buffer: attribute.getBuffer()\n          });\n        }\n      }\n      if (newAttributes.positions) {\n        newAttributes.nextPositions = Object.assign(\n          {},\n          newAttributes.positions,\n          {id: 'nextPositions', offset: 12} // 1 vertex * 3 floats * 4 bits\n        );\n      }\n      if (newAttributes.positions64xyLow) {\n        newAttributes.nextPositions64xyLow = Object.assign(\n          {},\n          newAttributes.positions64xyLow,\n          {id: 'nextPositions64xyLow', offset: 8} // 1 vertex * 2 floats * 4 bits\n        );\n      }\n      sideModel.setAttributes(newAttributes);\n    }\n  }\n\n  _getModels(gl) {\n    const {id, filled, extruded} = this.props;\n\n    let topModel;\n    let sideModel;\n\n    if (filled) {\n      topModel = new Model(\n        gl,\n        Object.assign({}, this.getShaders(), {\n          id: `${id}-top`,\n          geometry: new Geometry({\n            drawMode: GL.TRIANGLES,\n            attributes: {\n              vertexPositions: {size: 2, constant: true, value: new Float32Array([0, 1])},\n              nextPositions: {size: 3, constant: true, value: new Float32Array(3)},\n              nextPositions64xyLow: {size: 2, constant: true, value: new Float32Array(2)}\n            }\n          }),\n          uniforms: {\n            isWireframe: false,\n            isSideVertex: false\n          },\n          vertexCount: 0,\n          isIndexed: true,\n          shaderCache: this.context.shaderCache\n        })\n      );\n    }\n    if (extruded) {\n      sideModel = new Model(\n        gl,\n        Object.assign({}, this.getShaders(), {\n          id: `${id}-side`,\n          geometry: new Geometry({\n            drawMode: GL.LINES,\n            vertexCount: 4,\n            attributes: {\n              // top right - top left - bootom left - bottom right\n              vertexPositions: {size: 2, value: new Float32Array([1, 1, 0, 1, 0, 0, 1, 0])}\n            }\n          }),\n          uniforms: {\n            isSideVertex: true\n          },\n          isInstanced: 1,\n          shaderCache: this.context.shaderCache\n        })\n      );\n    }\n\n    return {\n      models: [sideModel, topModel].filter(Boolean),\n      topModel,\n      sideModel\n    };\n  }\n\n  calculateIndices(attribute) {\n    const {polygonTesselator} = this.state;\n    attribute.bufferLayout = polygonTesselator.indexLayout;\n    attribute.value = polygonTesselator.get('indices');\n  }\n\n  calculatePositions(attribute) {\n    const {polygonTesselator} = this.state;\n    attribute.bufferLayout = polygonTesselator.bufferLayout;\n    attribute.value = polygonTesselator.get('positions');\n  }\n  calculatePositionsLow(attribute) {\n    const isFP64 = this.use64bitPositions();\n    attribute.constant = !isFP64;\n\n    if (!isFP64) {\n      attribute.value = new Float32Array(2);\n      return;\n    }\n\n    attribute.value = this.state.polygonTesselator.get('positions64xyLow');\n  }\n\n  calculateVertexValid(attribute) {\n    attribute.value = this.state.polygonTesselator.get('vertexValid');\n  }\n\n  calculateElevations(attribute) {\n    const {polygonTesselator} = this.state;\n    attribute.bufferLayout = polygonTesselator.bufferLayout;\n\n    const {extruded, getElevation} = this.props;\n    if (extruded) {\n      attribute.constant = false;\n      attribute.value = polygonTesselator.get('elevations', attribute.value, getElevation);\n    } else {\n      attribute.constant = true;\n      attribute.value = new Float32Array(1);\n    }\n  }\n\n  calculateFillColors(attribute) {\n    const {polygonTesselator} = this.state;\n    attribute.bufferLayout = polygonTesselator.bufferLayout;\n    attribute.value = polygonTesselator.get('colors', attribute.value, this.props.getFillColor);\n  }\n  calculateLineColors(attribute) {\n    const {polygonTesselator} = this.state;\n    attribute.bufferLayout = polygonTesselator.bufferLayout;\n    attribute.value = polygonTesselator.get('colors', attribute.value, this.props.getLineColor);\n  }\n\n  // Override the default picking colors calculation\n  calculatePickingColors(attribute) {\n    const pickingColor = [];\n    attribute.value = this.state.polygonTesselator.get('pickingColors', attribute.value, index =>\n      this.encodePickingColor(index, pickingColor)\n    );\n  }\n\n  clearPickingColor(color) {\n    const pickedPolygonIndex = this.decodePickingColor(color);\n    const {bufferLayout} = this.state.polygonTesselator;\n    const numVertices = bufferLayout[pickedPolygonIndex];\n\n    let startInstanceIndex = 0;\n    for (let polygonIndex = 0; polygonIndex < pickedPolygonIndex; polygonIndex++) {\n      startInstanceIndex += bufferLayout[polygonIndex];\n    }\n\n    const {pickingColors} = this.getAttributeManager().attributes;\n\n    const {value} = pickingColors;\n    const endInstanceIndex = startInstanceIndex + numVertices;\n    value.fill(0, startInstanceIndex * 3, endInstanceIndex * 3);\n    pickingColors.update({value});\n  }\n}\n\nSolidPolygonLayer.layerName = 'SolidPolygonLayer';\nSolidPolygonLayer.defaultProps = defaultProps;\n"],"file":"solid-polygon-layer.js"}