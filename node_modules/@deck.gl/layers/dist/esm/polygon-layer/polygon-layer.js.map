{"version":3,"sources":["../../../src/polygon-layer/polygon-layer.js"],"names":["CompositeLayer","SolidPolygonLayer","PathLayer","Polygon","defaultLineColor","defaultFillColor","defaultProps","stroked","filled","extruded","elevationScale","wireframe","lineWidthScale","lineWidthMinPixels","lineWidthMaxPixels","Number","MAX_SAFE_INTEGER","lineJointRounded","lineMiterLimit","lineDashJustified","fp64","getPolygon","type","value","f","polygon","getFillColor","getLineColor","getLineWidth","getLineDashArray","getElevation","lightSettings","PolygonLayer","state","paths","oldProps","props","changeFlags","geometryChanged","dataChanged","updateTriggersChanged","all","_getPaths","info","Object","assign","object","data","positionFormat","positionSize","normalize","positions","holeIndices","i","length","path","subarray","push","accessor","x","transitions","updateTriggers","FillLayer","getSubLayerClass","StrokeLayer","polygonLayer","shouldRenderSubLayer","getSubLayerProps","id","polygonLineLayer","widthScale","widthMinPixels","widthMaxPixels","rounded","miterLimit","dashJustified","getWidth","getColor","getPath","_getAccessor","getDashArray","layerName"],"mappings":"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","sourcesContent":["// Copyright (c) 2015 - 2017 Uber Technologies, Inc.\n//\n// Permission is hereby granted, free of charge, to any person obtaining a copy\n// of this software and associated documentation files (the \"Software\"), to deal\n// in the Software without restriction, including without limitation the rights\n// to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n// copies of the Software, and to permit persons to whom the Software is\n// furnished to do so, subject to the following conditions:\n//\n// The above copyright notice and this permission notice shall be included in\n// all copies or substantial portions of the Software.\n//\n// THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\n// THE SOFTWARE.\n\nimport {CompositeLayer} from '@deck.gl/core';\nimport SolidPolygonLayer from '../solid-polygon-layer/solid-polygon-layer';\nimport PathLayer from '../path-layer/path-layer';\nimport * as Polygon from '../solid-polygon-layer/polygon';\n\nconst defaultLineColor = [0, 0, 0, 255];\nconst defaultFillColor = [0, 0, 0, 255];\n\nconst defaultProps = {\n  stroked: true,\n  filled: true,\n  extruded: false,\n  elevationScale: 1,\n  wireframe: false,\n\n  lineWidthScale: 1,\n  lineWidthMinPixels: 0,\n  lineWidthMaxPixels: Number.MAX_SAFE_INTEGER,\n  lineJointRounded: false,\n  lineMiterLimit: 4,\n  lineDashJustified: false,\n  fp64: false,\n\n  getPolygon: {type: 'accessor', value: f => f.polygon},\n  // Polygon fill color\n  getFillColor: {type: 'accessor', value: defaultFillColor},\n  // Point, line and polygon outline color\n  getLineColor: {type: 'accessor', value: defaultLineColor},\n  // Line and polygon outline accessors\n  getLineWidth: {type: 'accessor', value: 1},\n  // Line dash array accessor\n  getLineDashArray: {type: 'accessor', value: [0, 0]},\n  // Polygon extrusion accessor\n  getElevation: {type: 'accessor', value: 1000},\n\n  // Optional settings for 'lighting' shader module\n  lightSettings: {}\n};\n\nexport default class PolygonLayer extends CompositeLayer {\n  initializeState() {\n    this.state = {\n      paths: []\n    };\n  }\n\n  updateState({oldProps, props, changeFlags}) {\n    const geometryChanged =\n      changeFlags.dataChanged ||\n      (changeFlags.updateTriggersChanged &&\n        (changeFlags.updateTriggersChanged.all || changeFlags.updateTriggersChanged.getPolygon));\n\n    if (geometryChanged) {\n      this.state.paths = this._getPaths(props);\n    }\n  }\n\n  getPickingInfo({info}) {\n    return Object.assign(info, {\n      // override object with picked data\n      object: (info.object && info.object.object) || info.object\n    });\n  }\n\n  _getPaths({data, getPolygon, positionFormat}) {\n    const paths = [];\n    const positionSize = positionFormat === 'XY' ? 2 : 3;\n\n    for (const object of data) {\n      const {positions, holeIndices} = Polygon.normalize(getPolygon(object), positionSize);\n\n      if (holeIndices) {\n        // split the positions array into `holeIndices.length + 1` rings\n        // holeIndices[-1] falls back to 0\n        // holeIndices[holeIndices.length] falls back to positions.length\n        for (let i = 0; i <= holeIndices.length; i++) {\n          const path = positions.subarray(\n            holeIndices[i - 1] || 0,\n            holeIndices[i] || positions.length\n          );\n          paths.push({path, object});\n        }\n      } else {\n        paths.push({path: positions, object});\n      }\n    }\n    return paths;\n  }\n\n  _getAccessor(accessor) {\n    if (typeof accessor === 'function') {\n      return x => accessor(x.object);\n    }\n    return accessor;\n  }\n\n  /* eslint-disable complexity */\n  renderLayers() {\n    // Layer composition props\n    const {data, stroked, filled, extruded, wireframe, elevationScale, transitions} = this.props;\n\n    // Rendering props underlying layer\n    const {\n      lineWidthScale,\n      lineWidthMinPixels,\n      lineWidthMaxPixels,\n      lineJointRounded,\n      lineMiterLimit,\n      lineDashJustified,\n      fp64\n    } = this.props;\n\n    // Accessor props for underlying layers\n    const {\n      getFillColor,\n      getLineColor,\n      getLineWidth,\n      getLineDashArray,\n      getElevation,\n      getPolygon,\n      updateTriggers,\n      lightSettings\n    } = this.props;\n\n    const {paths} = this.state;\n\n    const FillLayer = this.getSubLayerClass('fill', SolidPolygonLayer);\n    const StrokeLayer = this.getSubLayerClass('stroke', PathLayer);\n\n    // Filled Polygon Layer\n    const polygonLayer =\n      this.shouldRenderSubLayer('fill', paths) &&\n      new FillLayer(\n        {\n          extruded,\n          elevationScale,\n\n          fp64,\n          filled,\n          wireframe,\n\n          getElevation,\n          getFillColor,\n          getLineColor,\n\n          lightSettings,\n          transitions\n        },\n        this.getSubLayerProps({\n          id: 'fill',\n          updateTriggers: {\n            getPolygon: updateTriggers.getPolygon,\n            getElevation: updateTriggers.getElevation,\n            getFillColor: updateTriggers.getFillColor,\n            getLineColor: updateTriggers.getLineColor\n          }\n        }),\n        {\n          data,\n          getPolygon\n        }\n      );\n\n    // Polygon line layer\n    const polygonLineLayer =\n      !extruded &&\n      stroked &&\n      this.shouldRenderSubLayer('stroke', paths) &&\n      new StrokeLayer(\n        {\n          fp64,\n          widthScale: lineWidthScale,\n          widthMinPixels: lineWidthMinPixels,\n          widthMaxPixels: lineWidthMaxPixels,\n          rounded: lineJointRounded,\n          miterLimit: lineMiterLimit,\n          dashJustified: lineDashJustified,\n\n          transitions: transitions && {\n            getWidth: transitions.getLineWidth,\n            getColor: transitions.getLineColor,\n            getPath: transitions.getPolygon\n          },\n\n          getColor: this._getAccessor(getLineColor),\n          getWidth: this._getAccessor(getLineWidth),\n          getDashArray: this._getAccessor(getLineDashArray)\n        },\n        this.getSubLayerProps({\n          id: 'stroke',\n          updateTriggers: {\n            getWidth: updateTriggers.getLineWidth,\n            getColor: updateTriggers.getLineColor,\n            getDashArray: updateTriggers.getLineDashArray\n          }\n        }),\n        {\n          data: paths,\n          getPath: x => x.path\n        }\n      );\n\n    return [\n      // If not extruded: flat fill layer is drawn below outlines\n      !extruded && polygonLayer,\n      polygonLineLayer,\n      // If extruded: draw fill layer last for correct blending behavior\n      extruded && polygonLayer\n    ];\n  }\n  /* eslint-enable complexity */\n}\n\nPolygonLayer.layerName = 'PolygonLayer';\nPolygonLayer.defaultProps = defaultProps;\n"],"file":"polygon-layer.js"}