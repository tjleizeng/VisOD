{"version":3,"sources":["../../../src/hexagon-cell-layer/hexagon-cell-layer.js"],"names":["Layer","log","GL","Model","CylinderGeometry","fp64","fp64LowPart","vs","fs","DEFAULT_COLOR","defaultProps","hexagonVertices","radius","type","min","value","angle","coverage","max","elevationScale","extruded","getCentroid","x","centroid","getColor","getElevation","lightSettings","HexagonCellLayer","projectModule","use64bitProjection","modules","attributeManager","getAttributeManager","addInstanced","instancePositions","size","transition","accessor","instanceElevations","instancePositions64xyLow","update","calculateInstancePositions64xyLow","instanceColors","UNSIGNED_BYTE","defaultValue","props","oldProps","changeFlags","gl","context","state","model","delete","setState","_getModel","invalidateAll","updateRadiusAngle","Array","isArray","length","error","vertices","vertex0","vertex3","viewport","getDistanceScales","pixelsPerMeter","spaceCoord0","projectFlat","spaceCoord3","dx","dy","dxy","Math","sqrt","acos","sign","PI","topRadius","bottomRadius","topCap","bottomCap","height","verticalAxis","nradial","nvertical","Object","assign","getShaders","id","geometry","getCylinderGeometry","isInstanced","shaderCache","uniforms","render","attribute","isFP64","use64bitPositions","constant","Float32Array","data","i","object","position","layerName"],"mappings":";;;;;;;;;;;;;;;;;;;;;;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA,SAAQA,KAAR,EAAeC,GAAf,QAAyB,eAAzB;AACA,OAAOC,EAAP,MAAe,mBAAf;AACA,SAAQC,KAAR,EAAeC,gBAAf,EAAiCC,IAAjC,QAA4C,SAA5C;IACOC,W,GAAeD,I,CAAfC,W;AAEP,OAAOC,EAAP,MAAe,kCAAf;AACA,OAAOC,EAAP,MAAe,oCAAf;AAEA,IAAMC,aAAa,GAAG,CAAC,GAAD,EAAM,CAAN,EAAS,GAAT,EAAc,GAAd,CAAtB;AAEA,IAAMC,YAAY,GAAG;AACnBC,EAAAA,eAAe,EAAE,IADE;AAEnBC,EAAAA,MAAM,EAAE;AAACC,IAAAA,IAAI,EAAE,QAAP;AAAiBC,IAAAA,GAAG,EAAE,CAAtB;AAAyBC,IAAAA,KAAK,EAAE;AAAhC,GAFW;AAGnBC,EAAAA,KAAK,EAAE;AAACH,IAAAA,IAAI,EAAE,QAAP;AAAiBE,IAAAA,KAAK,EAAE;AAAxB,GAHY;AAInBE,EAAAA,QAAQ,EAAE;AAACJ,IAAAA,IAAI,EAAE,QAAP;AAAiBC,IAAAA,GAAG,EAAE,CAAtB;AAAyBI,IAAAA,GAAG,EAAE,CAA9B;AAAiCH,IAAAA,KAAK,EAAE;AAAxC,GAJS;AAKnBI,EAAAA,cAAc,EAAE;AAACN,IAAAA,IAAI,EAAE,QAAP;AAAiBC,IAAAA,GAAG,EAAE,CAAtB;AAAyBC,IAAAA,KAAK,EAAE;AAAhC,GALG;AAMnBK,EAAAA,QAAQ,EAAE,IANS;AAOnBf,EAAAA,IAAI,EAAE,KAPa;AASnBgB,EAAAA,WAAW,EAAE;AAACR,IAAAA,IAAI,EAAE,UAAP;AAAmBE,IAAAA,KAAK,EAAE,eAAAO,CAAC;AAAA,aAAIA,CAAC,CAACC,QAAN;AAAA;AAA3B,GATM;AAUnBC,EAAAA,QAAQ,EAAE;AAACX,IAAAA,IAAI,EAAE,UAAP;AAAmBE,IAAAA,KAAK,EAAEN;AAA1B,GAVS;AAWnBgB,EAAAA,YAAY,EAAE;AAACZ,IAAAA,IAAI,EAAE,UAAP;AAAmBE,IAAAA,KAAK,EAAE;AAA1B,GAXK;AAanBW,EAAAA,aAAa,EAAE;AAbI,CAArB;;IAgBqBC,gB;;;;;;;;;;;;;iCACN;AACX,UAAMC,aAAa,GAAG,KAAKC,kBAAL,KAA4B,WAA5B,GAA0C,WAAhE;AACA,aAAO;AAACtB,QAAAA,EAAE,EAAFA,EAAD;AAAKC,QAAAA,EAAE,EAAFA,EAAL;AAASsB,QAAAA,OAAO,EAAE,CAACF,aAAD,EAAgB,UAAhB,EAA4B,SAA5B;AAAlB,OAAP;AACD;AAED;;;;;;;sCAIkB;AAChB,UAAMG,gBAAgB,GAAG,KAAKC,mBAAL,EAAzB;AACA;;AACAD,MAAAA,gBAAgB,CAACE,YAAjB,CAA8B;AAC5BC,QAAAA,iBAAiB,EAAE;AACjBC,UAAAA,IAAI,EAAE,CADW;AAEjBC,UAAAA,UAAU,EAAE,IAFK;AAGjBC,UAAAA,QAAQ,EAAE;AAHO,SADS;AAM5BC,QAAAA,kBAAkB,EAAE;AAClBH,UAAAA,IAAI,EAAE,CADY;AAElBC,UAAAA,UAAU,EAAE,IAFM;AAGlBC,UAAAA,QAAQ,EAAE;AAHQ,SANQ;AAW5BE,QAAAA,wBAAwB,EAAE;AACxBJ,UAAAA,IAAI,EAAE,CADkB;AAExBE,UAAAA,QAAQ,EAAE,aAFc;AAGxBG,UAAAA,MAAM,EAAE,KAAKC;AAHW,SAXE;AAgB5BC,QAAAA,cAAc,EAAE;AACdP,UAAAA,IAAI,EAAE,CADQ;AAEdtB,UAAAA,IAAI,EAAEX,EAAE,CAACyC,aAFK;AAGdP,UAAAA,UAAU,EAAE,IAHE;AAIdC,UAAAA,QAAQ,EAAE,UAJI;AAKdO,UAAAA,YAAY,EAAEnC;AALA;AAhBY,OAA9B;AAwBA;AACD;;;sCAE2C;AAAA,UAA/BoC,KAA+B,QAA/BA,KAA+B;AAAA,UAAxBC,QAAwB,QAAxBA,QAAwB;AAAA,UAAdC,WAAc,QAAdA,WAAc;;AAC1C,wFAAkB;AAACF,QAAAA,KAAK,EAALA,KAAD;AAAQC,QAAAA,QAAQ,EAARA,QAAR;AAAkBC,QAAAA,WAAW,EAAXA;AAAlB,OAAlB;;AACA,UAAIF,KAAK,CAACxC,IAAN,KAAeyC,QAAQ,CAACzC,IAA5B,EAAkC;AAAA,YACzB2C,EADyB,GACnB,KAAKC,OADc,CACzBD,EADyB;;AAEhC,YAAI,KAAKE,KAAL,CAAWC,KAAf,EAAsB;AACpB,eAAKD,KAAL,CAAWC,KAAX,CAAiBC,MAAjB;AACD;;AACD,aAAKC,QAAL,CAAc;AAACF,UAAAA,KAAK,EAAE,KAAKG,SAAL,CAAeN,EAAf;AAAR,SAAd;AACA,aAAKhB,mBAAL,GAA2BuB,aAA3B;AACD;;AAED,UACEV,KAAK,CAAClC,eAAN,KAA0BmC,QAAQ,CAACnC,eAAnC,IACAkC,KAAK,CAACjC,MAAN,KAAiBkC,QAAQ,CAAClC,MAD1B,IAEAiC,KAAK,CAAC7B,KAAN,KAAgB8B,QAAQ,CAAC9B,KAH3B,EAIE;AACA,aAAKwC,iBAAL;AACD;AACF;;;wCAEmB;AAAA,wBACI,KAAKX,KADT;AAAA,UACb7B,KADa,eACbA,KADa;AAAA,UACNJ,MADM,eACNA,MADM;AAAA,UAEXD,eAFW,GAEQ,KAAKkC,KAFb,CAEXlC,eAFW;;AAIlB,UAAI8C,KAAK,CAACC,OAAN,CAAc/C,eAAd,CAAJ,EAAoC;AAClC,YAAIA,eAAe,CAACgD,MAAhB,GAAyB,CAA7B,EAAgC;AAC9B1D,UAAAA,GAAG,CAAC2D,KAAJ,CAAU,oEAAV;AACD,SAHiC,CAKlC;;;AACA,YAAMC,QAAQ,GAAG,KAAKhB,KAAL,CAAWlC,eAA5B;AAEA,YAAMmD,OAAO,GAAGD,QAAQ,CAAC,CAAD,CAAxB;AACA,YAAME,OAAO,GAAGF,QAAQ,CAAC,CAAD,CAAxB,CATkC,CAWlC;;AAXkC,YAY3BG,QAZ2B,GAYf,KAAKf,OAZU,CAY3Be,QAZ2B;;AAAA,oCAaTA,QAAQ,CAACC,iBAAT,EAbS;AAAA,YAa3BC,cAb2B,yBAa3BA,cAb2B;;AAclC,YAAMC,WAAW,GAAG,KAAKC,WAAL,CAAiBN,OAAjB,CAApB;AACA,YAAMO,WAAW,GAAG,KAAKD,WAAL,CAAiBL,OAAjB,CAApB,CAfkC,CAiBlC;;AACA,YAAMO,EAAE,GAAGH,WAAW,CAAC,CAAD,CAAX,GAAiBE,WAAW,CAAC,CAAD,CAAvC;AACA,YAAME,EAAE,GAAGJ,WAAW,CAAC,CAAD,CAAX,GAAiBE,WAAW,CAAC,CAAD,CAAvC;AACA,YAAMG,GAAG,GAAGC,IAAI,CAACC,IAAL,CAAUJ,EAAE,GAAGA,EAAL,GAAUC,EAAE,GAAGA,EAAzB,CAAZ,CApBkC,CAsBlC;;AACAvD,QAAAA,KAAK,GAAGyD,IAAI,CAACE,IAAL,CAAUL,EAAE,GAAGE,GAAf,IAAsB,CAACC,IAAI,CAACG,IAAL,CAAUL,EAAV,CAAvB,GAAuCE,IAAI,CAACI,EAAL,GAAU,CAAzD;AACAjE,QAAAA,MAAM,GAAG4D,GAAG,GAAG,CAAN,GAAUN,cAAc,CAAC,CAAD,CAAjC;AACD;;AAED,WAAKb,QAAL,CAAc;AAACrC,QAAAA,KAAK,EAALA,KAAD;AAAQJ,QAAAA,MAAM,EAANA;AAAR,OAAd;AACD;;;wCAEmBA,M,EAAQ;AAC1B,aAAO,IAAIR,gBAAJ,CAAqB;AAC1BQ,QAAAA,MAAM,EAANA,MAD0B;AAE1BkE,QAAAA,SAAS,EAAElE,MAFe;AAG1BmE,QAAAA,YAAY,EAAEnE,MAHY;AAI1BoE,QAAAA,MAAM,EAAE,IAJkB;AAK1BC,QAAAA,SAAS,EAAE,IALe;AAM1BC,QAAAA,MAAM,EAAE,CANkB;AAO1BC,QAAAA,YAAY,EAAE,GAPY;AAQ1BC,QAAAA,OAAO,EAAE,CARiB;AAS1BC,QAAAA,SAAS,EAAE;AATe,OAArB,CAAP;AAWD;;;8BAESrC,E,EAAI;AACZ,aAAO,IAAI7C,KAAJ,CACL6C,EADK,EAELsC,MAAM,CAACC,MAAP,CAAc,EAAd,EAAkB,KAAKC,UAAL,EAAlB,EAAqC;AACnCC,QAAAA,EAAE,EAAE,KAAK5C,KAAL,CAAW4C,EADoB;AAEnCC,QAAAA,QAAQ,EAAE,KAAKC,mBAAL,CAAyB,CAAzB,CAFyB;AAGnCC,QAAAA,WAAW,EAAE,IAHsB;AAInCC,QAAAA,WAAW,EAAE,KAAK5C,OAAL,CAAa4C;AAJS,OAArC,CAFK,CAAP;AASD;;;gCAEgB;AAAA,UAAXC,QAAW,SAAXA,QAAW;AAAA,yBAC8B,KAAKjD,KADnC;AAAA,UACR1B,cADQ,gBACRA,cADQ;AAAA,UACQC,QADR,gBACQA,QADR;AAAA,UACkBH,QADlB,gBACkBA,QADlB;AAAA,wBAES,KAAKiC,KAFd;AAAA,UAERtC,MAFQ,eAERA,MAFQ;AAAA,UAEAI,KAFA,eAEAA,KAFA;AAIf,WAAKkC,KAAL,CAAWC,KAAX,CAAiB4C,MAAjB,CACET,MAAM,CAACC,MAAP,CAAc,EAAd,EAAkBO,QAAlB,EAA4B;AAC1BlF,QAAAA,MAAM,EAANA,MAD0B;AAE1BI,QAAAA,KAAK,EAALA,KAF0B;AAG1BI,QAAAA,QAAQ,EAARA,QAH0B;AAI1BH,QAAAA,QAAQ,EAARA,QAJ0B;AAK1BE,QAAAA,cAAc,EAAdA;AAL0B,OAA5B,CADF;AASD;;;sDAEiC6E,S,EAAW;AAC3C,UAAMC,MAAM,GAAG,KAAKC,iBAAL,EAAf;AACAF,MAAAA,SAAS,CAACG,QAAV,GAAqB,CAACF,MAAtB;;AAEA,UAAI,CAACA,MAAL,EAAa;AACXD,QAAAA,SAAS,CAACjF,KAAV,GAAkB,IAAIqF,YAAJ,CAAiB,CAAjB,CAAlB;AACA;AACD;;AAP0C,yBASf,KAAKvD,KATU;AAAA,UASpCwD,IAToC,gBASpCA,IAToC;AAAA,UAS9BhF,WAT8B,gBAS9BA,WAT8B;AAAA,UAUpCN,KAVoC,GAU3BiF,SAV2B,CAUpCjF,KAVoC;AAW3C,UAAIuF,CAAC,GAAG,CAAR;AAX2C;AAAA;AAAA;;AAAA;AAY3C,6BAAqBD,IAArB,8HAA2B;AAAA,cAAhBE,MAAgB;AACzB,cAAMC,QAAQ,GAAGnF,WAAW,CAACkF,MAAD,CAA5B;AACAxF,UAAAA,KAAK,CAACuF,CAAC,EAAF,CAAL,GAAahG,WAAW,CAACkG,QAAQ,CAAC,CAAD,CAAT,CAAxB;AACAzF,UAAAA,KAAK,CAACuF,CAAC,EAAF,CAAL,GAAahG,WAAW,CAACkG,QAAQ,CAAC,CAAD,CAAT,CAAxB;AACD;AAhB0C;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAiB5C;;;;EAxJ2CxG,K;;SAAzB2B,gB;AA2JrBA,gBAAgB,CAAC8E,SAAjB,GAA6B,kBAA7B;AACA9E,gBAAgB,CAACjB,YAAjB,GAAgCA,YAAhC","sourcesContent":["// Copyright (c) 2015 - 2017 Uber Technologies, Inc.\n//\n// Permission is hereby granted, free of charge, to any person obtaining a copy\n// of this software and associated documentation files (the \"Software\"), to deal\n// in the Software without restriction, including without limitation the rights\n// to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n// copies of the Software, and to permit persons to whom the Software is\n// furnished to do so, subject to the following conditions:\n//\n// The above copyright notice and this permission notice shall be included in\n// all copies or substantial portions of the Software.\n//\n// THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\n// THE SOFTWARE.\n\nimport {Layer, log} from '@deck.gl/core';\nimport GL from 'luma.gl/constants';\nimport {Model, CylinderGeometry, fp64} from 'luma.gl';\nconst {fp64LowPart} = fp64;\n\nimport vs from './hexagon-cell-layer-vertex.glsl';\nimport fs from './hexagon-cell-layer-fragment.glsl';\n\nconst DEFAULT_COLOR = [255, 0, 255, 255];\n\nconst defaultProps = {\n  hexagonVertices: null,\n  radius: {type: 'number', min: 0, value: 1000},\n  angle: {type: 'number', value: 0},\n  coverage: {type: 'number', min: 0, max: 1, value: 1},\n  elevationScale: {type: 'number', min: 0, value: 1},\n  extruded: true,\n  fp64: false,\n\n  getCentroid: {type: 'accessor', value: x => x.centroid},\n  getColor: {type: 'accessor', value: DEFAULT_COLOR},\n  getElevation: {type: 'accessor', value: 1000},\n\n  lightSettings: {}\n};\n\nexport default class HexagonCellLayer extends Layer {\n  getShaders() {\n    const projectModule = this.use64bitProjection() ? 'project64' : 'project32';\n    return {vs, fs, modules: [projectModule, 'lighting', 'picking']};\n  }\n\n  /**\n   * DeckGL calls initializeState when GL context is available\n   * Essentially a deferred constructor\n   */\n  initializeState() {\n    const attributeManager = this.getAttributeManager();\n    /* eslint-disable max-len */\n    attributeManager.addInstanced({\n      instancePositions: {\n        size: 2,\n        transition: true,\n        accessor: 'getCentroid'\n      },\n      instanceElevations: {\n        size: 1,\n        transition: true,\n        accessor: 'getElevation'\n      },\n      instancePositions64xyLow: {\n        size: 2,\n        accessor: 'getCentroid',\n        update: this.calculateInstancePositions64xyLow\n      },\n      instanceColors: {\n        size: 4,\n        type: GL.UNSIGNED_BYTE,\n        transition: true,\n        accessor: 'getColor',\n        defaultValue: DEFAULT_COLOR\n      }\n    });\n    /* eslint-enable max-len */\n  }\n\n  updateState({props, oldProps, changeFlags}) {\n    super.updateState({props, oldProps, changeFlags});\n    if (props.fp64 !== oldProps.fp64) {\n      const {gl} = this.context;\n      if (this.state.model) {\n        this.state.model.delete();\n      }\n      this.setState({model: this._getModel(gl)});\n      this.getAttributeManager().invalidateAll();\n    }\n\n    if (\n      props.hexagonVertices !== oldProps.hexagonVertices ||\n      props.radius !== oldProps.radius ||\n      props.angle !== oldProps.angle\n    ) {\n      this.updateRadiusAngle();\n    }\n  }\n\n  updateRadiusAngle() {\n    let {angle, radius} = this.props;\n    const {hexagonVertices} = this.props;\n\n    if (Array.isArray(hexagonVertices)) {\n      if (hexagonVertices.length < 6) {\n        log.error('HexagonCellLayer: hexagonVertices needs to be an array of 6 points')();\n      }\n\n      // calculate angle and vertices from hexagonVertices if provided\n      const vertices = this.props.hexagonVertices;\n\n      const vertex0 = vertices[0];\n      const vertex3 = vertices[3];\n\n      // transform to space coordinates\n      const {viewport} = this.context;\n      const {pixelsPerMeter} = viewport.getDistanceScales();\n      const spaceCoord0 = this.projectFlat(vertex0);\n      const spaceCoord3 = this.projectFlat(vertex3);\n\n      // distance between two close centroids\n      const dx = spaceCoord0[0] - spaceCoord3[0];\n      const dy = spaceCoord0[1] - spaceCoord3[1];\n      const dxy = Math.sqrt(dx * dx + dy * dy);\n\n      // Calculate angle that the perpendicular hexagon vertex axis is tilted\n      angle = Math.acos(dx / dxy) * -Math.sign(dy) + Math.PI / 2;\n      radius = dxy / 2 / pixelsPerMeter[0];\n    }\n\n    this.setState({angle, radius});\n  }\n\n  getCylinderGeometry(radius) {\n    return new CylinderGeometry({\n      radius,\n      topRadius: radius,\n      bottomRadius: radius,\n      topCap: true,\n      bottomCap: true,\n      height: 1,\n      verticalAxis: 'z',\n      nradial: 6,\n      nvertical: 1\n    });\n  }\n\n  _getModel(gl) {\n    return new Model(\n      gl,\n      Object.assign({}, this.getShaders(), {\n        id: this.props.id,\n        geometry: this.getCylinderGeometry(1),\n        isInstanced: true,\n        shaderCache: this.context.shaderCache\n      })\n    );\n  }\n\n  draw({uniforms}) {\n    const {elevationScale, extruded, coverage} = this.props;\n    const {radius, angle} = this.state;\n\n    this.state.model.render(\n      Object.assign({}, uniforms, {\n        radius,\n        angle,\n        extruded,\n        coverage,\n        elevationScale\n      })\n    );\n  }\n\n  calculateInstancePositions64xyLow(attribute) {\n    const isFP64 = this.use64bitPositions();\n    attribute.constant = !isFP64;\n\n    if (!isFP64) {\n      attribute.value = new Float32Array(2);\n      return;\n    }\n\n    const {data, getCentroid} = this.props;\n    const {value} = attribute;\n    let i = 0;\n    for (const object of data) {\n      const position = getCentroid(object);\n      value[i++] = fp64LowPart(position[0]);\n      value[i++] = fp64LowPart(position[1]);\n    }\n  }\n}\n\nHexagonCellLayer.layerName = 'HexagonCellLayer';\nHexagonCellLayer.defaultProps = defaultProps;\n"],"file":"hexagon-cell-layer.js"}