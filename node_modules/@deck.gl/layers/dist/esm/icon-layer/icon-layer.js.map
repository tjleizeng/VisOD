{"version":3,"sources":["../../../src/icon-layer/icon-layer.js"],"names":["Layer","GL","Model","Geometry","fp64","fp64LowPart","vs","fs","IconManager","DEFAULT_COLOR","defaultProps","iconAtlas","iconMapping","type","value","async","sizeScale","min","getPosition","x","position","getIcon","icon","getColor","getSize","getAngle","IconLayer","projectModule","use64bitProjection","modules","state","iconManager","context","gl","onUpdate","_onUpdate","attributeManager","getAttributeManager","addInstanced","instancePositions","size","transition","accessor","instancePositions64xyLow","update","calculateInstancePositions64xyLow","instanceSizes","defaultValue","instanceOffsets","calculateInstanceOffsets","instanceIconFrames","calculateInstanceIconFrames","instanceColorModes","UNSIGNED_BYTE","calculateInstanceColorMode","instanceColors","instanceAngles","oldProps","props","changeFlags","data","iconMappingChanged","setProps","autoPacking","dataChanged","updateTriggersChanged","all","invalidate","model","delete","setState","_getModel","invalidateAll","uniforms","iconsTexture","getTexture","render","Object","assign","iconsTextureDim","width","height","positions","getShaders","id","geometry","drawMode","TRIANGLE_FAN","attributes","Float32Array","isInstanced","shaderCache","setNeedsRedraw","attribute","isFP64","use64bitPositions","constant","i","point","object","rect","getIconMapping","anchorX","anchorY","mapping","colorMode","mask","y","layerName"],"mappings":"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","sourcesContent":["// Copyright (c) 2015 - 2017 Uber Technologies, Inc.\n//\n// Permission is hereby granted, free of charge, to any person obtaining a copy\n// of this software and associated documentation files (the \"Software\"), to deal\n// in the Software without restriction, including without limitation the rights\n// to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n// copies of the Software, and to permit persons to whom the Software is\n// furnished to do so, subject to the following conditions:\n//\n// The above copyright notice and this permission notice shall be included in\n// all copies or substantial portions of the Software.\n//\n// THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\n// THE SOFTWARE.\nimport {Layer} from '@deck.gl/core';\nimport GL from 'luma.gl/constants';\nimport {Model, Geometry, fp64} from 'luma.gl';\nconst {fp64LowPart} = fp64;\n\nimport vs from './icon-layer-vertex.glsl';\nimport fs from './icon-layer-fragment.glsl';\nimport IconManager from './icon-manager';\n\nconst DEFAULT_COLOR = [0, 0, 0, 255];\n/*\n * @param {object} props\n * @param {Texture2D | string} props.iconAtlas - atlas image url or texture\n * @param {object} props.iconMapping - icon names mapped to icon definitions\n * @param {object} props.iconMapping[icon_name].x - x position of icon on the atlas image\n * @param {object} props.iconMapping[icon_name].y - y position of icon on the atlas image\n * @param {object} props.iconMapping[icon_name].width - width of icon on the atlas image\n * @param {object} props.iconMapping[icon_name].height - height of icon on the atlas image\n * @param {object} props.iconMapping[icon_name].anchorX - x anchor of icon on the atlas image,\n *   default to width / 2\n * @param {object} props.iconMapping[icon_name].anchorY - y anchor of icon on the atlas image,\n *   default to height / 2\n * @param {object} props.iconMapping[icon_name].mask - whether icon is treated as a transparency\n *   mask. If true, user defined color is applied. If false, original color from the image is\n *   applied. Default to false.\n * @param {number} props.size - icon size in pixels\n * @param {func} props.getPosition - returns anchor position of the icon, in [lng, lat, z]\n * @param {func} props.getIcon - returns icon name as a string\n * @param {func} props.getSize - returns icon size multiplier as a number\n * @param {func} props.getColor - returns color of the icon in [r, g, b, a]. Only works on icons\n *   with mask: true.\n * @param {func} props.getAngle - returns rotating angle (in degree) of the icon.\n */\nconst defaultProps = {\n  iconAtlas: null,\n  iconMapping: {type: 'object', value: {}, async: true},\n  sizeScale: {type: 'number', value: 1, min: 0},\n  fp64: false,\n\n  getPosition: {type: 'accessor', value: x => x.position},\n  getIcon: {type: 'accessor', value: x => x.icon},\n  getColor: {type: 'accessor', value: DEFAULT_COLOR},\n  getSize: {type: 'accessor', value: 1},\n  getAngle: {type: 'accessor', value: 0}\n};\n\nexport default class IconLayer extends Layer {\n  getShaders() {\n    const projectModule = this.use64bitProjection() ? 'project64' : 'project32';\n    return {vs, fs, modules: [projectModule, 'picking']};\n  }\n\n  initializeState() {\n    this.state = {\n      iconManager: new IconManager(this.context.gl, {onUpdate: () => this._onUpdate()})\n    };\n\n    const attributeManager = this.getAttributeManager();\n    /* eslint-disable max-len */\n    attributeManager.addInstanced({\n      instancePositions: {\n        size: 3,\n        transition: true,\n        accessor: 'getPosition'\n      },\n      instancePositions64xyLow: {\n        size: 2,\n        accessor: 'getPosition',\n        update: this.calculateInstancePositions64xyLow\n      },\n      instanceSizes: {\n        size: 1,\n        transition: true,\n        accessor: 'getSize',\n        defaultValue: 1\n      },\n      instanceOffsets: {size: 2, accessor: 'getIcon', update: this.calculateInstanceOffsets},\n      instanceIconFrames: {size: 4, accessor: 'getIcon', update: this.calculateInstanceIconFrames},\n      instanceColorModes: {\n        size: 1,\n        type: GL.UNSIGNED_BYTE,\n        accessor: 'getIcon',\n        update: this.calculateInstanceColorMode\n      },\n      instanceColors: {\n        size: 4,\n        type: GL.UNSIGNED_BYTE,\n        transition: true,\n        accessor: 'getColor',\n        defaultValue: DEFAULT_COLOR\n      },\n      instanceAngles: {\n        size: 1,\n        transition: true,\n        accessor: 'getAngle',\n        defaultValue: 0\n      }\n    });\n    /* eslint-enable max-len */\n  }\n\n  /* eslint-disable max-statements, complexity */\n  updateState({oldProps, props, changeFlags}) {\n    super.updateState({props, oldProps, changeFlags});\n\n    const attributeManager = this.getAttributeManager();\n    const {iconManager} = this.state;\n    const {iconAtlas, iconMapping, data, getIcon} = props;\n\n    let iconMappingChanged = false;\n\n    // prepacked iconAtlas from user\n    if (iconAtlas) {\n      if (oldProps.iconAtlas !== props.iconAtlas) {\n        iconManager.setProps({iconAtlas, autoPacking: false});\n      }\n\n      if (oldProps.iconMapping !== props.iconMapping) {\n        iconManager.setProps({iconMapping});\n        iconMappingChanged = true;\n      }\n    } else {\n      // otherwise, use autoPacking\n      iconManager.setProps({autoPacking: true});\n    }\n\n    if (\n      changeFlags.dataChanged ||\n      (changeFlags.updateTriggersChanged &&\n        (changeFlags.updateTriggersChanged.all || changeFlags.updateTriggersChanged.getIcon))\n    ) {\n      iconManager.setProps({data, getIcon});\n      iconMappingChanged = true;\n    }\n\n    if (iconMappingChanged) {\n      attributeManager.invalidate('instanceOffsets');\n      attributeManager.invalidate('instanceIconFrames');\n      attributeManager.invalidate('instanceColorModes');\n    }\n\n    if (props.fp64 !== oldProps.fp64) {\n      const {gl} = this.context;\n      if (this.state.model) {\n        this.state.model.delete();\n      }\n      this.setState({model: this._getModel(gl)});\n      attributeManager.invalidateAll();\n    }\n  }\n  /* eslint-enable max-statements, complexity */\n\n  draw({uniforms}) {\n    const {sizeScale} = this.props;\n    const {iconManager} = this.state;\n\n    const iconsTexture = iconManager.getTexture();\n    if (iconsTexture) {\n      this.state.model.render(\n        Object.assign({}, uniforms, {\n          iconsTexture,\n          iconsTextureDim: [iconsTexture.width, iconsTexture.height],\n          sizeScale\n        })\n      );\n    }\n  }\n\n  _getModel(gl) {\n    const positions = [-1, -1, 0, -1, 1, 0, 1, 1, 0, 1, -1, 0];\n\n    return new Model(\n      gl,\n      Object.assign({}, this.getShaders(), {\n        id: this.props.id,\n        geometry: new Geometry({\n          drawMode: GL.TRIANGLE_FAN,\n          attributes: {\n            positions: new Float32Array(positions)\n          }\n        }),\n        isInstanced: true,\n        shaderCache: this.context.shaderCache\n      })\n    );\n  }\n\n  _onUpdate() {\n    this.setNeedsRedraw();\n  }\n\n  calculateInstancePositions64xyLow(attribute) {\n    const isFP64 = this.use64bitPositions();\n    attribute.constant = !isFP64;\n\n    if (!isFP64) {\n      attribute.value = new Float32Array(2);\n      return;\n    }\n\n    const {data, getPosition} = this.props;\n    const {value} = attribute;\n    let i = 0;\n    for (const point of data) {\n      const position = getPosition(point);\n      value[i++] = fp64LowPart(position[0]);\n      value[i++] = fp64LowPart(position[1]);\n    }\n  }\n\n  calculateInstanceOffsets(attribute) {\n    const {data} = this.props;\n    const {iconManager} = this.state;\n    const {value} = attribute;\n    let i = 0;\n    for (const object of data) {\n      const rect = iconManager.getIconMapping(object);\n      value[i++] = rect.width / 2 - rect.anchorX || 0;\n      value[i++] = rect.height / 2 - rect.anchorY || 0;\n    }\n  }\n\n  calculateInstanceColorMode(attribute) {\n    const {data} = this.props;\n    const {iconManager} = this.state;\n    const {value} = attribute;\n    let i = 0;\n    for (const object of data) {\n      const mapping = iconManager.getIconMapping(object);\n      const colorMode = mapping.mask;\n      value[i++] = colorMode ? 1 : 0;\n    }\n  }\n\n  calculateInstanceIconFrames(attribute) {\n    const {data} = this.props;\n    const {iconManager} = this.state;\n    const {value} = attribute;\n    let i = 0;\n    for (const object of data) {\n      const rect = iconManager.getIconMapping(object);\n      value[i++] = rect.x || 0;\n      value[i++] = rect.y || 0;\n      value[i++] = rect.width || 0;\n      value[i++] = rect.height || 0;\n    }\n  }\n}\n\nIconLayer.layerName = 'IconLayer';\nIconLayer.defaultProps = defaultProps;\n"],"file":"icon-layer.js"}