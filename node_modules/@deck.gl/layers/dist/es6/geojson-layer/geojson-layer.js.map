{"version":3,"sources":["../../../src/geojson-layer/geojson-layer.js"],"names":["CompositeLayer","ScatterplotLayer","PathLayer","SolidPolygonLayer","getGeojsonFeatures","separateGeojsonFeatures","unwrapSourceFeature","unwrapSourceFeatureIndex","defaultLineColor","defaultFillColor","defaultProps","stroked","filled","extruded","wireframe","lineWidthScale","lineWidthMinPixels","lineWidthMaxPixels","Number","MAX_SAFE_INTEGER","lineJointRounded","lineMiterLimit","elevationScale","pointRadiusScale","pointRadiusMinPixels","pointRadiusMaxPixels","lineDashJustified","fp64","getLineColor","type","value","getFillColor","getRadius","getLineWidth","getLineDashArray","getElevation","lightSettings","getCoordinates","f","geometry","coordinates","unwrappingAccessor","accessor","feature","GeoJsonLayer","initializeState","state","features","updateState","oldProps","props","changeFlags","dataChanged","data","getPickingInfo","info","sourceLayer","Object","assign","object","index","renderLayers","pointFeatures","lineFeatures","polygonFeatures","polygonOutlineFeatures","transitions","updateTriggers","PolygonFillLayer","getSubLayerClass","PolygonStrokeLayer","LineStringsLayer","PointsLayer","polygonFillLayer","shouldRenderSubLayer","getPolygon","getSubLayerProps","id","polygonLineLayer","widthScale","widthMinPixels","widthMaxPixels","rounded","miterLimit","dashJustified","getColor","getWidth","getDashArray","getPath","pathLayer","pointLayer","radiusScale","radiusMinPixels","radiusMaxPixels","getPosition","layerName"],"mappings":"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","sourcesContent":["// Copyright (c) 2015 - 2017 Uber Technologies, Inc.\n//\n// Permission is hereby granted, free of charge, to any person obtaining a copy\n// of this software and associated documentation files (the \"Software\"), to deal\n// in the Software without restriction, including without limitation the rights\n// to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n// copies of the Software, and to permit persons to whom the Software is\n// furnished to do so, subject to the following conditions:\n//\n// The above copyright notice and this permission notice shall be included in\n// all copies or substantial portions of the Software.\n//\n// THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\n// THE SOFTWARE.\n\nimport {CompositeLayer} from '@deck.gl/core';\nimport ScatterplotLayer from '../scatterplot-layer/scatterplot-layer';\nimport PathLayer from '../path-layer/path-layer';\n// Use primitive layer to avoid \"Composite Composite\" layers for now\nimport SolidPolygonLayer from '../solid-polygon-layer/solid-polygon-layer';\n\nimport {\n  getGeojsonFeatures,\n  separateGeojsonFeatures,\n  unwrapSourceFeature,\n  unwrapSourceFeatureIndex\n} from './geojson';\n\nconst defaultLineColor = [0, 0, 0, 255];\nconst defaultFillColor = [0, 0, 0, 255];\n\nconst defaultProps = {\n  stroked: true,\n  filled: true,\n  extruded: false,\n  wireframe: false,\n\n  lineWidthScale: 1,\n  lineWidthMinPixels: 0,\n  lineWidthMaxPixels: Number.MAX_SAFE_INTEGER,\n  lineJointRounded: false,\n  lineMiterLimit: 4,\n\n  elevationScale: 1,\n\n  pointRadiusScale: 1,\n  pointRadiusMinPixels: 0, //  min point radius in pixels\n  pointRadiusMaxPixels: Number.MAX_SAFE_INTEGER, // max point radius in pixels\n\n  lineDashJustified: false,\n  fp64: false,\n\n  // Line and polygon outline color\n  getLineColor: {type: 'accessor', value: defaultLineColor},\n  // Point and polygon fill color\n  getFillColor: {type: 'accessor', value: defaultFillColor},\n  // Point radius\n  getRadius: {type: 'accessor', value: 1},\n  // Line and polygon outline accessors\n  getLineWidth: {type: 'accessor', value: 1},\n  // Line dash array accessor\n  getLineDashArray: {type: 'accessor', value: [0, 0]},\n  // Polygon extrusion accessor\n  getElevation: {type: 'accessor', value: 1000},\n  // Optional settings for 'lighting' shader module\n  lightSettings: {}\n};\n\nfunction getCoordinates(f) {\n  return f.geometry.coordinates;\n}\n\n/**\n * Unwraps the real source feature passed into props and passes as the argument to `accessor`.\n */\nfunction unwrappingAccessor(accessor) {\n  if (typeof accessor !== 'function') return accessor;\n\n  return feature => accessor(unwrapSourceFeature(feature));\n}\n\nexport default class GeoJsonLayer extends CompositeLayer {\n  initializeState() {\n    this.state = {\n      features: {}\n    };\n  }\n\n  updateState({oldProps, props, changeFlags}) {\n    if (changeFlags.dataChanged) {\n      const {data} = props;\n      const features = getGeojsonFeatures(data);\n      this.state.features = separateGeojsonFeatures(features);\n    }\n  }\n\n  getPickingInfo({info, sourceLayer}) {\n    // `info.index` is the index within the particular sub-layer\n    // We want to expose the index of the feature the user provided\n\n    return Object.assign(info, {\n      // override object with picked feature\n      object: info.object ? unwrapSourceFeature(info.object) : info.object,\n      index: info.object ? unwrapSourceFeatureIndex(info.object) : info.index\n    });\n  }\n\n  /* eslint-disable complexity */\n  renderLayers() {\n    const {features} = this.state;\n    const {pointFeatures, lineFeatures, polygonFeatures, polygonOutlineFeatures} = features;\n\n    // Layer composition props\n    const {stroked, filled, extruded, wireframe, lightSettings, transitions} = this.props;\n\n    // Rendering props underlying layer\n    const {\n      lineWidthScale,\n      lineWidthMinPixels,\n      lineWidthMaxPixels,\n      lineJointRounded,\n      lineMiterLimit,\n      pointRadiusScale,\n      pointRadiusMinPixels,\n      pointRadiusMaxPixels,\n      elevationScale,\n      lineDashJustified,\n      fp64\n    } = this.props;\n\n    // Accessor props for underlying layers\n    const {\n      getLineColor,\n      getFillColor,\n      getRadius,\n      getLineWidth,\n      getLineDashArray,\n      getElevation,\n      updateTriggers\n    } = this.props;\n\n    const PolygonFillLayer = this.getSubLayerClass('polygons-fill', SolidPolygonLayer);\n    const PolygonStrokeLayer = this.getSubLayerClass('polygons-stroke', PathLayer);\n    const LineStringsLayer = this.getSubLayerClass('line-strings', PathLayer);\n    const PointsLayer = this.getSubLayerClass('points', ScatterplotLayer);\n\n    // Filled Polygon Layer\n    const polygonFillLayer =\n      this.shouldRenderSubLayer('polygons-fill', polygonFeatures) &&\n      new PolygonFillLayer(\n        {\n          fp64,\n          extruded,\n          elevationScale,\n          filled,\n          wireframe,\n          lightSettings,\n\n          getElevation: unwrappingAccessor(getElevation),\n          getFillColor: unwrappingAccessor(getFillColor),\n          getLineColor: unwrappingAccessor(getLineColor),\n\n          transitions: transitions && {\n            getPolygon: transitions.geometry,\n            getElevation: transitions.getElevation,\n            getFillColor: transitions.getFillColor,\n            getLineColor: transitions.getLineColor\n          }\n        },\n        this.getSubLayerProps({\n          id: 'polygons-fill',\n          updateTriggers: {\n            getElevation: updateTriggers.getElevation,\n            getFillColor: updateTriggers.getFillColor,\n            getLineColor: updateTriggers.getLineColor\n          }\n        }),\n        {\n          data: polygonFeatures,\n          getPolygon: getCoordinates\n        }\n      );\n\n    const polygonLineLayer =\n      !extruded &&\n      stroked &&\n      this.shouldRenderSubLayer('polygons-stroke', polygonOutlineFeatures) &&\n      new PolygonStrokeLayer(\n        {\n          fp64,\n          widthScale: lineWidthScale,\n          widthMinPixels: lineWidthMinPixels,\n          widthMaxPixels: lineWidthMaxPixels,\n          rounded: lineJointRounded,\n          miterLimit: lineMiterLimit,\n          dashJustified: lineDashJustified,\n\n          getColor: unwrappingAccessor(getLineColor),\n          getWidth: unwrappingAccessor(getLineWidth),\n          getDashArray: unwrappingAccessor(getLineDashArray),\n\n          transitions: transitions && {\n            getPath: transitions.geometry,\n            getColor: transitions.getLineColor,\n            getWidth: transitions.getLineWidth\n          }\n        },\n        this.getSubLayerProps({\n          id: 'polygons-stroke',\n          updateTriggers: {\n            getColor: updateTriggers.getLineColor,\n            getWidth: updateTriggers.getLineWidth,\n            getDashArray: updateTriggers.getLineDashArray\n          }\n        }),\n        {\n          data: polygonOutlineFeatures,\n          getPath: getCoordinates\n        }\n      );\n\n    const pathLayer =\n      this.shouldRenderSubLayer('linestrings', lineFeatures) &&\n      new LineStringsLayer(\n        {\n          fp64,\n          widthScale: lineWidthScale,\n          widthMinPixels: lineWidthMinPixels,\n          widthMaxPixels: lineWidthMaxPixels,\n          rounded: lineJointRounded,\n          miterLimit: lineMiterLimit,\n          dashJustified: lineDashJustified,\n\n          getColor: unwrappingAccessor(getLineColor),\n          getWidth: unwrappingAccessor(getLineWidth),\n          getDashArray: unwrappingAccessor(getLineDashArray),\n\n          transitions: transitions && {\n            getPath: transitions.geometry,\n            getColor: transitions.getLineColor,\n            getWidth: transitions.getLineWidth\n          }\n        },\n        this.getSubLayerProps({\n          id: 'line-strings',\n          updateTriggers: {\n            getColor: updateTriggers.getLineColor,\n            getWidth: updateTriggers.getLineWidth,\n            getDashArray: updateTriggers.getLineDashArray\n          }\n        }),\n        {\n          data: lineFeatures,\n          getPath: getCoordinates\n        }\n      );\n\n    const pointLayer =\n      this.shouldRenderSubLayer('points', pointFeatures) &&\n      new PointsLayer(\n        {\n          fp64,\n          stroked,\n          filled,\n          radiusScale: pointRadiusScale,\n          radiusMinPixels: pointRadiusMinPixels,\n          radiusMaxPixels: pointRadiusMaxPixels,\n          lineWidthScale,\n          lineWidthMinPixels,\n          lineWidthMaxPixels,\n\n          getFillColor: unwrappingAccessor(getFillColor),\n          getLineColor: unwrappingAccessor(getLineColor),\n          getRadius: unwrappingAccessor(getRadius),\n          getLineWidth: unwrappingAccessor(getLineWidth),\n\n          transitions: transitions && {\n            getPosition: transitions.geometry,\n            getFillColor: transitions.getFillColor,\n            getLineColor: transitions.getLineColor,\n            getRadius: transitions.getRadius,\n            getLineWidth: transitions.getLineWidth\n          }\n        },\n        this.getSubLayerProps({\n          id: 'points',\n          updateTriggers: {\n            getFillColor: updateTriggers.getFillColor,\n            getLineColor: updateTriggers.getLineColor,\n            getRadius: updateTriggers.getRadius,\n            getLineWidth: updateTriggers.getLineWidth\n          }\n        }),\n        {\n          data: pointFeatures,\n          getPosition: getCoordinates\n        }\n      );\n\n    return [\n      // If not extruded: flat fill layer is drawn below outlines\n      !extruded && polygonFillLayer,\n      polygonLineLayer,\n      pathLayer,\n      pointLayer,\n      // If extruded: draw fill layer last for correct blending behavior\n      extruded && polygonFillLayer\n    ];\n  }\n  /* eslint-enable complexity */\n}\n\nGeoJsonLayer.layerName = 'GeoJsonLayer';\nGeoJsonLayer.defaultProps = defaultProps;\n"],"file":"geojson-layer.js"}