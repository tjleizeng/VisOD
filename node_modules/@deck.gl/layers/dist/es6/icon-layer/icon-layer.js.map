{"version":3,"sources":["../../../src/icon-layer/icon-layer.js"],"names":["Layer","GL","Model","Geometry","fp64","fp64LowPart","vs","fs","IconManager","DEFAULT_COLOR","defaultProps","iconAtlas","iconMapping","type","value","async","sizeScale","min","getPosition","x","position","getIcon","icon","getColor","getSize","getAngle","IconLayer","getShaders","projectModule","use64bitProjection","modules","initializeState","state","iconManager","context","gl","onUpdate","_onUpdate","attributeManager","getAttributeManager","addInstanced","instancePositions","size","transition","accessor","instancePositions64xyLow","update","calculateInstancePositions64xyLow","instanceSizes","defaultValue","instanceOffsets","calculateInstanceOffsets","instanceIconFrames","calculateInstanceIconFrames","instanceColorModes","UNSIGNED_BYTE","calculateInstanceColorMode","instanceColors","instanceAngles","updateState","oldProps","props","changeFlags","data","iconMappingChanged","setProps","autoPacking","dataChanged","updateTriggersChanged","all","invalidate","model","delete","setState","_getModel","invalidateAll","draw","uniforms","iconsTexture","getTexture","render","Object","assign","iconsTextureDim","width","height","positions","id","geometry","drawMode","TRIANGLE_FAN","attributes","Float32Array","isInstanced","shaderCache","setNeedsRedraw","attribute","isFP64","use64bitPositions","constant","i","point","object","rect","getIconMapping","anchorX","anchorY","mapping","colorMode","mask","y","layerName"],"mappings":"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","sourcesContent":["// Copyright (c) 2015 - 2017 Uber Technologies, Inc.\n//\n// Permission is hereby granted, free of charge, to any person obtaining a copy\n// of this software and associated documentation files (the \"Software\"), to deal\n// in the Software without restriction, including without limitation the rights\n// to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n// copies of the Software, and to permit persons to whom the Software is\n// furnished to do so, subject to the following conditions:\n//\n// The above copyright notice and this permission notice shall be included in\n// all copies or substantial portions of the Software.\n//\n// THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\n// THE SOFTWARE.\nimport {Layer} from '@deck.gl/core';\nimport GL from 'luma.gl/constants';\nimport {Model, Geometry, fp64} from 'luma.gl';\nconst {fp64LowPart} = fp64;\n\nimport vs from './icon-layer-vertex.glsl';\nimport fs from './icon-layer-fragment.glsl';\nimport IconManager from './icon-manager';\n\nconst DEFAULT_COLOR = [0, 0, 0, 255];\n/*\n * @param {object} props\n * @param {Texture2D | string} props.iconAtlas - atlas image url or texture\n * @param {object} props.iconMapping - icon names mapped to icon definitions\n * @param {object} props.iconMapping[icon_name].x - x position of icon on the atlas image\n * @param {object} props.iconMapping[icon_name].y - y position of icon on the atlas image\n * @param {object} props.iconMapping[icon_name].width - width of icon on the atlas image\n * @param {object} props.iconMapping[icon_name].height - height of icon on the atlas image\n * @param {object} props.iconMapping[icon_name].anchorX - x anchor of icon on the atlas image,\n *   default to width / 2\n * @param {object} props.iconMapping[icon_name].anchorY - y anchor of icon on the atlas image,\n *   default to height / 2\n * @param {object} props.iconMapping[icon_name].mask - whether icon is treated as a transparency\n *   mask. If true, user defined color is applied. If false, original color from the image is\n *   applied. Default to false.\n * @param {number} props.size - icon size in pixels\n * @param {func} props.getPosition - returns anchor position of the icon, in [lng, lat, z]\n * @param {func} props.getIcon - returns icon name as a string\n * @param {func} props.getSize - returns icon size multiplier as a number\n * @param {func} props.getColor - returns color of the icon in [r, g, b, a]. Only works on icons\n *   with mask: true.\n * @param {func} props.getAngle - returns rotating angle (in degree) of the icon.\n */\nconst defaultProps = {\n  iconAtlas: null,\n  iconMapping: {type: 'object', value: {}, async: true},\n  sizeScale: {type: 'number', value: 1, min: 0},\n  fp64: false,\n\n  getPosition: {type: 'accessor', value: x => x.position},\n  getIcon: {type: 'accessor', value: x => x.icon},\n  getColor: {type: 'accessor', value: DEFAULT_COLOR},\n  getSize: {type: 'accessor', value: 1},\n  getAngle: {type: 'accessor', value: 0}\n};\n\nexport default class IconLayer extends Layer {\n  getShaders() {\n    const projectModule = this.use64bitProjection() ? 'project64' : 'project32';\n    return {vs, fs, modules: [projectModule, 'picking']};\n  }\n\n  initializeState() {\n    this.state = {\n      iconManager: new IconManager(this.context.gl, {onUpdate: () => this._onUpdate()})\n    };\n\n    const attributeManager = this.getAttributeManager();\n    /* eslint-disable max-len */\n    attributeManager.addInstanced({\n      instancePositions: {\n        size: 3,\n        transition: true,\n        accessor: 'getPosition'\n      },\n      instancePositions64xyLow: {\n        size: 2,\n        accessor: 'getPosition',\n        update: this.calculateInstancePositions64xyLow\n      },\n      instanceSizes: {\n        size: 1,\n        transition: true,\n        accessor: 'getSize',\n        defaultValue: 1\n      },\n      instanceOffsets: {size: 2, accessor: 'getIcon', update: this.calculateInstanceOffsets},\n      instanceIconFrames: {size: 4, accessor: 'getIcon', update: this.calculateInstanceIconFrames},\n      instanceColorModes: {\n        size: 1,\n        type: GL.UNSIGNED_BYTE,\n        accessor: 'getIcon',\n        update: this.calculateInstanceColorMode\n      },\n      instanceColors: {\n        size: 4,\n        type: GL.UNSIGNED_BYTE,\n        transition: true,\n        accessor: 'getColor',\n        defaultValue: DEFAULT_COLOR\n      },\n      instanceAngles: {\n        size: 1,\n        transition: true,\n        accessor: 'getAngle',\n        defaultValue: 0\n      }\n    });\n    /* eslint-enable max-len */\n  }\n\n  /* eslint-disable max-statements, complexity */\n  updateState({oldProps, props, changeFlags}) {\n    super.updateState({props, oldProps, changeFlags});\n\n    const attributeManager = this.getAttributeManager();\n    const {iconManager} = this.state;\n    const {iconAtlas, iconMapping, data, getIcon} = props;\n\n    let iconMappingChanged = false;\n\n    // prepacked iconAtlas from user\n    if (iconAtlas) {\n      if (oldProps.iconAtlas !== props.iconAtlas) {\n        iconManager.setProps({iconAtlas, autoPacking: false});\n      }\n\n      if (oldProps.iconMapping !== props.iconMapping) {\n        iconManager.setProps({iconMapping});\n        iconMappingChanged = true;\n      }\n    } else {\n      // otherwise, use autoPacking\n      iconManager.setProps({autoPacking: true});\n    }\n\n    if (\n      changeFlags.dataChanged ||\n      (changeFlags.updateTriggersChanged &&\n        (changeFlags.updateTriggersChanged.all || changeFlags.updateTriggersChanged.getIcon))\n    ) {\n      iconManager.setProps({data, getIcon});\n      iconMappingChanged = true;\n    }\n\n    if (iconMappingChanged) {\n      attributeManager.invalidate('instanceOffsets');\n      attributeManager.invalidate('instanceIconFrames');\n      attributeManager.invalidate('instanceColorModes');\n    }\n\n    if (props.fp64 !== oldProps.fp64) {\n      const {gl} = this.context;\n      if (this.state.model) {\n        this.state.model.delete();\n      }\n      this.setState({model: this._getModel(gl)});\n      attributeManager.invalidateAll();\n    }\n  }\n  /* eslint-enable max-statements, complexity */\n\n  draw({uniforms}) {\n    const {sizeScale} = this.props;\n    const {iconManager} = this.state;\n\n    const iconsTexture = iconManager.getTexture();\n    if (iconsTexture) {\n      this.state.model.render(\n        Object.assign({}, uniforms, {\n          iconsTexture,\n          iconsTextureDim: [iconsTexture.width, iconsTexture.height],\n          sizeScale\n        })\n      );\n    }\n  }\n\n  _getModel(gl) {\n    const positions = [-1, -1, 0, -1, 1, 0, 1, 1, 0, 1, -1, 0];\n\n    return new Model(\n      gl,\n      Object.assign({}, this.getShaders(), {\n        id: this.props.id,\n        geometry: new Geometry({\n          drawMode: GL.TRIANGLE_FAN,\n          attributes: {\n            positions: new Float32Array(positions)\n          }\n        }),\n        isInstanced: true,\n        shaderCache: this.context.shaderCache\n      })\n    );\n  }\n\n  _onUpdate() {\n    this.setNeedsRedraw();\n  }\n\n  calculateInstancePositions64xyLow(attribute) {\n    const isFP64 = this.use64bitPositions();\n    attribute.constant = !isFP64;\n\n    if (!isFP64) {\n      attribute.value = new Float32Array(2);\n      return;\n    }\n\n    const {data, getPosition} = this.props;\n    const {value} = attribute;\n    let i = 0;\n    for (const point of data) {\n      const position = getPosition(point);\n      value[i++] = fp64LowPart(position[0]);\n      value[i++] = fp64LowPart(position[1]);\n    }\n  }\n\n  calculateInstanceOffsets(attribute) {\n    const {data} = this.props;\n    const {iconManager} = this.state;\n    const {value} = attribute;\n    let i = 0;\n    for (const object of data) {\n      const rect = iconManager.getIconMapping(object);\n      value[i++] = rect.width / 2 - rect.anchorX || 0;\n      value[i++] = rect.height / 2 - rect.anchorY || 0;\n    }\n  }\n\n  calculateInstanceColorMode(attribute) {\n    const {data} = this.props;\n    const {iconManager} = this.state;\n    const {value} = attribute;\n    let i = 0;\n    for (const object of data) {\n      const mapping = iconManager.getIconMapping(object);\n      const colorMode = mapping.mask;\n      value[i++] = colorMode ? 1 : 0;\n    }\n  }\n\n  calculateInstanceIconFrames(attribute) {\n    const {data} = this.props;\n    const {iconManager} = this.state;\n    const {value} = attribute;\n    let i = 0;\n    for (const object of data) {\n      const rect = iconManager.getIconMapping(object);\n      value[i++] = rect.x || 0;\n      value[i++] = rect.y || 0;\n      value[i++] = rect.width || 0;\n      value[i++] = rect.height || 0;\n    }\n  }\n}\n\nIconLayer.layerName = 'IconLayer';\nIconLayer.defaultProps = defaultProps;\n"],"file":"icon-layer.js"}