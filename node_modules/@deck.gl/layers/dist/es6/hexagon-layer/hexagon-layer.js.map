{"version":3,"sources":["../../../src/hexagon-layer/hexagon-layer.js"],"names":["CompositeLayer","log","experimental","HexagonCellLayer","BinSorter","getQuantizeScale","getLinearScale","defaultColorRange","pointToHexbin","nop","defaultProps","colorDomain","colorRange","getColorValue","type","value","points","length","lowerPercentile","min","max","upperPercentile","onSetColorDomain","elevationDomain","elevationRange","getElevationValue","elevationLowerPercentile","elevationUpperPercentile","elevationScale","onSetElevationDomain","radius","coverage","extruded","hexagonAggregator","getPosition","x","position","fp64","lightSettings","HexagonLayer","initializeState","state","hexagons","hexagonVertices","sortedColorBins","sortedElevationBins","colorValueDomain","elevationValueDomain","colorScaleFunc","elevationScaleFunc","dimensionUpdaters","getDimensionUpdaters","updateState","oldProps","props","changeFlags","dimensionChanges","getDimensionChanges","dataChanged","needsReProjectPoints","getHexagons","forEach","f","apply","getColor","id","triggers","updater","getSortedColorBins","getColorValueDomain","getColorScale","getElevation","getSortedElevationBins","getElevationValueDomain","getElevationScale","updaters","dimensionKey","needUpdate","find","item","some","t","push","viewport","context","setState","getSortedBins","getPickingInfo","info","isPicked","picked","index","object","cell","colorValue","binMap","elevationValue","Object","assign","Boolean","getUpdateTriggers","updateTriggers","step","prop","getValueDomain","warn","getValueRange","_onGetSublayerColor","cv","isColorValueInDomain","color","Number","isFinite","_onGetSublayerElevation","ev","isElevationValueInDomain","renderLayers","transitions","SubLayerClass","getSubLayerClass","angle","Math","PI","bind","getSubLayerProps","data","layerName"],"mappings":"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","sourcesContent":["// Copyright (c) 2015 - 2017 Uber Technologies, Inc.\n//\n// Permission is hereby granted, free of charge, to any person obtaining a copy\n// of this software and associated documentation files (the \"Software\"), to deal\n// in the Software without restriction, including without limitation the rights\n// to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n// copies of the Software, and to permit persons to whom the Software is\n// furnished to do so, subject to the following conditions:\n//\n// The above copyright notice and this permission notice shall be included in\n// all copies or substantial portions of the Software.\n//\n// THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\n// THE SOFTWARE.\n\nimport {CompositeLayer, log, experimental} from '@deck.gl/core';\nimport HexagonCellLayer from '../hexagon-cell-layer/hexagon-cell-layer';\n\nconst {BinSorter, getQuantizeScale, getLinearScale, defaultColorRange} = experimental;\n\nimport {pointToHexbin} from './hexagon-aggregator';\n\nfunction nop() {}\n\nconst defaultProps = {\n  // color\n  colorDomain: null,\n  colorRange: defaultColorRange,\n  getColorValue: {type: 'accessor', value: points => points.length},\n  lowerPercentile: {type: 'number', value: 0, min: 0, max: 100},\n  upperPercentile: {type: 'number', value: 100, min: 0, max: 100},\n  onSetColorDomain: nop,\n\n  // elevation\n  elevationDomain: null,\n  elevationRange: [0, 1000],\n  getElevationValue: {type: 'accessor', value: points => points.length},\n  elevationLowerPercentile: {type: 'number', value: 0, min: 0, max: 100},\n  elevationUpperPercentile: {type: 'number', value: 100, min: 0, max: 100},\n  elevationScale: {type: 'number', min: 0, value: 1},\n  onSetElevationDomain: nop,\n\n  radius: {type: 'number', value: 1000, min: 1},\n  coverage: {type: 'number', min: 0, max: 1, value: 1},\n  extruded: false,\n  hexagonAggregator: pointToHexbin,\n  getPosition: {type: 'accessor', value: x => x.position},\n  fp64: false,\n  // Optional settings for 'lighting' shader module\n  lightSettings: {}\n};\n\nexport default class HexagonLayer extends CompositeLayer {\n  initializeState() {\n    this.state = {\n      hexagons: [],\n      hexagonVertices: null,\n      sortedColorBins: null,\n      sortedElevationBins: null,\n      colorValueDomain: null,\n      elevationValueDomain: null,\n      colorScaleFunc: nop,\n      elevationScaleFunc: nop,\n      dimensionUpdaters: this.getDimensionUpdaters()\n    };\n  }\n\n  updateState({oldProps, props, changeFlags}) {\n    const dimensionChanges = this.getDimensionChanges(oldProps, props);\n\n    if (changeFlags.dataChanged || this.needsReProjectPoints(oldProps, props)) {\n      // project data into hexagons, and get sortedColorBins\n      this.getHexagons();\n    } else if (dimensionChanges) {\n      dimensionChanges.forEach(f => typeof f === 'function' && f.apply(this));\n    }\n  }\n\n  needsReProjectPoints(oldProps, props) {\n    return (\n      oldProps.radius !== props.radius || oldProps.hexagonAggregator !== props.hexagonAggregator\n    );\n  }\n\n  getDimensionUpdaters() {\n    // dimension updaters are sequential,\n    // if the first one needs to be called, the 2nd and 3rd one will automatically\n    // be called. e.g. if ColorValue needs to be updated, getColorValueDomain and getColorScale\n    // will automatically be called\n    return {\n      getColor: [\n        {\n          id: 'value',\n          triggers: ['getColorValue'],\n          updater: this.getSortedColorBins\n        },\n        {\n          id: 'domain',\n          triggers: ['lowerPercentile', 'upperPercentile'],\n          updater: this.getColorValueDomain\n        },\n        {\n          id: 'scaleFunc',\n          triggers: ['colorDomain', 'colorRange'],\n          updater: this.getColorScale\n        }\n      ],\n      getElevation: [\n        {\n          id: 'value',\n          triggers: ['getElevationValue'],\n          updater: this.getSortedElevationBins\n        },\n        {\n          id: 'domain',\n          triggers: ['elevationLowerPercentile', 'elevationUpperPercentile'],\n          updater: this.getElevationValueDomain\n        },\n        {\n          id: 'scaleFunc',\n          triggers: ['elevationDomain', 'elevationRange'],\n          updater: this.getElevationScale\n        }\n      ]\n    };\n  }\n\n  getDimensionChanges(oldProps, props) {\n    const {dimensionUpdaters} = this.state;\n    const updaters = [];\n\n    // get dimension to be updated\n    for (const dimensionKey in dimensionUpdaters) {\n      // return the first triggered updater for each dimension\n      const needUpdate = dimensionUpdaters[dimensionKey].find(item =>\n        item.triggers.some(t => oldProps[t] !== props[t])\n      );\n\n      if (needUpdate) {\n        updaters.push(needUpdate.updater);\n      }\n    }\n\n    return updaters.length ? updaters : null;\n  }\n\n  getHexagons() {\n    const {hexagonAggregator} = this.props;\n    const {viewport} = this.context;\n    const {hexagons, hexagonVertices} = hexagonAggregator(this.props, viewport);\n    this.setState({hexagons, hexagonVertices});\n    this.getSortedBins();\n  }\n\n  getPickingInfo({info}) {\n    const {sortedColorBins, sortedElevationBins} = this.state;\n    const isPicked = info.picked && info.index > -1;\n\n    let object = null;\n    if (isPicked) {\n      const cell = this.state.hexagons[info.index];\n\n      const colorValue =\n        sortedColorBins.binMap[cell.index] && sortedColorBins.binMap[cell.index].value;\n      const elevationValue =\n        sortedElevationBins.binMap[cell.index] && sortedElevationBins.binMap[cell.index].value;\n\n      object = Object.assign(\n        {\n          colorValue,\n          elevationValue\n        },\n        cell\n      );\n    }\n\n    // add bin colorValue and elevationValue to info\n    return Object.assign(info, {\n      picked: Boolean(object),\n      // override object with picked cell\n      object\n    });\n  }\n\n  getUpdateTriggers() {\n    const {dimensionUpdaters} = this.state;\n\n    // merge all dimension triggers\n    const updateTriggers = {};\n\n    for (const dimensionKey in dimensionUpdaters) {\n      updateTriggers[dimensionKey] = {};\n\n      for (const step of dimensionUpdaters[dimensionKey]) {\n        step.triggers.forEach(prop => {\n          updateTriggers[dimensionKey][prop] = this.props[prop];\n        });\n      }\n    }\n\n    return updateTriggers;\n  }\n\n  getValueDomain() {\n    this.getColorValueDomain();\n    this.getElevationValueDomain();\n  }\n\n  getSortedBins() {\n    this.getSortedColorBins();\n    this.getSortedElevationBins();\n  }\n\n  getSortedColorBins() {\n    const {getColorValue} = this.props;\n    const sortedColorBins = new BinSorter(this.state.hexagons || [], getColorValue);\n\n    this.setState({sortedColorBins});\n    this.getColorValueDomain();\n  }\n\n  getSortedElevationBins() {\n    const {getElevationValue} = this.props;\n    const sortedElevationBins = new BinSorter(this.state.hexagons || [], getElevationValue);\n    this.setState({sortedElevationBins});\n    this.getElevationValueDomain();\n  }\n\n  getColorValueDomain() {\n    const {lowerPercentile, upperPercentile, onSetColorDomain} = this.props;\n\n    if (lowerPercentile > upperPercentile) {\n      log.warn('HexagonLayer: lowerPercentile is bigger than upperPercentile')();\n    }\n\n    this.state.colorValueDomain = this.state.sortedColorBins.getValueRange([\n      lowerPercentile,\n      upperPercentile\n    ]);\n\n    if (typeof onSetColorDomain === 'function') {\n      onSetColorDomain(this.state.colorValueDomain);\n    }\n\n    this.getColorScale();\n  }\n\n  getElevationValueDomain() {\n    const {elevationLowerPercentile, elevationUpperPercentile, onSetElevationDomain} = this.props;\n\n    this.state.elevationValueDomain = this.state.sortedElevationBins.getValueRange([\n      elevationLowerPercentile,\n      elevationUpperPercentile\n    ]);\n\n    if (typeof onSetElevationDomain === 'function') {\n      onSetElevationDomain(this.state.elevationValueDomain);\n    }\n\n    this.getElevationScale();\n  }\n\n  getColorScale() {\n    const {colorRange} = this.props;\n    const colorDomain = this.props.colorDomain || this.state.colorValueDomain;\n\n    this.state.colorScaleFunc = getQuantizeScale(colorDomain, colorRange);\n  }\n\n  getElevationScale() {\n    const {elevationRange} = this.props;\n    const elevationDomain = this.props.elevationDomain || this.state.elevationValueDomain;\n\n    this.state.elevationScaleFunc = getLinearScale(elevationDomain, elevationRange);\n  }\n\n  _onGetSublayerColor(cell) {\n    const {sortedColorBins, colorScaleFunc, colorValueDomain} = this.state;\n\n    const cv = sortedColorBins.binMap[cell.index] && sortedColorBins.binMap[cell.index].value;\n    const colorDomain = this.props.colorDomain || colorValueDomain;\n\n    const isColorValueInDomain = cv >= colorDomain[0] && cv <= colorDomain[colorDomain.length - 1];\n\n    // if cell value is outside domain, set alpha to 0\n    const color = isColorValueInDomain ? colorScaleFunc(cv) : [0, 0, 0, 0];\n\n    // add alpha to color if not defined in colorRange\n    color[3] = Number.isFinite(color[3]) ? color[3] : 255;\n\n    return color;\n  }\n\n  _onGetSublayerElevation(cell) {\n    const {sortedElevationBins, elevationScaleFunc, elevationValueDomain} = this.state;\n    const ev =\n      sortedElevationBins.binMap[cell.index] && sortedElevationBins.binMap[cell.index].value;\n\n    const elevationDomain = this.props.elevationDomain || elevationValueDomain;\n\n    const isElevationValueInDomain =\n      ev >= elevationDomain[0] && ev <= elevationDomain[elevationDomain.length - 1];\n\n    // if cell value is outside domain, set elevation to -1\n    return isElevationValueInDomain ? elevationScaleFunc(ev) : -1;\n  }\n\n  renderLayers() {\n    const {\n      radius,\n      elevationScale,\n      extruded,\n      coverage,\n      lightSettings,\n      fp64,\n      transitions\n    } = this.props;\n\n    const SubLayerClass = this.getSubLayerClass('hexagon-cell', HexagonCellLayer);\n\n    return new SubLayerClass(\n      {\n        fp64,\n        radius,\n        elevationScale,\n        angle: Math.PI / 2,\n        extruded,\n        coverage,\n        lightSettings,\n\n        getColor: this._onGetSublayerColor.bind(this),\n        getElevation: this._onGetSublayerElevation.bind(this),\n        transitions: transitions && {\n          getColor: transitions.getColorValue,\n          getElevation: transitions.getElevationValue\n        }\n      },\n      this.getSubLayerProps({\n        id: 'hexagon-cell',\n        updateTriggers: this.getUpdateTriggers()\n      }),\n      {\n        data: this.state.hexagons,\n        hexagonVertices: this.state.hexagonVertices\n      }\n    );\n  }\n}\n\nHexagonLayer.layerName = 'HexagonLayer';\nHexagonLayer.defaultProps = defaultProps;\n"],"file":"hexagon-layer.js"}