{"version":3,"sources":["../../../src/screen-grid-layer/screen-grid-layer.js"],"names":["Layer","experimental","WebMercatorViewport","_GPUGridAggregator","GPUGridAggregator","AGGREGATION_OPERATION","log","defaultColorRange","GL","Model","Geometry","Buffer","isWebGL2","vs","vs_WebGL1","fs","fs_WebGL1","DEFAULT_MINCOLOR","DEFAULT_MAXCOLOR","AGGREGATION_DATA_UBO_INDEX","COLOR_PROPS","defaultProps","cellSizePixels","value","min","cellMarginPixels","max","colorDomain","colorRange","getPosition","type","d","position","getWeight","gpuAggregation","aggregation","ScreenGridLayer","getShaders","shaders","context","gl","modules","initializeState","attributeManager","getAttributeManager","addInstanced","instancePositions","size","update","calculateInstancePositions","instanceCounts","transition","accessor","calculateInstanceCounts","noAlloc","options","id","shaderCache","maxBuffer","_getMaxCountBuffer","weights","color","operation","SUM","needMax","setState","model","_getModel","gpuGridAggregator","aggregationResults","_setupUniformBuffer","shouldUpdateState","changeFlags","somethingChanged","updateState","opts","_updateUniforms","dataChanged","_processData","_getAggregationChangeFlags","_updateAggregation","draw","uniforms","props","parameters","minColor","maxColor","state","cellScale","shouldUseMinMax","maxWeight","layerUniforms","bind","target","UNIFORM_BUFFER","Object","assign","depthTest","depthMask","unbind","attribute","numInstances","viewport","width","height","numCol","i","x","y","Math","floor","aggregationBuffer","buffer","getPickingInfo","info","mode","index","aggregationData","getData","maxData","object","getAggregationData","pixelIndex","oldProps","cellSizeChanged","viewportChanged","geometry","drawMode","TRIANGLE_FAN","attributes","vertices","Float32Array","isInstanced","bytes","_getWeight","point","weight","Array","isArray","data","positions","colorWeights","push","values","programHandle","program","handle","uniformBlockIndex","getUniformBlockIndex","uniformBlockBinding","_shouldUseMinMax","deprecated","_updateGridParams","invalidateAll","toUpperCase","projectPoints","gridTransformMatrix","pixelProjectionMatrix","results","run","cellSize","useGPU","Number","isFinite","invalidate","newState","some","key","colorRangeUniform","forEach","margin","ceil","numRow","dataBytes","delete","FLOAT","instanced","layerName"],"mappings":"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","sourcesContent":["// Copyright (c) 2015 - 2017 Uber Technologies, Inc.\n//\n// Permission is hereby granted, free of charge, to any person obtaining a copy\n// of this software and associated documentation files (the \"Software\"), to deal\n// in the Software without restriction, including without limitation the rights\n// to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n// copies of the Software, and to permit persons to whom the Software is\n// furnished to do so, subject to the following conditions:\n//\n// The above copyright notice and this permission notice shall be included in\n// all copies or substantial portions of the Software.\n//\n// THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\n// THE SOFTWARE.\n\nimport {\n  Layer,\n  experimental,\n  WebMercatorViewport,\n  _GPUGridAggregator as GPUGridAggregator,\n  AGGREGATION_OPERATION,\n  log\n} from '@deck.gl/core';\nconst {defaultColorRange} = experimental;\n\nimport GL from 'luma.gl/constants';\nimport {Model, Geometry, Buffer, isWebGL2} from 'luma.gl';\n\nimport vs from './screen-grid-layer-vertex.glsl';\nimport vs_WebGL1 from './screen-grid-layer-vertex-webgl1.glsl';\nimport fs from './screen-grid-layer-fragment.glsl';\nimport fs_WebGL1 from './screen-grid-layer-fragment-webgl1.glsl';\n\nconst DEFAULT_MINCOLOR = [0, 0, 0, 0];\nconst DEFAULT_MAXCOLOR = [0, 255, 0, 255];\nconst AGGREGATION_DATA_UBO_INDEX = 0;\nconst COLOR_PROPS = [`minColor`, `maxColor`, `colorRange`, `colorDomain`];\n\nconst defaultProps = {\n  cellSizePixels: {value: 100, min: 1},\n  cellMarginPixels: {value: 2, min: 0, max: 5},\n\n  colorDomain: null,\n  colorRange: defaultColorRange,\n\n  getPosition: {type: 'accessor', value: d => d.position},\n  getWeight: {type: 'accessor', value: d => [1, 0, 0]},\n\n  gpuAggregation: true,\n  aggregation: 'SUM'\n};\n\nexport default class ScreenGridLayer extends Layer {\n  getShaders() {\n    const shaders = isWebGL2(this.context.gl) ? {vs, fs} : {vs: vs_WebGL1, fs: fs_WebGL1};\n    shaders.modules = ['picking'];\n    return shaders;\n  }\n\n  initializeState() {\n    const attributeManager = this.getAttributeManager();\n    const {gl} = this.context;\n\n    /* eslint-disable max-len */\n    attributeManager.addInstanced({\n      instancePositions: {size: 3, update: this.calculateInstancePositions},\n      instanceCounts: {\n        size: 4,\n        transition: true,\n        accessor: ['getPosition', 'getWeight'],\n        update: this.calculateInstanceCounts,\n        noAlloc: true\n      }\n    });\n    /* eslint-disable max-len */\n\n    const options = {\n      id: `${this.id}-aggregator`,\n      shaderCache: this.context.shaderCache\n    };\n    const maxBuffer = this._getMaxCountBuffer(gl);\n    const weights = {\n      color: {\n        size: 1,\n        operation: AGGREGATION_OPERATION.SUM,\n        needMax: true,\n        maxBuffer\n      }\n    };\n    this.setState({\n      model: this._getModel(gl),\n      gpuGridAggregator: new GPUGridAggregator(gl, options),\n      maxBuffer,\n      weights,\n      aggregationResults: null\n    });\n\n    this._setupUniformBuffer();\n  }\n\n  shouldUpdateState({changeFlags}) {\n    return changeFlags.somethingChanged;\n  }\n\n  updateState(opts) {\n    super.updateState(opts);\n\n    this._updateUniforms(opts);\n\n    if (opts.changeFlags.dataChanged) {\n      this._processData();\n    }\n\n    const changeFlags = this._getAggregationChangeFlags(opts);\n\n    if (changeFlags) {\n      this._updateAggregation(changeFlags);\n    }\n  }\n\n  draw({uniforms}) {\n    const {gl} = this.context;\n    const {parameters = {}} = this.props;\n    const minColor = this.props.minColor || DEFAULT_MINCOLOR;\n    const maxColor = this.props.maxColor || DEFAULT_MAXCOLOR;\n\n    // If colorDomain not specified we use default domain [1, maxCount]\n    // maxCount value will be deduced from aggregated buffer in the vertex shader.\n    const colorDomain = this.props.colorDomain || [1, 0];\n    const {model, maxBuffer, cellScale, shouldUseMinMax, colorRange, maxWeight} = this.state;\n    const layerUniforms = {\n      minColor,\n      maxColor,\n      cellScale,\n      colorRange,\n      colorDomain,\n      shouldUseMinMax\n    };\n\n    if (isWebGL2(gl)) {\n      maxBuffer.bind({target: GL.UNIFORM_BUFFER});\n    } else {\n      layerUniforms.maxWeight = maxWeight;\n    }\n    uniforms = Object.assign(layerUniforms, uniforms);\n    model.draw({\n      uniforms,\n      parameters: Object.assign(\n        {\n          depthTest: false,\n          depthMask: false\n        },\n        parameters\n      )\n    });\n    if (isWebGL2(gl)) {\n      maxBuffer.unbind();\n    }\n  }\n\n  calculateInstancePositions(attribute, {numInstances}) {\n    const {width, height} = this.context.viewport;\n    const {cellSizePixels} = this.props;\n    const {numCol} = this.state;\n    const {value, size} = attribute;\n\n    for (let i = 0; i < numInstances; i++) {\n      const x = i % numCol;\n      const y = Math.floor(i / numCol);\n      value[i * size + 0] = ((x * cellSizePixels) / width) * 2 - 1;\n      value[i * size + 1] = 1 - ((y * cellSizePixels) / height) * 2;\n      value[i * size + 2] = 0;\n    }\n  }\n\n  calculateInstanceCounts(attribute, {numInstances}) {\n    const {aggregationBuffer} = this.state;\n    attribute.update({\n      buffer: aggregationBuffer\n    });\n  }\n\n  getPickingInfo({info, mode}) {\n    const {index} = info;\n    if (index >= 0) {\n      const {aggregationResults} = this.state;\n\n      // Cache aggregationResults to avoid multiple buffer reads.\n      aggregationResults.aggregationData =\n        aggregationResults.aggregationData || this.state.aggregationBuffer.getData();\n      aggregationResults.maxData = aggregationResults.maxData || this.state.maxBuffer.getData();\n\n      const {aggregationData, maxData} = aggregationResults;\n      // Each instance (one cell) is aggregated into single pixel,\n      // Get current instance's aggregation details.\n      info.object = GPUGridAggregator.getAggregationData({\n        aggregationData,\n        maxData,\n        pixelIndex: index\n      });\n    }\n\n    return info;\n  }\n\n  // HELPER Methods\n\n  _getAggregationChangeFlags({oldProps, props, changeFlags}) {\n    const cellSizeChanged =\n      props.cellSizePixels !== oldProps.cellSizePixels ||\n      props.cellMarginPixels !== oldProps.cellMarginPixels;\n    const dataChanged = changeFlags.dataChanged || props.aggregation !== oldProps.aggregation;\n    const viewportChanged = changeFlags.viewportChanged;\n\n    if (cellSizeChanged || dataChanged || viewportChanged) {\n      return {cellSizeChanged, dataChanged, viewportChanged};\n    }\n\n    return null;\n  }\n\n  _getModel(gl) {\n    return new Model(\n      gl,\n      Object.assign({}, this.getShaders(), {\n        id: this.props.id,\n        geometry: new Geometry({\n          drawMode: GL.TRIANGLE_FAN,\n          attributes: {\n            vertices: new Float32Array([0, 0, 0, 1, 0, 0, 1, 1, 0, 0, 1, 0])\n          }\n        }),\n        isInstanced: true,\n        shaderCache: this.context.shaderCache\n      })\n    );\n  }\n\n  // Creates and returns a Uniform Buffer object to hold maxCount value.\n  _getMaxCountBuffer(gl) {\n    return new Buffer(gl, {\n      bytes: 4 * 4, // Four floats\n      size: 4,\n      index: AGGREGATION_DATA_UBO_INDEX\n    });\n  }\n\n  _getWeight(point) {\n    const {getWeight} = this.props;\n    const weight = getWeight(point);\n    if (!Array.isArray(weight)) {\n      // backward compitability\n      return [weight, 0, 0];\n    }\n    return weight;\n  }\n  // Process 'data' and build positions and weights Arrays.\n  _processData() {\n    const {data, getPosition} = this.props;\n    const positions = [];\n    const colorWeights = [];\n    const {weights} = this.state;\n\n    for (const point of data) {\n      const position = getPosition(point);\n      positions.push(position[0]);\n      positions.push(position[1]);\n      colorWeights.push(...this._getWeight(point));\n    }\n    weights.color.values = colorWeights;\n    this.setState({positions});\n  }\n\n  // Set a binding point for the aggregation uniform block index\n  _setupUniformBuffer() {\n    const gl = this.context.gl;\n    // For WebGL1, uniform buffer is not used.\n    if (!isWebGL2(gl)) {\n      return;\n    }\n    const programHandle = this.state.model.program.handle;\n\n    // TODO: Replace with luma.gl api when ready.\n    const uniformBlockIndex = gl.getUniformBlockIndex(programHandle, 'AggregationData');\n    gl.uniformBlockBinding(programHandle, uniformBlockIndex, AGGREGATION_DATA_UBO_INDEX);\n  }\n\n  _shouldUseMinMax() {\n    const {minColor, maxColor, colorDomain, colorRange} = this.props;\n    if (minColor || maxColor) {\n      log.deprecated('ScreenGridLayer props: minColor and maxColor', 'colorRange, colorDomain')();\n      return true;\n    }\n    // minColor and maxColor not supplied, check if colorRange or colorDomain supplied.\n    // NOTE: colorDomain and colorRange are experimental features, use them only when supplied.\n    if (colorDomain || colorRange) {\n      return false;\n    }\n    // None specified, use default minColor and maxColor\n    return true;\n  }\n\n  _updateAggregation(changeFlags) {\n    const attributeManager = this.getAttributeManager();\n    if (changeFlags.cellSizeChanged || changeFlags.viewportChanged) {\n      this._updateGridParams();\n      attributeManager.invalidateAll();\n    }\n    const {cellSizePixels, gpuAggregation} = this.props;\n\n    const {positions, weights} = this.state;\n    const {viewport} = this.context;\n\n    weights.color.operation =\n      AGGREGATION_OPERATION[this.props.aggregation.toUpperCase()] || AGGREGATION_OPERATION.SUM;\n\n    let projectPoints = false;\n    let gridTransformMatrix = null;\n\n    if (this.context.viewport instanceof WebMercatorViewport) {\n      // project points from world space (lng/lat) to viewport (screen) space.\n      projectPoints = true;\n    } else {\n      projectPoints = false;\n      // Use pixelProjectionMatrix to transform points to viewport (screen) space.\n      gridTransformMatrix = viewport.pixelProjectionMatrix;\n    }\n    const results = this.state.gpuGridAggregator.run({\n      positions,\n      weights,\n      cellSize: [cellSizePixels, cellSizePixels],\n      viewport,\n      changeFlags,\n      useGPU: gpuAggregation,\n      projectPoints,\n      gridTransformMatrix\n    });\n\n    const maxWeight =\n      results.color.maxData && Number.isFinite(results.color.maxData[0])\n        ? results.color.maxData[0]\n        : 0;\n    // Under WebGL1 results are available in JS Arrays\n    // For WebGL2, data is in Buffer objects and will be read on demand (like picking)\n    const aggregationResults = {\n      aggregationData: results.color.aggregationData,\n      maxData: results.color.maxData\n    };\n    this.setState({\n      aggregationResults,\n      maxWeight // uniform to use under WebGL1\n    });\n\n    attributeManager.invalidate('instanceCounts');\n  }\n\n  _updateUniforms({oldProps, props, changeFlags}) {\n    const newState = {};\n    if (COLOR_PROPS.some(key => oldProps[key] !== props[key])) {\n      newState.shouldUseMinMax = this._shouldUseMinMax();\n    }\n\n    if (oldProps.colorRange !== props.colorRange) {\n      const colorRangeUniform = [];\n      props.colorRange.forEach(color => {\n        colorRangeUniform.push(color[0], color[1], color[2], color[3] || 255);\n      });\n      newState.colorRange = colorRangeUniform;\n    }\n\n    if (\n      oldProps.cellMarginPixels !== props.cellMarginPixels ||\n      oldProps.cellSizePixels !== props.cellSizePixels ||\n      changeFlags.viewportChanged\n    ) {\n      const {width, height} = this.context.viewport;\n      const {cellSizePixels, cellMarginPixels} = this.props;\n      const margin = cellSizePixels > cellMarginPixels ? cellMarginPixels : 0;\n\n      newState.cellScale = new Float32Array([\n        ((cellSizePixels - margin) / width) * 2,\n        (-(cellSizePixels - margin) / height) * 2,\n        1\n      ]);\n    }\n    this.setState(newState);\n  }\n\n  _updateGridParams() {\n    const {width, height} = this.context.viewport;\n    const {cellSizePixels} = this.props;\n    const {gl} = this.context;\n\n    const numCol = Math.ceil(width / cellSizePixels);\n    const numRow = Math.ceil(height / cellSizePixels);\n    const numInstances = numCol * numRow;\n    const dataBytes = numInstances * 4 * 4;\n    let aggregationBuffer = this.state.aggregationBuffer;\n    if (aggregationBuffer) {\n      aggregationBuffer.delete();\n    }\n\n    aggregationBuffer = new Buffer(gl, {\n      size: 4,\n      bytes: dataBytes,\n      type: GL.FLOAT,\n      instanced: 1\n    });\n    this.state.weights.color.aggregationBuffer = aggregationBuffer;\n    this.setState({\n      numCol,\n      numRow,\n      numInstances,\n      aggregationBuffer\n    });\n  }\n}\n\nScreenGridLayer.layerName = 'ScreenGridLayer';\nScreenGridLayer.defaultProps = defaultProps;\n"],"file":"screen-grid-layer.js"}