{"version":3,"sources":["../../../src/contour-layer/contour-layer.js"],"names":["equals","CompositeLayer","_GPUGridAggregator","GPUGridAggregator","_pointToDensityGridData","pointToDensityGridData","default","LineLayer","SolidPolygonLayer","generateContours","DEFAULT_COLOR","DEFAULT_STROKE_WIDTH","DEFAULT_THRESHOLD","defaultProps","cellSize","type","min","max","value","getPosition","x","position","getWeight","contours","threshold","fp64","zOffsetScale","ContourLayer","initializeState","gl","context","options","id","shaderCache","state","contourData","gridAggregator","colorTrigger","strokeWidthTrigger","updateState","oldProps","props","changeFlags","dataChanged","contoursChanged","aggregationFlags","_getAggregationFlags","setState","countsData","_aggregateData","_shouldRebuildContours","_updateThresholdData","_generateContours","_updateSubLayerTriggers","renderLayers","contourSegments","contourPolygons","hasIsolines","length","hasIsobands","lineLayer","_getLineLayerProps","solidPolygonLayer","_getSolidPolygonLayerProps","data","cellSizeMeters","gpuAggregation","coordinateSystem","gpuGridAggregator","viewport","boundingBox","countsBuffer","gridSize","gridOrigin","thresholdData","getData","getCellData","cellWeights","updateTriggersChanged","all","Object","assign","cellSizeChanged","getSubLayerProps","getSourcePosition","d","start","getTargetPosition","end","getColor","_onGetSublayerColor","bind","getStrokeWidth","_onGetSublayerStrokeWidth","updateTriggers","getPolygon","vertices","getFillColor","element","color","forEach","segment","strokeWidth","some","contour","oldThresholds","map","thresholds","_","i","oldColors","newColors","oldStrokeWidths","newStrokeWidths","concat","push","index","zIndex","layerName"],"mappings":"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","sourcesContent":["// Copyright (c) 2015 - 2018 Uber Technologies, Inc.\n//\n// Permission is hereby granted, free of charge, to any person obtaining a copy\n// of this software and associated documentation files (the \"Software\"), to deal\n// in the Software without restriction, including without limitation the rights\n// to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n// copies of the Software, and to permit persons to whom the Software is\n// furnished to do so, subject to the following conditions:\n//\n// The above copyright notice and this permission notice shall be included in\n// all copies or substantial portions of the Software.\n//\n// THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\n// THE SOFTWARE.\n\nimport {equals} from 'math.gl';\nimport {\n  CompositeLayer,\n  _GPUGridAggregator as GPUGridAggregator,\n  _pointToDensityGridData as pointToDensityGridData\n} from '@deck.gl/core';\nimport {default as LineLayer} from '../line-layer/line-layer';\nimport {default as SolidPolygonLayer} from '../solid-polygon-layer/solid-polygon-layer';\nimport {generateContours} from './contour-utils';\n\nconst DEFAULT_COLOR = [255, 255, 255, 255];\nconst DEFAULT_STROKE_WIDTH = 1;\nconst DEFAULT_THRESHOLD = 1;\n\nconst defaultProps = {\n  // grid aggregation\n  cellSize: {type: 'number', min: 1, max: 1000, value: 1000},\n  getPosition: {type: 'accessor', value: x => x.position},\n  getWeight: {type: 'accessor', value: x => 1},\n\n  // contour lines\n  contours: [{threshold: DEFAULT_THRESHOLD}],\n\n  fp64: false,\n  zOffsetScale: 1\n};\n\nexport default class ContourLayer extends CompositeLayer {\n  initializeState() {\n    const {gl} = this.context;\n    const options = {\n      id: `${this.id}-gpu-aggregator`,\n      shaderCache: this.context.shaderCache\n    };\n    this.state = {\n      contourData: {},\n      gridAggregator: new GPUGridAggregator(gl, options),\n      colorTrigger: 0,\n      strokeWidthTrigger: 0\n    };\n  }\n\n  updateState({oldProps, props, changeFlags}) {\n    let dataChanged = false;\n    let contoursChanged = false;\n    const aggregationFlags = this._getAggregationFlags({oldProps, props, changeFlags});\n    if (aggregationFlags) {\n      dataChanged = true;\n      // Clear countsData cache\n      this.setState({countsData: null});\n      this._aggregateData(aggregationFlags);\n    }\n\n    if (this._shouldRebuildContours({oldProps, props})) {\n      contoursChanged = true;\n      this._updateThresholdData(props);\n    }\n\n    if (dataChanged || contoursChanged) {\n      this._generateContours();\n    } else {\n      // data for sublayers not changed check if color or strokeWidth need to be updated\n      this._updateSubLayerTriggers(oldProps, props);\n    }\n  }\n\n  renderLayers() {\n    const {contourSegments, contourPolygons} = this.state.contourData;\n    const hasIsolines = contourSegments && contourSegments.length > 0;\n    const hasIsobands = contourPolygons && contourPolygons.length > 0;\n\n    const lineLayer = hasIsolines && new LineLayer(this._getLineLayerProps());\n    const solidPolygonLayer =\n      hasIsobands && new SolidPolygonLayer(this._getSolidPolygonLayerProps());\n    return [lineLayer, solidPolygonLayer];\n  }\n\n  // Private\n\n  _aggregateData(aggregationFlags) {\n    const {\n      data,\n      cellSize: cellSizeMeters,\n      getPosition,\n      getWeight,\n      gpuAggregation,\n      fp64,\n      coordinateSystem\n    } = this.props;\n    const {\n      countsData,\n      countsBuffer,\n      gridSize,\n      gridOrigin,\n      cellSize,\n      boundingBox\n    } = pointToDensityGridData({\n      data,\n      cellSizeMeters,\n      getPosition,\n      getWeight,\n      gpuAggregation,\n      gpuGridAggregator: this.state.gridAggregator,\n      fp64,\n      coordinateSystem,\n      viewport: this.context.viewport,\n      boundingBox: this.state.boundingBox, // avoid parsing data when it is not changed.\n      aggregationFlags\n    });\n\n    this.setState({countsData, countsBuffer, gridSize, gridOrigin, cellSize, boundingBox});\n  }\n\n  _generateContours() {\n    const {gridSize, gridOrigin, cellSize, thresholdData} = this.state;\n    let {countsData} = this.state;\n    if (!countsData) {\n      const {countsBuffer} = this.state;\n      countsData = countsBuffer.getData();\n      this.setState({countsData});\n    }\n\n    const {cellWeights} = GPUGridAggregator.getCellData({countsData});\n    // const thresholds = this.props.contours.map(x => x.threshold);\n    const contourData = generateContours({\n      thresholdData,\n      cellWeights,\n      gridSize,\n      gridOrigin,\n      cellSize\n    });\n\n    // contourData contains both iso-lines and iso-bands if requested.\n    this.setState({contourData});\n  }\n\n  _getAggregationFlags({oldProps, props, changeFlags}) {\n    let aggregationFlags = null;\n    if (\n      changeFlags.dataChanged ||\n      oldProps.gpuAggregation !== props.gpuAggregation ||\n      (changeFlags.updateTriggersChanged &&\n        (changeFlags.updateTriggersChanged.all || changeFlags.updateTriggersChanged.getPosition))\n    ) {\n      aggregationFlags = Object.assign({}, aggregationFlags, {dataChanged: true});\n    }\n    if (oldProps.cellSize !== props.cellSize) {\n      aggregationFlags = Object.assign({}, aggregationFlags, {cellSizeChanged: true});\n    }\n    return aggregationFlags;\n  }\n\n  _getLineLayerProps() {\n    const {fp64} = this.props;\n    const {colorTrigger, strokeWidthTrigger} = this.state;\n\n    return super.getSubLayerProps({\n      id: 'contour-line-layer',\n      data: this.state.contourData.contourSegments,\n      fp64,\n      getSourcePosition: d => d.start,\n      getTargetPosition: d => d.end,\n      getColor: this._onGetSublayerColor.bind(this),\n      getStrokeWidth: this._onGetSublayerStrokeWidth.bind(this),\n      colorTrigger,\n      strokeWidthTrigger,\n      updateTriggers: {\n        getColor: colorTrigger,\n        getStrokeWidth: strokeWidthTrigger\n      }\n    });\n  }\n\n  _getSolidPolygonLayerProps() {\n    const {fp64} = this.props;\n    const {colorTrigger} = this.state;\n\n    return super.getSubLayerProps({\n      id: 'contour-solid-polygon-layer',\n      data: this.state.contourData.contourPolygons,\n      fp64,\n      getPolygon: d => d.vertices,\n      getFillColor: this._onGetSublayerColor.bind(this),\n      colorTrigger,\n      updateTriggers: {\n        getFillColor: colorTrigger\n      }\n    });\n  }\n\n  _onGetSublayerColor(element) {\n    // element is either a line segment or polygon\n    const {contours} = this.props;\n    let color = DEFAULT_COLOR;\n    contours.forEach(data => {\n      if (equals(data.threshold, element.threshold)) {\n        color = data.color || DEFAULT_COLOR;\n      }\n    });\n    return color;\n  }\n\n  _onGetSublayerStrokeWidth(segment) {\n    const {contours} = this.props;\n    let strokeWidth = DEFAULT_STROKE_WIDTH;\n    // Linearly searches the contours, but there should only be few contours\n    contours.some(contour => {\n      if (contour.threshold === segment.threshold) {\n        strokeWidth = contour.strokeWidth || DEFAULT_STROKE_WIDTH;\n        return true;\n      }\n      return false;\n    });\n    return strokeWidth;\n  }\n\n  _shouldRebuildContours({oldProps, props}) {\n    if (\n      !oldProps.contours ||\n      !oldProps.zOffsetScale ||\n      oldProps.contours.length !== props.contours.length ||\n      oldProps.zOffsetScale !== props.zOffsetScale\n    ) {\n      return true;\n    }\n    const oldThresholds = oldProps.contours.map(x => x.threshold);\n    const thresholds = props.contours.map(x => x.threshold);\n\n    return thresholds.some((_, i) => !equals(thresholds[i], oldThresholds[i]));\n  }\n\n  _updateSubLayerTriggers(oldProps, props) {\n    if (oldProps && oldProps.contours && props && props.contours) {\n      // threshold value change or count change will trigger data change for sublayers\n      // those cases are not handled here.\n      let oldColors = [];\n      let newColors = [];\n      const oldStrokeWidths = [];\n      const newStrokeWidths = [];\n      oldProps.contours.forEach(contour => {\n        oldColors = oldColors.concat(contour.color);\n        oldStrokeWidths.push(contour.strokeWidth || DEFAULT_STROKE_WIDTH);\n      });\n      props.contours.forEach(contour => {\n        newColors = newColors.concat(contour.color);\n        newStrokeWidths.push(contour.strokeWidth || DEFAULT_STROKE_WIDTH);\n      });\n\n      if (!equals(oldColors, newColors)) {\n        this.state.colorTrigger++;\n      }\n      if (!equals(oldStrokeWidths, newStrokeWidths)) {\n        this.state.strokeWidthTrigger++;\n      }\n    }\n  }\n\n  _updateThresholdData(props) {\n    const thresholdData = props.contours.map((x, index) => {\n      return {\n        threshold: x.threshold,\n        zIndex: x.zIndex || index,\n        zOffsetScale: props.zOffsetScale\n      };\n    });\n    this.setState({thresholdData});\n  }\n}\n\nContourLayer.layerName = 'ContourLayer';\nContourLayer.defaultProps = defaultProps;\n"],"file":"contour-layer.js"}