{"version":3,"sources":["../../../src/text-layer/font-atlas.js"],"names":["Texture2D","TinySDF","GL_TEXTURE_WRAP_S","GL_TEXTURE_WRAP_T","GL_CLAMP_TO_EDGE","MAX_CANVAS_WIDTH","BASELINE_SCALE","HEIGHT_SCALE","getDefaultCharacterSet","charSet","i","push","String","fromCharCode","DEFAULT_CHAR_SET","DEFAULT_FONT_FAMILY","DEFAULT_FONT_WEIGHT","DEFAULT_FONT_SETTINGS","fontSize","buffer","sdf","cutoff","radius","populateAlphaChannel","alphaChannel","imageData","length","data","setTextStyle","ctx","fontFamily","fontWeight","font","fillStyle","textBaseline","textAlign","buildMapping","fontHeight","characterSet","maxCanvasWidth","mapping","row","x","Array","from","forEach","char","measureText","width","y","height","mask","canvasHeight","makeFontAtlas","gl","fontSettings","mergedFontSettings","Object","assign","canvas","document","createElement","getContext","tinySDF","createImageData","size","draw","putImageData","fillText","scale","texture","pixels","parameters"],"mappings":"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","sourcesContent":["/* global document */\nimport {Texture2D} from 'luma.gl';\nimport TinySDF from '@mapbox/tiny-sdf';\n\nconst GL_TEXTURE_WRAP_S = 0x2802;\nconst GL_TEXTURE_WRAP_T = 0x2803;\nconst GL_CLAMP_TO_EDGE = 0x812f;\nconst MAX_CANVAS_WIDTH = 1024;\n\nconst BASELINE_SCALE = 0.9;\nconst HEIGHT_SCALE = 1.2;\n\nfunction getDefaultCharacterSet() {\n  const charSet = [];\n  for (let i = 32; i < 128; i++) {\n    charSet.push(String.fromCharCode(i));\n  }\n  return charSet;\n}\n\nexport const DEFAULT_CHAR_SET = getDefaultCharacterSet();\nexport const DEFAULT_FONT_FAMILY = 'Monaco, monospace';\nexport const DEFAULT_FONT_WEIGHT = 'normal';\n\nexport const DEFAULT_FONT_SETTINGS = {\n  fontSize: 64,\n  buffer: 2,\n  sdf: false,\n  cutoff: 0.25,\n  radius: 3\n};\n\nfunction populateAlphaChannel(alphaChannel, imageData) {\n  // populate distance value from tinySDF to image alpha channel\n  for (let i = 0; i < alphaChannel.length; i++) {\n    imageData.data[4 * i + 3] = alphaChannel[i];\n  }\n}\n\nfunction setTextStyle(ctx, fontFamily, fontSize, fontWeight) {\n  ctx.font = `${fontWeight} ${fontSize}px ${fontFamily}`;\n  ctx.fillStyle = '#000';\n  ctx.textBaseline = 'baseline';\n  ctx.textAlign = 'left';\n}\n\nfunction buildMapping({ctx, fontHeight, buffer, characterSet, maxCanvasWidth}) {\n  const mapping = {};\n  let row = 0;\n  let x = 0;\n  Array.from(characterSet).forEach(char => {\n    // measure texts\n    // TODO - use Advanced text metrics when they are adopted:\n    // https://developer.mozilla.org/en-US/docs/Web/API/TextMetrics\n    const {width} = ctx.measureText(char);\n\n    if (x + width + buffer * 2 > maxCanvasWidth) {\n      x = 0;\n      row++;\n    }\n    mapping[char] = {\n      x: x + buffer,\n      y: row * (fontHeight + buffer * 2) + buffer,\n      width,\n      height: fontHeight,\n      mask: true\n    };\n    x += width + buffer * 2;\n  });\n\n  const canvasHeight = (row + 1) * (fontHeight + buffer * 2);\n\n  return {mapping, canvasHeight};\n}\n\nexport function makeFontAtlas(gl, fontSettings) {\n  const mergedFontSettings = Object.assign(\n    {\n      fontFamily: DEFAULT_FONT_FAMILY,\n      fontWeight: DEFAULT_FONT_WEIGHT,\n      characterSet: DEFAULT_CHAR_SET\n    },\n    DEFAULT_FONT_SETTINGS,\n    fontSettings\n  );\n\n  const {\n    fontFamily,\n    fontWeight,\n    characterSet,\n    fontSize,\n    buffer,\n    sdf,\n    radius,\n    cutoff\n  } = mergedFontSettings;\n\n  const canvas = document.createElement('canvas');\n  const ctx = canvas.getContext('2d');\n\n  // build mapping\n  setTextStyle(ctx, fontFamily, fontSize, fontWeight);\n  const fontHeight = fontSize * HEIGHT_SCALE;\n  const {canvasHeight, mapping} = buildMapping({\n    ctx,\n    fontHeight,\n    buffer,\n    characterSet,\n    maxCanvasWidth: MAX_CANVAS_WIDTH\n  });\n\n  canvas.width = MAX_CANVAS_WIDTH;\n  canvas.height = canvasHeight;\n  setTextStyle(ctx, fontFamily, fontSize, fontWeight);\n\n  // layout characters\n  if (sdf) {\n    const tinySDF = new TinySDF(fontSize, buffer, radius, cutoff, fontFamily, fontWeight);\n    // used to store distance values from tinySDF\n    const imageData = ctx.createImageData(tinySDF.size, tinySDF.size);\n\n    for (const char of characterSet) {\n      populateAlphaChannel(tinySDF.draw(char), imageData);\n      ctx.putImageData(imageData, mapping[char].x - buffer, mapping[char].y - buffer);\n    }\n  } else {\n    for (const char of characterSet) {\n      ctx.fillText(char, mapping[char].x, mapping[char].y + fontSize * BASELINE_SCALE);\n    }\n  }\n\n  return {\n    scale: HEIGHT_SCALE,\n    mapping,\n    texture: new Texture2D(gl, {\n      pixels: canvas,\n      // padding is added only between the characters but not for borders\n      // enforce CLAMP_TO_EDGE to avoid any artifacts.\n      parameters: {\n        [GL_TEXTURE_WRAP_S]: GL_CLAMP_TO_EDGE,\n        [GL_TEXTURE_WRAP_T]: GL_CLAMP_TO_EDGE\n      }\n    })\n  };\n}\n"],"file":"font-atlas.js"}