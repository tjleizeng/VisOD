"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = extractJSXLayers;

var _react = _interopRequireWildcard(require("react"));

var _inheritsFrom = require("./inherits-from");

var _core = require("@deck.gl/core");

function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } else { var newObj = {}; if (obj != null) { for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) { var desc = Object.defineProperty && Object.getOwnPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : {}; if (desc.get || desc.set) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } } newObj.default = obj; return newObj; } }

function _toConsumableArray(arr) { return _arrayWithoutHoles(arr) || _iterableToArray(arr) || _nonIterableSpread(); }

function _nonIterableSpread() { throw new TypeError("Invalid attempt to spread non-iterable instance"); }

function _iterableToArray(iter) { if (Symbol.iterator in Object(iter) || Object.prototype.toString.call(iter) === "[object Arguments]") return Array.from(iter); }

function _arrayWithoutHoles(arr) { if (Array.isArray(arr)) { for (var i = 0, arr2 = new Array(arr.length); i < arr.length; i++) { arr2[i] = arr[i]; } return arr2; } }

// recursively wrap render callbacks in `View`
function wrapInView(node) {
  if (!node) {
    return node;
  }

  if (typeof node === 'function') {
    // React.Children does not traverse functions.
    // All render callbacks must be protected under a <View>
    return (0, _react.createElement)(_core.View, {}, node);
  }

  if (Array.isArray(node)) {
    return node.map(wrapInView);
  }

  if ((0, _inheritsFrom.inheritsFrom)(node.type, _core.View)) {
    return node;
  }

  return node;
} // extracts any deck.gl layers masquerading as react elements from props.children


function extractJSXLayers(_ref) {
  var children = _ref.children,
      layers = _ref.layers,
      views = _ref.views;
  var reactChildren = []; // extract real react elements (i.e. not deck.gl layers)

  var jsxLayers = []; // extracted layer from react children, will add to deck.gl layer array

  var jsxViews = {}; // React.children

  _react.default.Children.forEach(wrapInView(children), function (reactElement) {
    if (reactElement) {
      // For some reason Children.forEach doesn't filter out `null`s
      var ElementType = reactElement.type;

      if ((0, _inheritsFrom.inheritsFrom)(ElementType, _core.Layer)) {
        var layer = createLayer(ElementType, reactElement.props);
        jsxLayers.push(layer);
      } else {
        reactChildren.push(reactElement);
      } // empty id => default view


      if (ElementType !== _core.View && (0, _inheritsFrom.inheritsFrom)(ElementType, _core.View) && reactElement.props.id) {
        var view = new ElementType(reactElement.props);
        jsxViews[view.id] = view;
      }
    }
  }); // Avoid modifying views if no JSX views were found


  if (Object.keys(jsxViews).length > 0) {
    // If a view is specified in both views prop and JSX, use the one in views
    if (Array.isArray(views)) {
      views.forEach(function (view) {
        jsxViews[view.id] = view;
      });
    } else if (views) {
      jsxViews[views.id] = views;
    }

    views = Object.values(jsxViews);
  } // Avoid modifying layers array if no JSX layers were found


  layers = jsxLayers.length > 0 ? [].concat(jsxLayers, _toConsumableArray(layers)) : layers;
  return {
    layers: layers,
    children: reactChildren,
    views: views
  };
}

function createLayer(LayerType, reactProps) {
  var props = {}; // Layer.defaultProps is treated as ReactElement.defaultProps and merged into react props
  // Remove them

  var defaultProps = LayerType.defaultProps || {};

  for (var key in reactProps) {
    if (defaultProps[key] !== reactProps[key]) {
      props[key] = reactProps[key];
    }
  }

  return new LayerType(props);
}
//# sourceMappingURL=extract-jsx-layers.js.map