{"version":3,"sources":["../../../../../src/experimental/utils/gpu-grid-aggregation/gpu-grid-aggregator-utils.js"],"names":["GL","Buffer","Framebuffer","Texture2D","getFloatTexture","gl","opts","width","height","texture","data","format","RGBA32F","type","FLOAT","border","mipmaps","parameters","TEXTURE_MAG_FILTER","NEAREST","TEXTURE_MIN_FILTER","dataFormat","RGBA","getFramebuffer","id","fb","attachments","COLOR_ATTACHMENT0","getFloatArray","array","size","fillValue","length","Float32Array","fill","updateBuffer","bufferName","result","subData"],"mappings":";;AAAA;AACA,OAAOA,EAAP,MAAe,mBAAf;AACA,SAAQC,MAAR,EAAgBC,WAAhB,EAA6BC,SAA7B,QAA6C,SAA7C;AAEA,OAAO,SAASC,eAAT,CAAyBC,EAAzB,EAA6BC,IAA7B,EAAmC;AAAA;;AAAA,oBACRA,IADQ,CACjCC,KADiC;AAAA,MACjCA,KADiC,4BACzB,CADyB;AAAA,qBACRD,IADQ,CACtBE,MADsB;AAAA,MACtBA,MADsB,6BACb,CADa;AAExC,MAAMC,OAAO,GAAG,IAAIN,SAAJ,CAAcE,EAAd,EAAkB;AAChCK,IAAAA,IAAI,EAAE,IAD0B;AAEhCC,IAAAA,MAAM,EAAEX,EAAE,CAACY,OAFqB;AAGhCC,IAAAA,IAAI,EAAEb,EAAE,CAACc,KAHuB;AAIhCC,IAAAA,MAAM,EAAE,CAJwB;AAKhCC,IAAAA,OAAO,EAAE,KALuB;AAMhCC,IAAAA,UAAU,kDACPjB,EAAE,CAACkB,kBADI,EACiBlB,EAAE,CAACmB,OADpB,gCAEPnB,EAAE,CAACoB,kBAFI,EAEiBpB,EAAE,CAACmB,OAFpB,eANsB;AAUhCE,IAAAA,UAAU,EAAErB,EAAE,CAACsB,IAViB;AAWhCf,IAAAA,KAAK,EAALA,KAXgC;AAYhCC,IAAAA,MAAM,EAANA;AAZgC,GAAlB,CAAhB;AAcA,SAAOC,OAAP;AACD;AAED,OAAO,SAASc,cAAT,CAAwBlB,EAAxB,EAA4BC,IAA5B,EAAkC;AAAA,MAChCkB,EADgC,GACHlB,IADG,CAChCkB,EADgC;AAAA,qBACHlB,IADG,CAC5BC,KAD4B;AAAA,MAC5BA,KAD4B,6BACpB,CADoB;AAAA,sBACHD,IADG,CACjBE,MADiB;AAAA,MACjBA,MADiB,8BACR,CADQ;AAEvC,MAAMC,OAAO,GAAGH,IAAI,CAACG,OAAL,IAAgBL,eAAe,CAACC,EAAD,EAAKC,IAAL,CAA/C;AACA,MAAMmB,EAAE,GAAG,IAAIvB,WAAJ,CAAgBG,EAAhB,EAAoB;AAC7BmB,IAAAA,EAAE,EAAFA,EAD6B;AAE7BjB,IAAAA,KAAK,EAALA,KAF6B;AAG7BC,IAAAA,MAAM,EAANA,MAH6B;AAI7BkB,IAAAA,WAAW,sBACR1B,EAAE,CAAC2B,iBADK,EACelB,OADf;AAJkB,GAApB,CAAX;AASA,SAAOgB,EAAP;AACD;AAED,OAAO,SAASG,aAAT,CAAuBC,KAAvB,EAA8BC,IAA9B,EAAmD;AAAA,MAAfC,SAAe,uEAAH,CAAG;;AACxD,MAAI,CAACF,KAAD,IAAUA,KAAK,CAACG,MAAN,GAAeF,IAA7B,EAAmC;AACjC,WAAO,IAAIG,YAAJ,CAAiBH,IAAjB,EAAuBI,IAAvB,CAA4BH,SAA5B,CAAP;AACD;;AACD,SAAOF,KAAP;AACD;AAED,OAAO,SAASM,YAAT,OAAsD;AAAA,MAA/B9B,EAA+B,QAA/BA,EAA+B;AAAA,MAA3B+B,UAA2B,QAA3BA,UAA2B;AAAA,MAAf1B,IAAe,QAAfA,IAAe;AAAA,MAAT2B,MAAS,QAATA,MAAS;;AAC3D,MAAIA,MAAM,CAACD,UAAD,CAAV,EAAwB;AACtBC,IAAAA,MAAM,CAACD,UAAD,CAAN,CAAmBE,OAAnB,CAA2B;AAAC5B,MAAAA,IAAI,EAAJA;AAAD,KAA3B;AACD,GAFD,MAEO;AACL2B,IAAAA,MAAM,CAACD,UAAD,CAAN,GAAqB,IAAInC,MAAJ,CAAWI,EAAX,EAAeK,IAAf,CAArB;AACD;AACF","sourcesContent":["// Helper methods used by GPUGridAggregator.\nimport GL from 'luma.gl/constants';\nimport {Buffer, Framebuffer, Texture2D} from 'luma.gl';\n\nexport function getFloatTexture(gl, opts) {\n  const {width = 1, height = 1} = opts;\n  const texture = new Texture2D(gl, {\n    data: null,\n    format: GL.RGBA32F,\n    type: GL.FLOAT,\n    border: 0,\n    mipmaps: false,\n    parameters: {\n      [GL.TEXTURE_MAG_FILTER]: GL.NEAREST,\n      [GL.TEXTURE_MIN_FILTER]: GL.NEAREST\n    },\n    dataFormat: GL.RGBA,\n    width,\n    height\n  });\n  return texture;\n}\n\nexport function getFramebuffer(gl, opts) {\n  const {id, width = 1, height = 1} = opts;\n  const texture = opts.texture || getFloatTexture(gl, opts);\n  const fb = new Framebuffer(gl, {\n    id,\n    width,\n    height,\n    attachments: {\n      [GL.COLOR_ATTACHMENT0]: texture\n    }\n  });\n\n  return fb;\n}\n\nexport function getFloatArray(array, size, fillValue = 0) {\n  if (!array || array.length < size) {\n    return new Float32Array(size).fill(fillValue);\n  }\n  return array;\n}\n\nexport function updateBuffer({gl, bufferName, data, result}) {\n  if (result[bufferName]) {\n    result[bufferName].subData({data});\n  } else {\n    result[bufferName] = new Buffer(gl, data);\n  }\n}\n"],"file":"gpu-grid-aggregator-utils.js"}