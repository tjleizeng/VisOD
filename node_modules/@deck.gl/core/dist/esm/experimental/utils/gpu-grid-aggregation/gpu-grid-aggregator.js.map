{"version":3,"sources":["../../../../../src/experimental/utils/gpu-grid-aggregation/gpu-grid-aggregator.js"],"names":["GL","Buffer","Model","Transform","FEATURES","hasFeatures","isWebGL2","log","assert","fp64","fp64Utils","withParameters","worldToPixels","fp64ifyMatrix4","AGGREGATION_OPERATION","DEFAULT_CHANGE_FLAGS","DEFAULT_RUN_PARAMS","MAX_32_BIT_FLOAT","MIN_BLEND_EQUATION","MAX_BLEND_EQUATION","MAX_MIN_BLEND_EQUATION","EQUATION_MAP","ELEMENTCOUNT","DEFAULT_WEIGHT_PARAMS","IDENTITY_MATRIX","PIXEL_SIZE","WEIGHT_SIZE","AGGREGATE_TO_GRID_VS","AGGREGATE_TO_GRID_VS_FP64","AGGREGATE_TO_GRID_FS","AGGREGATE_ALL_VS_FP64","AGGREGATE_ALL_FS","TRANSFORM_MEAN_VS","getFloatTexture","getFramebuffer","getFloatArray","updateBuffer","GPUGridAggregator","aggregationData","maxData","pixelIndex","length","index","cellCount","cellWeight","totalCount","maxCellWieght","countsData","size","cellWeights","cellCounts","sizeIndex","push","gl","opts","id","shaderCache","state","weights","gridPositions","positionsBuffer","positions64xyLowBuffer","vertexCount","useGPU","numCol","numRow","windowSize","cellSize","weightAttributes","textures","meanTextures","buffers","framebuffers","maxMinFramebuffers","minFramebuffers","maxFramebuffers","equations","_hasGPUSupport","BLEND_EQUATION_MINMAX","COLOR_ATTACHMENT_RGBA32F","TEXTURE_FLOAT","gridAggregationModel","allAggregationModel","meanTransform","position64Buffer","delete","deleteResources","aggregationParams","getAggregationParams","updateGridSize","runAggregationOnGPU","warn","runAggregationOnCPU","obj","name","Object","assign","gridTransformMatrix","viewport","projectPoints","changeFlags","cellSizeChanged","setState","validateProps","viewportMatrix","normalizeWeightParams","result","updateObject","dataChanged","viewportChanged","width","height","Math","ceil","positions","projectPositions","results","cellIndex","posIndex","values","operation","cellElementIndex","weightComponent","Number","isFinite","SUM","MEAN","MIN","min","MAX","max","validCellIndices","forEach","needMin","needMax","minData","maxMinData","calculateMinMax","calculateMean","combineMaxMin","count","weight","aggregationSize","fill","Infinity","initCPUResults","gridTransformRequired","shouldTransformToGrid","posCount","Set","gridPos","pos","project","slice","x","y","colId","floor","rowId","add","calculateAggregationData","calculateMeanMaxMinData","updateAggregationBuffers","createBufferObjects","bufferName","data","aggregationTexture","aggregationBuffer","readPixelsToBuffer","buffer","type","FLOAT","maxMinBuffer","minBuffer","maxBuffer","vs","fs","modules","drawMode","POINTS","isInstanced","instanceCount","attributes","position","Float32Array","update","_targetTextureVarying","uProjectionMatrixFP64","gridSize","parameters","blend","depthTest","blendFunc","ONE","moduleSettings","uniforms","uProjectionMatrix","renderToWeightsTexture","renderToMaxMinTexture","blendEquation","minOrMaxFb","clearParams","clearColor","bind","clear","COLOR_BUFFER_BIT","draw","uSampler","texture","unbind","transformOptions","_sourceTextures","aggregationValues","_targetTexture","elementCount","getMeanTransform","run","attach","COLOR_ATTACHMENT0","updateModels","setupFramebuffers","renderAggregateData","getAggregateData","framebufferSize","resize","getAggregationModel","getAllAggregationModel","Array","isArray","constructor","typedArray","setData","positions64xyLow","aggregationModelAttributes","createPos64xyLow","setupModels","setupWeightAttributes","setVertexCount","setAttributes","setInstanceCount"],"mappings":"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","sourcesContent":["import GL from 'luma.gl/constants';\nimport {Buffer, Model, Transform, FEATURES, hasFeatures, isWebGL2} from 'luma.gl';\nimport {log} from '@deck.gl/core';\nimport assert from '../../../utils/assert';\nimport {fp64 as fp64Utils, withParameters} from 'luma.gl';\nimport {worldToPixels} from 'viewport-mercator-project';\nconst {fp64ifyMatrix4} = fp64Utils;\n\nimport {\n  AGGREGATION_OPERATION,\n  DEFAULT_CHANGE_FLAGS,\n  DEFAULT_RUN_PARAMS,\n  MAX_32_BIT_FLOAT,\n  MIN_BLEND_EQUATION,\n  MAX_BLEND_EQUATION,\n  MAX_MIN_BLEND_EQUATION,\n  EQUATION_MAP,\n  ELEMENTCOUNT,\n  DEFAULT_WEIGHT_PARAMS,\n  IDENTITY_MATRIX,\n  PIXEL_SIZE,\n  WEIGHT_SIZE\n} from './gpu-grid-aggregator-constants';\n\nimport AGGREGATE_TO_GRID_VS from './aggregate-to-grid-vs.glsl';\nimport AGGREGATE_TO_GRID_VS_FP64 from './aggregate-to-grid-vs-64.glsl';\nimport AGGREGATE_TO_GRID_FS from './aggregate-to-grid-fs.glsl';\nimport AGGREGATE_ALL_VS_FP64 from './aggregate-all-vs-64.glsl';\nimport AGGREGATE_ALL_FS from './aggregate-all-fs.glsl';\nimport TRANSFORM_MEAN_VS from './transform-mean-vs.glsl';\nimport {\n  getFloatTexture,\n  getFramebuffer,\n  getFloatArray,\n  updateBuffer\n} from './gpu-grid-aggregator-utils.js';\n\nexport default class GPUGridAggregator {\n  // Decode and return aggregation data of given pixel.\n  static getAggregationData({aggregationData, maxData, pixelIndex}) {\n    assert(aggregationData.length >= (pixelIndex + 1) * PIXEL_SIZE);\n    assert(maxData.length === PIXEL_SIZE);\n    const index = pixelIndex * PIXEL_SIZE;\n    const cellCount = aggregationData[index + 3];\n    const cellWeight = aggregationData[index];\n    const totalCount = maxData[3];\n    const maxCellWieght = maxData[0];\n    return {\n      cellCount,\n      cellWeight,\n      totalCount,\n      maxCellWieght\n    };\n  }\n\n  // Decodes and retuns counts and weights of all cells\n  static getCellData({countsData, size = 1}) {\n    const cellWeights = [];\n    const cellCounts = [];\n    for (let index = 0; index < countsData.length; index += 4) {\n      // weights in RGB channels\n      for (let sizeIndex = 0; sizeIndex < size; sizeIndex++) {\n        cellWeights.push(countsData[index + sizeIndex]);\n      }\n      // count in Alpha channel\n      cellCounts.push(countsData[index + 3]);\n    }\n    return {cellCounts, cellWeights};\n  }\n\n  // DEBUG ONLY\n  // static logData({aggregationBuffer, minBuffer, maxBuffer, maxMinBuffer}) {\n  //   const agrData = aggregationBuffer.getData();\n  //   for (let index = 0; index < agrData.length; index += 4) {\n  //     if (agrData[index + 3] > 0) {\n  //       console.log(\n  //         `index: ${index} weights: ${agrData[index]} ${agrData[index + 1]} ${\n  //           agrData[index + 2]\n  //         } count: ${agrData[index + 3]}`\n  //       );\n  //     }\n  //   }\n  // }\n\n  constructor(gl, opts = {}) {\n    this.id = opts.id || 'gpu-grid-aggregator';\n    this.shaderCache = opts.shaderCache || null;\n    this.gl = gl;\n    this.state = {\n      // cache weights and position data to process when data is not changed\n      weights: null,\n      gridPositions: null,\n      positionsBuffer: null,\n      positions64xyLowBuffer: null,\n      vertexCount: 0,\n\n      // flags/variables that affect the aggregation\n      fp64: null,\n      useGPU: null,\n      numCol: 0,\n      numRow: 0,\n      windowSize: null,\n      cellSize: null,\n\n      // per weight GPU resources\n      weightAttributes: {},\n      textures: {},\n      meanTextures: {},\n      buffers: {},\n      framebuffers: {},\n      maxMinFramebuffers: {},\n      minFramebuffers: {},\n      maxFramebuffers: {},\n      equations: {}\n    };\n    this._hasGPUSupport =\n      isWebGL2(gl) && // gl_InstanceID usage in min/max calculation shaders\n      hasFeatures(\n        this.gl,\n        FEATURES.BLEND_EQUATION_MINMAX, // set min/max blend modes\n        FEATURES.COLOR_ATTACHMENT_RGBA32F, // render to float texture\n        FEATURES.TEXTURE_FLOAT // sample from a float texture\n      );\n  }\n\n  // Delete owned resources.\n  /* eslint no-unused-expressions: [\"error\", { \"allowShortCircuit\": true }] */\n  delete() {\n    const {gridAggregationModel, allAggregationModel, meanTransform} = this;\n    const {\n      positionsBuffer,\n      position64Buffer,\n      framebuffers,\n      maxMinFramebuffers,\n      minFramebuffers,\n      maxFramebuffers,\n      meanTextures\n    } = this.state;\n\n    gridAggregationModel && gridAggregationModel.delete();\n    allAggregationModel && allAggregationModel.delete();\n    meanTransform && meanTransform.delete();\n\n    positionsBuffer && positionsBuffer.delete();\n    position64Buffer && position64Buffer.delete();\n    this.deleteResources(framebuffers);\n    this.deleteResources(maxMinFramebuffers);\n    this.deleteResources(minFramebuffers);\n    this.deleteResources(maxFramebuffers);\n    this.deleteResources(meanTextures);\n  }\n\n  // Perform aggregation and retun the results\n  run(opts = {}) {\n    const aggregationParams = this.getAggregationParams(opts);\n    assert(aggregationParams);\n    this.updateGridSize(aggregationParams);\n    const {useGPU} = aggregationParams;\n    if (this._hasGPUSupport && useGPU) {\n      return this.runAggregationOnGPU(aggregationParams);\n    }\n    if (useGPU) {\n      log.warn('ScreenGridAggregator: GPU Aggregation not supported, falling back to CPU')();\n    }\n    return this.runAggregationOnCPU(aggregationParams);\n  }\n\n  // PRIVATE\n\n  // Common methods\n\n  deleteResources(obj) {\n    for (const name in obj) {\n      obj[name].delete();\n    }\n  }\n\n  getAggregationParams(opts) {\n    const aggregationParams = Object.assign({}, DEFAULT_RUN_PARAMS, opts);\n    const {\n      useGPU,\n      gridTransformMatrix,\n      viewport,\n      weights,\n      projectPoints,\n      cellSize\n    } = aggregationParams;\n    if (this.state.useGPU !== useGPU) {\n      // CPU/GPU resources need to reinitialized, force set the change flags.\n      aggregationParams.changeFlags = Object.assign(\n        {},\n        aggregationParams.changeFlags,\n        DEFAULT_CHANGE_FLAGS\n      );\n    }\n    if (\n      cellSize &&\n      (!this.state.cellSize ||\n        this.state.cellSize[0] !== cellSize[0] ||\n        this.state.cellSize[1] !== cellSize[1])\n    ) {\n      aggregationParams.changeFlags.cellSizeChanged = true;\n      // For GridLayer aggregation, cellSize is calculated by parsing all input data as it depends\n      // on bounding box, cache cellSize\n      this.setState({cellSize});\n    }\n\n    this.validateProps(aggregationParams, opts);\n\n    this.setState({useGPU});\n    aggregationParams.gridTransformMatrix =\n      (projectPoints ? viewport.viewportMatrix : gridTransformMatrix) || IDENTITY_MATRIX;\n\n    if (weights) {\n      aggregationParams.weights = this.normalizeWeightParams(weights);\n\n      // cache weights to process when only cellSize or viewport is changed.\n      // position data is cached in Buffers for GPU case and in 'gridPositions' for CPU case.\n      this.setState({weights: aggregationParams.weights});\n    }\n    return aggregationParams;\n  }\n\n  normalizeWeightParams(weights) {\n    const result = {};\n    for (const id in weights) {\n      result[id] = Object.assign({}, DEFAULT_WEIGHT_PARAMS, weights[id]);\n    }\n    return result;\n  }\n\n  // Update priveate state\n  setState(updateObject) {\n    Object.assign(this.state, updateObject);\n  }\n\n  shouldTransformToGrid(opts) {\n    const {projectPoints, changeFlags} = opts;\n    if (\n      !this.state.gridPositions ||\n      changeFlags.dataChanged ||\n      (projectPoints && changeFlags.viewportChanged) // world space aggregation (GridLayer) doesn't change when viewport is changed.\n    ) {\n      return true;\n    }\n    return false;\n  }\n\n  updateGridSize(opts) {\n    const {viewport, cellSize} = opts;\n    const width = opts.width || viewport.width;\n    const height = opts.height || viewport.height;\n    const numCol = Math.ceil(width / cellSize[0]);\n    const numRow = Math.ceil(height / cellSize[1]);\n    this.setState({numCol, numRow, windowSize: [width, height]});\n  }\n\n  // validate and assert\n  validateProps(aggregationParams, opts) {\n    const {changeFlags, projectPoints, gridTransformMatrix} = aggregationParams;\n    assert(changeFlags.dataChanged || changeFlags.viewportChanged || changeFlags.cellSizeChanged);\n\n    // assert for required options\n    assert(\n      !changeFlags.dataChanged ||\n        (opts.positions &&\n          opts.weights &&\n          (!opts.projectPositions || opts.viewport) &&\n          opts.cellSize)\n    );\n    assert(!changeFlags.cellSizeChanged || opts.cellSize);\n\n    // viewport need only when performing screen space aggregation (projectPoints is true)\n    assert(!(changeFlags.viewportChanged && projectPoints) || opts.viewport);\n\n    if (projectPoints && gridTransformMatrix) {\n      log.warn('projectPoints is true, gridTransformMatrix is ignored')();\n    }\n  }\n\n  // CPU Aggregation methods\n\n  // aggregated weight value to a cell\n  /* eslint-disable max-depth */\n  calculateAggregationData(opts) {\n    const {weights, results, cellIndex, posIndex} = opts;\n    for (const id in weights) {\n      const {values, size, operation} = weights[id];\n      const {aggregationData} = results[id];\n      assert(size >= 1 && size <= 3);\n\n      // Fill RGB with weights\n      for (let sizeIndex = 0; sizeIndex < size; sizeIndex++) {\n        const cellElementIndex = cellIndex + sizeIndex;\n        const weightComponent = values[posIndex * WEIGHT_SIZE + sizeIndex];\n        assert(Number.isFinite(weightComponent));\n        if (aggregationData[cellIndex + 3] === 0) {\n          // if the cell is getting update the first time, set the value directly.\n          aggregationData[cellElementIndex] = weightComponent;\n        } else {\n          switch (operation) {\n            case AGGREGATION_OPERATION.SUM:\n            case AGGREGATION_OPERATION.MEAN:\n              aggregationData[cellElementIndex] += weightComponent;\n              // MEAN value is calculated during 'calculateMeanMaxMinData'\n              break;\n            case AGGREGATION_OPERATION.MIN:\n              aggregationData[cellElementIndex] = Math.min(\n                aggregationData[cellElementIndex],\n                weightComponent\n              );\n              break;\n            case AGGREGATION_OPERATION.MAX:\n              aggregationData[cellElementIndex] = Math.max(\n                aggregationData[cellElementIndex],\n                weightComponent\n              );\n              break;\n            default:\n              // Not a valid operation enum.\n              assert(false);\n              break;\n          }\n        }\n      }\n\n      // Track the count per grid-cell\n      aggregationData[cellIndex + 3]++;\n    }\n  }\n\n  /* eslint-disable max-depth, complexity */\n  calculateMeanMaxMinData(opts) {\n    const {validCellIndices, results, weights} = opts;\n\n    // collect max/min values\n    validCellIndices.forEach(cellIndex => {\n      for (const id in results) {\n        const {size, needMin, needMax, operation} = weights[id];\n        const {aggregationData, minData, maxData, maxMinData} = results[id];\n        const calculateMinMax = needMin || needMax;\n        const calculateMean = operation === AGGREGATION_OPERATION.MEAN;\n        const combineMaxMin = needMin && needMax && weights[id].combineMaxMin;\n        const count = aggregationData[cellIndex + ELEMENTCOUNT - 1];\n        for (\n          let sizeIndex = 0;\n          sizeIndex < size && (calculateMinMax || calculateMean);\n          sizeIndex++\n        ) {\n          const cellElementIndex = cellIndex + sizeIndex;\n          let weight = aggregationData[cellElementIndex];\n          if (calculateMean) {\n            aggregationData[cellElementIndex] /= count;\n            weight = aggregationData[cellElementIndex];\n          }\n          if (combineMaxMin) {\n            // use RGB for max values for 3 weights.\n            maxMinData[sizeIndex] = Math.max(maxMinData[sizeIndex], weight);\n          } else {\n            if (needMin) {\n              minData[sizeIndex] = Math.min(minData[sizeIndex], weight);\n            }\n            if (needMax) {\n              maxData[sizeIndex] = Math.max(maxData[sizeIndex], weight);\n            }\n          }\n        }\n        // update total aggregation values.\n        if (combineMaxMin) {\n          // Use Alpha channel to store total min value for weight#0\n          maxMinData[ELEMENTCOUNT - 1] = Math.min(\n            maxMinData[ELEMENTCOUNT - 1],\n            aggregationData[cellIndex + 0]\n          );\n        } else {\n          // Use Alpha channel to store total counts.\n          if (needMin) {\n            minData[ELEMENTCOUNT - 1] += count;\n          }\n          if (needMax) {\n            maxData[ELEMENTCOUNT - 1] += count;\n          }\n        }\n      }\n    });\n  }\n  /* eslint-enable max-depth */\n\n  initCPUResults(opts) {\n    const weights = opts.weights || this.state.weights;\n    const {numCol, numRow} = this.state;\n    const results = {};\n    // setup results object\n    for (const id in weights) {\n      let {aggregationData, minData, maxData, maxMinData} = weights[id];\n      const {needMin, needMax} = weights[id];\n      const combineMaxMin = needMin && needMax && weights[id].combineMaxMin;\n\n      const aggregationSize = numCol * numRow * ELEMENTCOUNT;\n      aggregationData = getFloatArray(aggregationData, aggregationSize);\n      if (combineMaxMin) {\n        maxMinData = getFloatArray(maxMinData, ELEMENTCOUNT);\n        // RGB for max value\n        maxMinData.fill(-Infinity, 0, ELEMENTCOUNT - 1);\n        // Alpha for min value\n        maxMinData[ELEMENTCOUNT - 1] = Infinity;\n      } else {\n        // RGB for min/max values\n        // Alpha for total count\n        if (needMin) {\n          minData = getFloatArray(minData, ELEMENTCOUNT, Infinity);\n          minData[ELEMENTCOUNT - 1] = 0;\n        }\n        if (needMax) {\n          maxData = getFloatArray(maxData, ELEMENTCOUNT, -Infinity);\n          maxData[ELEMENTCOUNT - 1] = 0;\n        }\n      }\n      results[id] = Object.assign({}, weights[id], {\n        aggregationData,\n        minData,\n        maxData,\n        maxMinData\n      });\n    }\n    return results;\n  }\n\n  /* eslint-disable max-statements */\n  runAggregationOnCPU(opts) {\n    const {positions, cellSize, gridTransformMatrix, viewport, projectPoints} = opts;\n    let {weights} = opts;\n    const {numCol, numRow} = this.state;\n    const results = this.initCPUResults(opts);\n    // screen space or world space projection required\n    const gridTransformRequired = this.shouldTransformToGrid(opts);\n    let gridPositions = [];\n\n    assert(gridTransformRequired || opts.changeFlags.cellSizeChanged);\n\n    let posCount;\n    if (gridTransformRequired) {\n      this.setState({gridPositions});\n      posCount = positions.length / 2;\n    } else {\n      gridPositions = this.state.gridPositions;\n      weights = this.state.weights;\n      posCount = gridPositions.length / 2;\n    }\n\n    const validCellIndices = new Set();\n    for (let posIndex = 0; posIndex < posCount; posIndex++) {\n      let gridPos;\n      if (gridTransformRequired) {\n        const pos = [positions[posIndex * 2], positions[posIndex * 2 + 1]];\n        if (projectPoints) {\n          gridPos = viewport.project([pos[0], pos[1]]);\n        } else {\n          gridPos = worldToPixels([pos[0], pos[1], 0], gridTransformMatrix).slice(0, 2);\n        }\n        gridPositions.push(...gridPos);\n      } else {\n        gridPos = [gridPositions[posIndex * 2], gridPositions[posIndex * 2 + 1]];\n      }\n\n      const x = gridPos[0];\n      const y = gridPos[1];\n      const colId = Math.floor(x / cellSize[0]);\n      const rowId = Math.floor(y / cellSize[1]);\n      if (colId >= 0 && colId < numCol && rowId >= 0 && rowId < numRow) {\n        const cellIndex = (colId + rowId * numCol) * ELEMENTCOUNT;\n        validCellIndices.add(cellIndex);\n        this.calculateAggregationData({weights, results, cellIndex, posIndex});\n      }\n    }\n\n    this.calculateMeanMaxMinData({validCellIndices, results, weights});\n\n    // Update buffer objects.\n    this.updateAggregationBuffers(opts, results);\n    return results;\n  }\n  /* eslint-disable max-statements */\n\n  updateAggregationBuffers(opts, results) {\n    if (!opts.createBufferObjects) {\n      return;\n    }\n    const weights = opts.weights || this.state.weights;\n    for (const id in results) {\n      const {aggregationData, minData, maxData, maxMinData} = results[id];\n      const {needMin, needMax} = weights[id];\n      const combineMaxMin = needMin && needMax && weights[id].combineMaxMin;\n      updateBuffer({\n        gl: this.gl,\n        bufferName: 'aggregationBuffer',\n        data: aggregationData,\n        result: results[id]\n      });\n      if (combineMaxMin) {\n        updateBuffer({\n          gl: this.gl,\n          bufferName: 'maxMinBuffer',\n          data: maxMinData,\n          result: results[id]\n        });\n      } else {\n        if (needMin) {\n          updateBuffer({\n            gl: this.gl,\n            bufferName: 'minBuffer',\n            data: minData,\n            result: results[id]\n          });\n        }\n        if (needMax) {\n          updateBuffer({\n            gl: this.gl,\n            bufferName: 'maxBuffer',\n            data: maxData,\n            result: results[id]\n          });\n        }\n      }\n    }\n  }\n\n  // GPU Aggregation methods\n\n  getAggregateData(opts) {\n    const results = {};\n    const {\n      textures,\n      framebuffers,\n      maxMinFramebuffers,\n      minFramebuffers,\n      maxFramebuffers,\n      weights\n    } = this.state;\n\n    for (const id in weights) {\n      results[id] = {};\n      const {needMin, needMax, combineMaxMin} = weights[id];\n      results[id].aggregationTexture = textures[id];\n      results[id].aggregationBuffer = framebuffers[id].readPixelsToBuffer({\n        buffer: weights[id].aggregationBuffer, // update if a buffer is provided\n        type: GL.FLOAT\n      });\n      if (needMin && needMax && combineMaxMin) {\n        results[id].maxMinBuffer = maxMinFramebuffers[id].readPixelsToBuffer({\n          buffer: weights[id].maxMinBuffer, // update if a buffer is provided\n          type: GL.FLOAT\n        });\n      } else {\n        if (needMin) {\n          results[id].minBuffer = minFramebuffers[id].readPixelsToBuffer({\n            buffer: weights[id].minBuffer, // update if a buffer is provided\n            type: GL.FLOAT\n          });\n        }\n        if (needMax) {\n          results[id].maxBuffer = maxFramebuffers[id].readPixelsToBuffer({\n            buffer: weights[id].maxBuffer, // update if a buffer is provided\n            type: GL.FLOAT\n          });\n        }\n      }\n    }\n    return results;\n  }\n\n  getAggregationModel(fp64 = false) {\n    const {gl, shaderCache} = this;\n    return new Model(gl, {\n      id: 'Gird-Aggregation-Model',\n      vs: fp64 ? AGGREGATE_TO_GRID_VS_FP64 : AGGREGATE_TO_GRID_VS,\n      fs: AGGREGATE_TO_GRID_FS,\n      modules: fp64 ? ['fp64', 'project64'] : ['project32'],\n      shaderCache,\n      vertexCount: 0,\n      drawMode: GL.POINTS\n    });\n  }\n\n  getAllAggregationModel(fp64 = false) {\n    const {gl, shaderCache} = this;\n    return new Model(gl, {\n      id: 'All-Aggregation-Model',\n      vs: AGGREGATE_ALL_VS_FP64,\n      fs: AGGREGATE_ALL_FS,\n      modules: ['fp64'],\n      shaderCache,\n      vertexCount: 1,\n      drawMode: GL.POINTS,\n      isInstanced: true,\n      instanceCount: 0,\n      attributes: {position: new Buffer(gl, {size: 2, data: new Float32Array([0, 0])})}\n    });\n  }\n\n  getMeanTransform(opts) {\n    if (this.meanTransform) {\n      this.meanTransform.update(opts);\n    } else {\n      this.meanTransform = new Transform(\n        this.gl,\n        Object.assign(\n          {},\n          {\n            vs: TRANSFORM_MEAN_VS,\n            _targetTextureVarying: 'meanValues'\n          },\n          opts\n        )\n      );\n    }\n    return this.meanTransform;\n  }\n\n  renderAggregateData(opts) {\n    const {cellSize, viewport, gridTransformMatrix, projectPoints} = opts;\n    const {\n      numCol,\n      numRow,\n      windowSize,\n      maxMinFramebuffers,\n      minFramebuffers,\n      maxFramebuffers,\n      weights\n    } = this.state;\n\n    const uProjectionMatrixFP64 = fp64ifyMatrix4(gridTransformMatrix);\n    const gridSize = [numCol, numRow];\n    const parameters = {\n      blend: true,\n      depthTest: false,\n      blendFunc: [GL.ONE, GL.ONE]\n    };\n    const moduleSettings = {viewport};\n    const uniforms = {\n      windowSize,\n      cellSize,\n      gridSize,\n      uProjectionMatrix: gridTransformMatrix,\n      uProjectionMatrixFP64,\n      projectPoints\n    };\n\n    for (const id in weights) {\n      const {needMin, needMax} = weights[id];\n      const combineMaxMin = needMin && needMax && weights[id].combineMaxMin;\n      this.renderToWeightsTexture({id, parameters, moduleSettings, uniforms, gridSize});\n      if (combineMaxMin) {\n        this.renderToMaxMinTexture({\n          id,\n          parameters: Object.assign({}, parameters, {blendEquation: MAX_MIN_BLEND_EQUATION}),\n          gridSize,\n          minOrMaxFb: maxMinFramebuffers[id],\n          clearParams: {clearColor: [0, 0, 0, MAX_32_BIT_FLOAT]},\n          combineMaxMin\n        });\n      } else {\n        if (needMin) {\n          this.renderToMaxMinTexture({\n            id,\n            parameters: Object.assign({}, parameters, {blendEquation: MIN_BLEND_EQUATION}),\n            gridSize,\n            minOrMaxFb: minFramebuffers[id],\n            clearParams: {clearColor: [MAX_32_BIT_FLOAT, MAX_32_BIT_FLOAT, MAX_32_BIT_FLOAT, 0]},\n            combineMaxMin\n          });\n        }\n        if (needMax) {\n          this.renderToMaxMinTexture({\n            id,\n            parameters: Object.assign({}, parameters, {blendEquation: MAX_BLEND_EQUATION}),\n            gridSize,\n            minOrMaxFb: maxFramebuffers[id],\n            combineMaxMin\n          });\n        }\n      }\n    }\n  }\n\n  // render all aggregated grid-cells to generate Min, Max or MaxMin data texture\n  renderToMaxMinTexture(opts) {\n    const {id, parameters, gridSize, minOrMaxFb, combineMaxMin, clearParams = {}} = opts;\n    const {framebuffers} = this.state;\n    const {gl, allAggregationModel} = this;\n\n    minOrMaxFb.bind();\n    gl.viewport(0, 0, gridSize[0], gridSize[1]);\n    withParameters(gl, clearParams, () => {\n      gl.clear(gl.COLOR_BUFFER_BIT);\n    });\n    allAggregationModel.draw({\n      parameters,\n      uniforms: {\n        uSampler: framebuffers[id].texture,\n        gridSize,\n        combineMaxMin\n      }\n    });\n    minOrMaxFb.unbind();\n  }\n\n  // render all data points to aggregate weights\n  renderToWeightsTexture(opts) {\n    const {id, parameters, moduleSettings, uniforms, gridSize} = opts;\n    const {framebuffers, equations, weightAttributes, weights} = this.state;\n    const {gl, gridAggregationModel} = this;\n    const {operation} = weights[id];\n\n    framebuffers[id].bind();\n    gl.viewport(0, 0, gridSize[0], gridSize[1]);\n    const clearColor =\n      operation === AGGREGATION_OPERATION.MIN\n        ? [MAX_32_BIT_FLOAT, MAX_32_BIT_FLOAT, MAX_32_BIT_FLOAT, 0]\n        : [0, 0, 0, 0];\n    withParameters(gl, {clearColor}, () => {\n      gl.clear(gl.COLOR_BUFFER_BIT);\n    });\n\n    const attributes = {weights: weightAttributes[id]};\n    gridAggregationModel.draw({\n      parameters: Object.assign({}, parameters, {blendEquation: equations[id]}),\n      moduleSettings,\n      uniforms,\n      attributes\n    });\n    framebuffers[id].unbind();\n\n    if (operation === AGGREGATION_OPERATION.MEAN) {\n      const {meanTextures, textures} = this.state;\n      const transformOptions = {\n        _sourceTextures: {aggregationValues: meanTextures[id]}, // contains aggregated data\n        _targetTexture: textures[id], // store mean values,\n        elementCount: textures[id].width * textures[id].height\n      };\n      const meanTransform = this.getMeanTransform(transformOptions);\n      meanTransform.run({\n        parameters: {\n          blend: false,\n          depthTest: false\n        }\n      });\n\n      // update framebuffer with mean results so readPixelsToBuffer returns mean values\n      framebuffers[id].attach({[GL.COLOR_ATTACHMENT0]: textures[id]});\n    }\n  }\n\n  runAggregationOnGPU(opts) {\n    this.updateModels(opts);\n    this.setupFramebuffers(opts);\n    this.renderAggregateData(opts);\n    return this.getAggregateData(opts);\n  }\n\n  // set up framebuffer for each weight\n  /* eslint-disable complexity, max-depth */\n  setupFramebuffers(opts) {\n    const {\n      numCol,\n      numRow,\n      textures,\n      framebuffers,\n      maxMinFramebuffers,\n      minFramebuffers,\n      maxFramebuffers,\n      meanTextures,\n      equations,\n      weights\n    } = this.state;\n    const framebufferSize = {width: numCol, height: numRow};\n    for (const id in weights) {\n      const {needMin, needMax, combineMaxMin, operation} = weights[id];\n      textures[id] =\n        weights[id].aggregationTexture ||\n        textures[id] ||\n        getFloatTexture(this.gl, {id: `${id}-texture`, width: numCol, height: numRow});\n      textures[id].resize(framebufferSize);\n      let texture = textures[id];\n      if (operation === AGGREGATION_OPERATION.MEAN) {\n        // For MEAN, we first aggregatet into a temp texture\n        meanTextures[id] =\n          meanTextures[id] ||\n          getFloatTexture(this.gl, {id: `${id}-mean-texture`, width: numCol, height: numRow});\n        meanTextures[id].resize(framebufferSize);\n        texture = meanTextures[id];\n      }\n      if (framebuffers[id]) {\n        framebuffers[id].attach({[GL.COLOR_ATTACHMENT0]: texture});\n      } else {\n        framebuffers[id] = getFramebuffer(this.gl, {\n          id: `${id}-fb`,\n          width: numCol,\n          height: numRow,\n          texture\n        });\n      }\n      framebuffers[id].resize(framebufferSize);\n      equations[id] = EQUATION_MAP[operation];\n      // For min/max framebuffers will use default size 1X1\n      if (needMin || needMax) {\n        if (needMin && needMax && combineMaxMin) {\n          maxMinFramebuffers[id] =\n            maxMinFramebuffers[id] || getFramebuffer(this.gl, {id: `${id}-maxMinFb`});\n        } else {\n          if (needMin) {\n            minFramebuffers[id] =\n              minFramebuffers[id] || getFramebuffer(this.gl, {id: `${id}-minFb`});\n          }\n          if (needMax) {\n            maxFramebuffers[id] =\n              maxFramebuffers[id] || getFramebuffer(this.gl, {id: `${id}-maxFb`});\n          }\n        }\n      }\n    }\n  }\n  /* eslint-enable complexity, max-depth */\n\n  setupModels(fp64 = false) {\n    if (this.gridAggregationModel) {\n      this.gridAggregationModel.delete();\n    }\n    this.gridAggregationModel = this.getAggregationModel(fp64);\n    if (this.allAggregationModel) {\n      this.allAggregationModel.delete();\n    }\n    this.allAggregationModel = this.getAllAggregationModel(fp64);\n  }\n\n  // set up buffers for all weights\n  setupWeightAttributes(opts) {\n    const {weightAttributes, vertexCount, weights} = this.state;\n    for (const id in weights) {\n      const {values} = weights[id];\n      // values can be Array, Float32Array or Buffer\n      if (Array.isArray(values) || values.constructor === Float32Array) {\n        assert(values.length / 3 === vertexCount);\n        const typedArray = Array.isArray(values) ? new Float32Array(values) : values;\n        if (weightAttributes[id] instanceof Buffer) {\n          weightAttributes[id].setData(typedArray);\n        } else {\n          weightAttributes[id] = new Buffer(this.gl, typedArray);\n        }\n      } else {\n        // assert((values instanceof Attribute) || (values instanceof Buffer));\n        assert(values instanceof Buffer);\n        weightAttributes[id] = values;\n      }\n    }\n  }\n\n  /* eslint-disable max-statements */\n  updateModels(opts) {\n    const {gl} = this;\n    const {positions, positions64xyLow, changeFlags} = opts;\n    const {numCol, numRow} = this.state;\n\n    let {positionsBuffer, positions64xyLowBuffer} = this.state;\n\n    const aggregationModelAttributes = {};\n\n    let createPos64xyLow = false;\n    if (opts.fp64 !== this.state.fp64) {\n      this.setupModels(opts.fp64);\n      this.setState({fp64: opts.fp64});\n      if (opts.fp64) {\n        createPos64xyLow = true;\n      }\n    }\n\n    if (changeFlags.dataChanged || !positionsBuffer) {\n      if (positionsBuffer) {\n        positionsBuffer.delete();\n      }\n      const vertexCount = positions.length / 2;\n      // positionsBuffer = new Buffer(gl, {size: 2, data: new Float32Array(positions)});\n      positionsBuffer = new Buffer(gl, new Float32Array(positions));\n      createPos64xyLow = opts.fp64;\n      Object.assign(aggregationModelAttributes, {\n        positions: positionsBuffer\n      });\n      this.setState({positionsBuffer, vertexCount});\n\n      this.setupWeightAttributes(opts);\n      this.gridAggregationModel.setVertexCount(vertexCount);\n    }\n\n    if (createPos64xyLow) {\n      assert(positions64xyLow);\n      if (positions64xyLowBuffer) {\n        positions64xyLowBuffer.delete();\n      }\n      positions64xyLowBuffer = new Buffer(gl, {size: 2, data: new Float32Array(positions64xyLow)});\n      Object.assign(aggregationModelAttributes, {\n        positions64xyLow: positions64xyLowBuffer\n      });\n      this.setState({positions64xyLowBuffer});\n    }\n\n    this.gridAggregationModel.setAttributes(aggregationModelAttributes);\n\n    if (changeFlags.cellSizeChanged || changeFlags.viewportChanged) {\n      this.allAggregationModel.setInstanceCount(numCol * numRow);\n    }\n  }\n  /* eslint-enable max-statements */\n}\n"],"file":"gpu-grid-aggregator.js"}