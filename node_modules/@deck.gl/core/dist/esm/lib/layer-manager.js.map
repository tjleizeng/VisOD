{"version":3,"sources":["../../../src/lib/layer-manager.js"],"names":["assert","Framebuffer","_ShaderCache","ShaderCache","seer","Layer","drawLayers","pickObject","pickVisibleObjects","LIFECYCLE","log","flatten","Stats","Viewport","setPropOverrides","layerEditListener","seerInitListener","initLayerInSeer","updateLayerInSeer","LOG_PRIORITY_LIFECYCLE","LOG_PRIORITY_LIFECYCLE_MINOR","INITIAL_CONTEXT","Object","seal","layerManager","gl","useDevicePixels","stats","shaderCache","pickingFBO","pickingEvent","lastPickedInfo","animationProps","userData","layerName","layer","LayerManager","viewport","lastRenderedLayers","layers","context","assign","_cachePrograms","id","index","layerId","info","layerFilter","drawPickingColors","_needsRedraw","_needsUpdate","_debug","_activateViewport","bind","_initSeer","_editSeer","removeListener","clearRedrawFlags","_checkIfNeedsRedraw","reason","layerIds","filter","find","indexOf","props","debug","setLayers","setNeedsRedraw","newLayers","Boolean","_updateLayers","oldLayers","error","generatedLayers","needsUpdate","pass","viewports","views","redrawReason","customRender","onViewportActive","x","y","lastPickedLayerId","l","coordinate","unproject","lngLat","color","object","mode","radius","depth","event","getLayers","result","_getPickingBuffer","width","height","redraw","layerNeedsRedraw","getNeedsRedraw","oldViewport","viewportChanged","equals","setChangeFlags","_updateLayer","resize","canvas","oldLayerMap","oldLayer","warn","_updateSublayersRecursively","error2","_finalizeOldLayers","firstError","newLayer","sublayers","validateProps","_initializeLayer","_transferLayerState","push","isComposite","getSubLayers","err","_finalizeLayer","_initialize","lifecycle","INITIALIZED","internalState","getModels","model","_transferState","MATCHED","AWAITING_GC","printChangeFlags","_update","AWAITING_FINALIZATION","_finalize","FINALIZED","forEach","payload","type","valuePath","itemKey","slice","value","map","constructor","updateLayers"],"mappings":"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","sourcesContent":["// Copyright (c) 2015 - 2017 Uber Technologies, Inc.\n//\n// Permission is hereby granted, free of charge, to any person obtaining a copy\n// of this software and associated documentation files (the \"Software\"), to deal\n// in the Software without restriction, including without limitation the rights\n// to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n// copies of the Software, and to permit persons to whom the Software is\n// furnished to do so, subject to the following conditions:\n//\n// The above copyright notice and this permission notice shall be included in\n// all copies or substantial portions of the Software.\n//\n// THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\n// THE SOFTWARE.\n\nimport assert from '../utils/assert';\nimport {Framebuffer, _ShaderCache as ShaderCache} from 'luma.gl';\nimport seer from 'seer';\nimport Layer from './layer';\nimport {drawLayers} from './draw-layers';\nimport {pickObject, pickVisibleObjects} from './pick-layers';\nimport {LIFECYCLE} from '../lifecycle/constants';\nimport log from '../utils/log';\nimport {flatten} from '../utils/flatten';\nimport {Stats} from 'probe.gl';\n\nimport Viewport from '../viewports/viewport';\n\nimport {\n  setPropOverrides,\n  layerEditListener,\n  seerInitListener,\n  initLayerInSeer,\n  updateLayerInSeer\n} from './seer-integration';\n\nconst LOG_PRIORITY_LIFECYCLE = 2;\nconst LOG_PRIORITY_LIFECYCLE_MINOR = 4;\n\n// CONTEXT IS EXPOSED TO LAYERS\nconst INITIAL_CONTEXT = Object.seal({\n  layerManager: null,\n  gl: null,\n\n  // Settings\n  useDevicePixels: true, // Exposed in case custom layers need to adjust sizes\n\n  // General resources\n  stats: null, // for tracking lifecycle performance\n\n  // GL Resources\n  shaderCache: null,\n  pickingFBO: null, // Screen-size framebuffer that layers can reuse\n\n  // State\n  pickingEvent: null,\n  lastPickedInfo: null,\n\n  animationProps: null,\n\n  userData: {} // Place for any custom app `context`\n});\n\nconst layerName = layer => (layer instanceof Layer ? `${layer}` : !layer ? 'null' : 'invalid');\n\nexport default class LayerManager {\n  // eslint-disable-next-line\n  constructor(gl, {stats, viewport = null} = {}) {\n    // Currently deck.gl expects the DeckGL.layers array to be different\n    // whenever React rerenders. If the same layers array is used, the\n    // LayerManager's diffing algorithm will generate a fatal error and\n    // break the rendering.\n\n    // `this.lastRenderedLayers` stores the UNFILTERED layers sent\n    // down to LayerManager, so that `layers` reference can be compared.\n    // If it's the same across two React render calls, the diffing logic\n    // will be skipped.\n    this.lastRenderedLayers = [];\n    this.layers = [];\n\n    this.context = Object.assign({}, INITIAL_CONTEXT, {\n      layerManager: this,\n\n      gl,\n      // Enabling luma.gl Program caching using private API (_cachePrograms)\n      shaderCache: gl && new ShaderCache({gl, _cachePrograms: true}),\n      stats: stats || new Stats({id: 'deck.gl'}),\n      lastPickedInfo: {\n        // For callback tracking and autohighlight\n        index: -1,\n        layerId: null,\n        info: null\n      },\n      // Make sure context.viewport is not empty on the first layer initialization\n      viewport: viewport || new Viewport({id: 'DEFAULT-INITIAL-VIEWPORT'}) // Current viewport, exposed to layers for project* function\n    });\n\n    this.layerFilter = null;\n    this.drawPickingColors = false;\n\n    this._needsRedraw = 'Initial render';\n    this._needsUpdate = false;\n    this._debug = false;\n\n    this._activateViewport = this._activateViewport.bind(this);\n\n    // Seer integration\n    this._initSeer = this._initSeer.bind(this);\n    this._editSeer = this._editSeer.bind(this);\n\n    Object.seal(this);\n\n    seerInitListener(this._initSeer);\n    layerEditListener(this._editSeer);\n  }\n\n  // Method to call when the layer manager is not needed anymore.\n  // Currently used in the <DeckGL> componentWillUnmount lifecycle to unbind Seer listeners.\n  finalize() {\n    seer.removeListener(this._initSeer);\n    seer.removeListener(this._editSeer);\n  }\n\n  // Check if a redraw is needed\n  needsRedraw({clearRedrawFlags = true} = {}) {\n    return this._checkIfNeedsRedraw(clearRedrawFlags);\n  }\n\n  // Check if a deep update of all layers is needed\n  needsUpdate() {\n    return this._needsUpdate;\n  }\n\n  // Layers will be redrawn (in next animation frame)\n  setNeedsRedraw(reason) {\n    this._needsRedraw = this._needsRedraw || reason;\n  }\n\n  // Layers will be updated deeply (in next animation frame)\n  // Potentially regenerating attributes and sub layers\n  setNeedsUpdate(reason) {\n    this._needsUpdate = this._needsUpdate || reason;\n  }\n\n  // Gets an (optionally) filtered list of layers\n  getLayers({layerIds = null} = {}) {\n    // Filtering by layerId compares beginning of strings, so that sublayers will be included\n    // Dependes on the convention of adding suffixes to the parent's layer name\n    return layerIds\n      ? this.layers.filter(layer => layerIds.find(layerId => layer.id.indexOf(layerId) === 0))\n      : this.layers;\n  }\n\n  /**\n   * Set props needed for layer rendering and picking.\n   * Parameters are to be passed as a single object, with the following values:\n   * @param {Boolean} useDevicePixels\n   */\n  /* eslint-disable complexity, max-statements */\n  setProps(props) {\n    if ('debug' in props) {\n      this._debug = props.debug;\n    }\n\n    // A way for apps to add data to context that can be accessed in layers\n    if ('userData' in props) {\n      this.context.userData = props.userData;\n    }\n\n    if ('useDevicePixels' in props) {\n      this.context.useDevicePixels = props.useDevicePixels;\n    }\n\n    // TODO - For now we set layers before viewports to preserve changeFlags\n    if ('layers' in props) {\n      this.setLayers(props.layers);\n    }\n\n    if ('layerFilter' in props) {\n      if (this.layerFilter !== props.layerFilter) {\n        this.layerFilter = props.layerFilter;\n        this.setNeedsRedraw('layerFilter changed');\n      }\n    }\n\n    if ('drawPickingColors' in props) {\n      if (props.drawPickingColors !== this.drawPickingColors) {\n        this.drawPickingColors = props.drawPickingColors;\n        this.setNeedsRedraw('drawPickingColors changed');\n      }\n    }\n  }\n  /* eslint-enable complexity, max-statements */\n\n  // Supply a new layer list, initiating sublayer generation and layer matching\n  setLayers(newLayers) {\n    // TODO - something is generating state updates that cause rerender of the same\n    if (newLayers === this.lastRenderedLayers) {\n      log.log(3, 'Ignoring layer update due to layer array not changed')();\n      return this;\n    }\n    this.lastRenderedLayers = newLayers;\n\n    newLayers = flatten(newLayers, {filter: Boolean});\n\n    for (const layer of newLayers) {\n      layer.context = this.context;\n    }\n\n    const {error, generatedLayers} = this._updateLayers({\n      oldLayers: this.layers,\n      newLayers\n    });\n\n    this.layers = generatedLayers;\n\n    // Throw first error found, if any\n    if (error) {\n      throw error;\n    }\n    return this;\n  }\n\n  // Update layers from last cycle if `setNeedsUpdate()` has been called\n  updateLayers() {\n    // NOTE: For now, even if only some layer has changed, we update all layers\n    // to ensure that layer id maps etc remain consistent even if different\n    // sublayers are rendered\n    const reason = this.needsUpdate();\n    if (reason) {\n      this.setNeedsRedraw(`updating layers: ${reason}`);\n      // HACK - Call with a copy of lastRenderedLayers to trigger a full update\n      this.setLayers([...this.lastRenderedLayers]);\n    }\n  }\n\n  //\n  // METHODS FOR LAYERS\n  //\n\n  // Draw all layers in all views\n  drawLayers({\n    pass = 'render to screen',\n    viewports,\n    views,\n    redrawReason = 'unknown reason',\n    customRender = false\n  }) {\n    const {drawPickingColors} = this;\n    const {gl, useDevicePixels} = this.context;\n\n    // render this viewport\n    drawLayers(gl, {\n      layers: this.layers,\n      viewports,\n      views,\n      onViewportActive: this._activateViewport,\n      useDevicePixels,\n      drawPickingColors,\n      pass,\n      layerFilter: this.layerFilter,\n      redrawReason,\n      customRender\n    });\n  }\n\n  // Returns a new picking info object by assuming the last picked object is still picked\n  getLastPickedObject({x, y, viewports}) {\n    const lastPickedInfo = this.context.lastPickedInfo.info;\n    const lastPickedLayerId = lastPickedInfo && lastPickedInfo.layer && lastPickedInfo.layer.id;\n    const layer = lastPickedLayerId ? this.layers.find(l => l.id === lastPickedLayerId) : null;\n    const coordinate = viewports[0] && viewports[0].unproject([x, y]);\n\n    const info = {\n      x,\n      y,\n      coordinate,\n      // TODO remove the lngLat prop after compatibility check\n      lngLat: coordinate,\n      layer\n    };\n\n    if (layer) {\n      return Object.assign({}, lastPickedInfo, info);\n    }\n    return Object.assign(info, {color: null, object: null, index: -1});\n  }\n\n  // Pick the closest info at given coordinate\n  pickObject({x, y, mode, radius = 0, layerIds, viewports, depth = 1, event = null}) {\n    const {gl, useDevicePixels} = this.context;\n    // Allow layers to access the event\n    this.context.pickingEvent = event;\n\n    const layers = this.getLayers({layerIds});\n\n    const result = pickObject(gl, {\n      // User params\n      x,\n      y,\n      radius,\n      layers,\n      mode,\n      layerFilter: this.layerFilter,\n      depth,\n      // Injected params\n      viewports,\n      onViewportActive: this._activateViewport,\n      pickingFBO: this._getPickingBuffer(),\n      lastPickedInfo: this.context.lastPickedInfo,\n      useDevicePixels\n    });\n\n    // Clear the current event\n    this.context.pickingEvent = null;\n    return result;\n  }\n\n  // Get all unique infos within a bounding box\n  pickObjects({x, y, width, height, layerIds, viewports}) {\n    const {gl, useDevicePixels} = this.context;\n\n    const layers = this.getLayers({layerIds});\n\n    return pickVisibleObjects(gl, {\n      x,\n      y,\n      width,\n      height,\n      layers,\n      layerFilter: this.layerFilter,\n      mode: 'pickObjects',\n      viewports,\n      onViewportActive: this._activateViewport,\n      pickingFBO: this._getPickingBuffer(),\n      useDevicePixels\n    });\n  }\n\n  //\n  // PRIVATE METHODS\n  //\n\n  _checkIfNeedsRedraw(clearRedrawFlags) {\n    let redraw = this._needsRedraw;\n    if (clearRedrawFlags) {\n      this._needsRedraw = false;\n    }\n\n    // This layers list doesn't include sublayers, relying on composite layers\n    for (const layer of this.layers) {\n      // Call every layer to clear their flags\n      const layerNeedsRedraw = layer.getNeedsRedraw({clearRedrawFlags});\n      redraw = redraw || layerNeedsRedraw;\n    }\n\n    return redraw;\n  }\n\n  // Make a viewport \"current\" in layer context, updating viewportChanged flags\n  _activateViewport(viewport) {\n    const oldViewport = this.context.viewport;\n    const viewportChanged = !oldViewport || !viewport.equals(oldViewport);\n\n    if (viewportChanged) {\n      log.log(4, 'Viewport changed', viewport)();\n\n      this.context.viewport = viewport;\n\n      // Update layers states\n      // Let screen space layers update their state based on viewport\n      for (const layer of this.layers) {\n        layer.setChangeFlags({viewportChanged: 'Viewport changed'});\n        this._updateLayer(layer);\n      }\n    }\n\n    assert(this.context.viewport, 'LayerManager: viewport not set');\n\n    return this;\n  }\n\n  _getPickingBuffer() {\n    const {gl} = this.context;\n    // Create a frame buffer if not already available\n    this.context.pickingFBO = this.context.pickingFBO || new Framebuffer(gl);\n    // Resize it to current canvas size (this is a noop if size hasn't changed)\n    this.context.pickingFBO.resize({width: gl.canvas.width, height: gl.canvas.height});\n    return this.context.pickingFBO;\n  }\n\n  // Match all layers, checking for caught errors\n  // To avoid having an exception in one layer disrupt other layers\n  // TODO - mark layers with exceptions as bad and remove from rendering cycle?\n  _updateLayers({oldLayers, newLayers}) {\n    // Create old layer map\n    const oldLayerMap = {};\n    for (const oldLayer of oldLayers) {\n      if (oldLayerMap[oldLayer.id]) {\n        log.warn(`Multiple old layers with same id ${layerName(oldLayer)}`)();\n      } else {\n        oldLayerMap[oldLayer.id] = oldLayer;\n      }\n    }\n\n    // Allocate array for generated layers\n    const generatedLayers = [];\n\n    // Match sublayers\n    const error = this._updateSublayersRecursively({\n      newLayers,\n      oldLayerMap,\n      generatedLayers\n    });\n\n    // Finalize unmatched layers\n    const error2 = this._finalizeOldLayers(oldLayerMap);\n\n    this._needsUpdate = false;\n\n    const firstError = error || error2;\n    return {error: firstError, generatedLayers};\n  }\n\n  // Note: adds generated layers to `generatedLayers` array parameter\n  _updateSublayersRecursively({newLayers, oldLayerMap, generatedLayers}) {\n    let error = null;\n\n    for (const newLayer of newLayers) {\n      newLayer.context = this.context;\n\n      // Given a new coming layer, find its matching old layer (if any)\n      const oldLayer = oldLayerMap[newLayer.id];\n      if (oldLayer === null) {\n        // null, rather than undefined, means this id was originally there\n        log.warn(`Multiple new layers with same id ${layerName(newLayer)}`)();\n      }\n      // Remove the old layer from candidates, as it has been matched with this layer\n      oldLayerMap[newLayer.id] = null;\n\n      let sublayers = null;\n\n      // We must not generate exceptions until after layer matching is complete\n      try {\n        if (this._debug && oldLayer !== newLayer) {\n          newLayer.validateProps();\n        }\n\n        if (!oldLayer) {\n          this._initializeLayer(newLayer);\n          initLayerInSeer(newLayer); // Initializes layer in seer chrome extension (if connected)\n        } else {\n          this._transferLayerState(oldLayer, newLayer);\n          this._updateLayer(newLayer);\n          updateLayerInSeer(newLayer); // Updates layer in seer chrome extension (if connected)\n        }\n        generatedLayers.push(newLayer);\n\n        // Call layer lifecycle method: render sublayers\n        sublayers = newLayer.isComposite && newLayer.getSubLayers();\n        // End layer lifecycle method: render sublayers\n      } catch (err) {\n        log.warn(`error during matching of ${layerName(newLayer)}`, err)();\n        error = error || err; // Record first exception\n      }\n\n      if (sublayers) {\n        this._updateSublayersRecursively({\n          newLayers: sublayers,\n          oldLayerMap,\n          generatedLayers\n        });\n      }\n    }\n\n    return error;\n  }\n\n  // Finalize any old layers that were not matched\n  _finalizeOldLayers(oldLayerMap) {\n    let error = null;\n    for (const layerId in oldLayerMap) {\n      const layer = oldLayerMap[layerId];\n      if (layer) {\n        error = error || this._finalizeLayer(layer);\n      }\n    }\n    return error;\n  }\n\n  // EXCEPTION SAFE LAYER ACCESS\n\n  // Initializes a single layer, calling layer methods\n  _initializeLayer(layer) {\n    log.log(LOG_PRIORITY_LIFECYCLE, `initializing ${layerName(layer)}`)();\n\n    let error = null;\n    try {\n      layer._initialize();\n      layer.lifecycle = LIFECYCLE.INITIALIZED;\n    } catch (err) {\n      log.warn(`error while initializing ${layerName(layer)}\\n`, err)();\n      error = error || err;\n      // TODO - what should the lifecycle state be here? LIFECYCLE.INITIALIZATION_FAILED?\n    }\n\n    // Set back pointer (used in picking)\n    layer.internalState.layer = layer;\n\n    // Save layer on model for picking purposes\n    // store on model.userData rather than directly on model\n    for (const model of layer.getModels()) {\n      model.userData.layer = layer;\n    }\n\n    return error;\n  }\n\n  _transferLayerState(oldLayer, newLayer) {\n    newLayer._transferState(oldLayer);\n    newLayer.lifecycle = LIFECYCLE.MATCHED;\n\n    if (newLayer !== oldLayer) {\n      log.log(\n        LOG_PRIORITY_LIFECYCLE_MINOR,\n        `matched ${layerName(newLayer)}`,\n        oldLayer,\n        '->',\n        newLayer\n      )();\n      oldLayer.lifecycle = LIFECYCLE.AWAITING_GC;\n    } else {\n      log.log(LOG_PRIORITY_LIFECYCLE_MINOR, `Matching layer is unchanged ${newLayer.id}`)();\n    }\n  }\n\n  // Updates a single layer, cleaning all flags\n  _updateLayer(layer) {\n    log.log(\n      LOG_PRIORITY_LIFECYCLE_MINOR,\n      `updating ${layer} because: ${layer.printChangeFlags()}`\n    )();\n    let error = null;\n    try {\n      layer._update();\n    } catch (err) {\n      log.warn(`error during update of ${layerName(layer)}`, err)();\n      // Save first error\n      error = err;\n    }\n    return error;\n  }\n\n  // Finalizes a single layer\n  _finalizeLayer(layer) {\n    assert(layer.lifecycle !== LIFECYCLE.AWAITING_FINALIZATION);\n    layer.lifecycle = LIFECYCLE.AWAITING_FINALIZATION;\n    let error = null;\n    this.setNeedsRedraw(`finalized ${layerName(layer)}`);\n    try {\n      layer._finalize();\n    } catch (err) {\n      log.warn(`error during finalization of ${layerName(layer)}`, err)();\n      error = err;\n    }\n    layer.lifecycle = LIFECYCLE.FINALIZED;\n    log.log(LOG_PRIORITY_LIFECYCLE, `finalizing ${layerName(layer)}`)();\n    return error;\n  }\n\n  // SEER INTEGRATION\n\n  /**\n   * Called upon Seer initialization, manually sends layers data.\n   */\n  _initSeer() {\n    this.layers.forEach(layer => {\n      initLayerInSeer(layer);\n      updateLayerInSeer(layer);\n    });\n  }\n\n  /**\n   * On Seer property edition, set override and update layers.\n   */\n  _editSeer(payload) {\n    if (payload.type !== 'edit' || payload.valuePath[0] !== 'props') {\n      return;\n    }\n\n    setPropOverrides(payload.itemKey, payload.valuePath.slice(1), payload.value);\n    const newLayers = this.layers.map(layer => new layer.constructor(layer.props));\n    this.updateLayers({newLayers});\n  }\n}\n"],"file":"layer-manager.js"}