{"version":3,"sources":["../../../src/controllers/orthographic-controller.js"],"names":["Controller","ViewState","Vector2","clamp","MOVEMENT_SPEED","DEFAULT_STATE","zoom","offset","minZoom","maxZoom","zoom2Scale","Math","pow","OrthographicState","width","height","startPanPosition","startPanOffset","startZoomPosition","startZoom","_interactiveState","pos","_viewportProps","_getUpdatedState","delta","subtract","deltaScaleX","deltaScaleY","scale","log2","startPos","Number","isFinite","newZoom","_calculateNewZoom","startScale","newScale","centerX","centerY","dX","dY","_zoomFromCenter","add","newProps","Object","assign","OrthographicController","props","invertPan","event","dragRotate","_onPanRotateMap"],"mappings":";;;;;;;;;;;;;;;;;;AAAA,OAAOA,UAAP,MAAuB,cAAvB;AACA,OAAOC,SAAP,MAAsB,cAAtB;AAEA,SAAQC,OAAR,EAAiBC,KAAjB,QAA6B,SAA7B;AAEA,IAAMC,cAAc,GAAG,EAAvB,C,CAA2B;;AAE3B,IAAMC,aAAa,GAAG;AACpBC,EAAAA,IAAI,EAAE,CADc;AAEpBC,EAAAA,MAAM,EAAE,CAAC,CAAD,EAAI,CAAJ,CAFY;AAGpBC,EAAAA,OAAO,EAAE,CAAC,EAHU;AAIpBC,EAAAA,OAAO,EAAE;AAJW,CAAtB;;AAOA,IAAMC,UAAU,GAAG,SAAbA,UAAa,CAAAJ,IAAI;AAAA,SAAIK,IAAI,CAACC,GAAL,CAAS,CAAT,EAAYN,IAAZ,CAAJ;AAAA,CAAvB;;IAEMO,iB;;;;;AACJ,mCAkBG;AAAA;;AAAA,QAhBDC,KAgBC,QAhBDA,KAgBC;AAAA,QAfDC,MAeC,QAfDA,MAeC;AAAA,2BAdDR,MAcC;AAAA,QAdDA,MAcC,4BAdQF,aAAa,CAACE,MActB;AAAA,yBAbDD,IAaC;AAAA,QAbDA,IAaC,0BAbMD,aAAa,CAACC,IAapB;AAAA,4BAZDE,OAYC;AAAA,QAZDA,OAYC,6BAZSH,aAAa,CAACG,OAYvB;AAAA,4BAXDC,OAWC;AAAA,QAXDA,OAWC,6BAXSJ,aAAa,CAACI,OAWvB;AAAA,QAPDO,gBAOC,QAPDA,gBAOC;AAAA,QALDC,cAKC,QALDA,cAKC;AAAA,QAHDC,iBAGC,QAHDA,iBAGC;AAAA,QADDC,SACC,QADDA,SACC;;AAAA;;AACD,2FAAM;AACJL,MAAAA,KAAK,EAALA,KADI;AAEJC,MAAAA,MAAM,EAANA,MAFI;AAGJR,MAAAA,MAAM,EAANA,MAHI;AAIJD,MAAAA,IAAI,EAAJA,IAJI;AAKJE,MAAAA,OAAO,EAAPA,OALI;AAMJC,MAAAA,OAAO,EAAPA;AANI,KAAN;AAQA,UAAKW,iBAAL,GAAyB;AACvBJ,MAAAA,gBAAgB,EAAhBA,gBADuB;AAEvBC,MAAAA,cAAc,EAAdA,cAFuB;AAGvBC,MAAAA,iBAAiB,EAAjBA,iBAHuB;AAIvBC,MAAAA,SAAS,EAATA;AAJuB,KAAzB;AATC;AAeF;AAED;;;;;0CAEsB;AACpB,aAAO,KAAKC,iBAAZ;AACD;AAED;;;;;;;oCAIgB;AAAA,UAANC,GAAM,SAANA,GAAM;AAAA,UACPd,MADO,GACG,KAAKe,cADR,CACPf,MADO;AAEd,aAAO,KAAKgB,gBAAL,CAAsB;AAC3BP,QAAAA,gBAAgB,EAAEK,GADS;AAE3BJ,QAAAA,cAAc,EAAEV;AAFW,OAAtB,CAAP;AAID;AAED;;;;;;;+BAIW;AAAA,UAANc,GAAM,SAANA,GAAM;AAAA,kCACkC,KAAKD,iBADvC;AAAA,UACFJ,gBADE,yBACFA,gBADE;AAAA,UACgBC,cADhB,yBACgBA,cADhB;AAET,UAAMO,KAAK,GAAG,IAAItB,OAAJ,CAAYmB,GAAZ,EAAiBI,QAAjB,CAA0BT,gBAA1B,CAAd;AACA,aAAO,KAAKO,gBAAL,CAAsB;AAC3BhB,QAAAA,MAAM,EAAE,IAAIL,OAAJ,CAAYe,cAAZ,EAA4BQ,QAA5B,CAAqCD,KAArC;AADmB,OAAtB,CAAP;AAGD;AAED;;;;;;;6BAIS;AACP,aAAO,KAAKD,gBAAL,CAAsB;AAC3BP,QAAAA,gBAAgB,EAAE,IADS;AAE3BC,QAAAA,cAAc,EAAE;AAFW,OAAtB,CAAP;AAID;AAED;;;;;;;uCAImB;AAAA,UAANI,GAAM,SAANA,GAAM;AACjB,aAAO,IAAP;AACD;AAED;;;;;;;kCAImC;AAAA,UAA3BK,WAA2B,SAA3BA,WAA2B;AAAA,UAAdC,WAAc,SAAdA,WAAc;AACjC,aAAO,IAAP;AACD;AAED;;;;;;;gCAIY;AACV,aAAO,IAAP;AACD,K,CAED;;;;6CACsC;AAAA,UAAnBC,KAAmB,SAAnBA,KAAmB;AAAA,UAAZT,SAAY,SAAZA,SAAY;AAAA,iCACT,KAAKG,cADI;AAAA,UAC7Bb,OAD6B,wBAC7BA,OAD6B;AAAA,UACpBD,OADoB,wBACpBA,OADoB;AAEpC,UAAMF,IAAI,GAAGa,SAAS,GAAGR,IAAI,CAACkB,IAAL,CAAUD,KAAV,CAAzB;AACA,aAAOzB,KAAK,CAACG,IAAD,EAAOE,OAAP,EAAgBC,OAAhB,CAAZ;AACD;AAED;;;;;;;qCAIiB;AAAA,UAANY,GAAM,SAANA,GAAM;AACf,aAAO,KAAKE,gBAAL,CAAsB;AAC3BL,QAAAA,iBAAiB,EAAEG,GADQ;AAE3BF,QAAAA,SAAS,EAAE,KAAKG,cAAL,CAAoBhB;AAFJ,OAAtB,CAAP;AAID;AAED;;;;;;;;;gCAM6B;AAAA,UAAvBe,GAAuB,SAAvBA,GAAuB;AAAA,UAAlBS,QAAkB,SAAlBA,QAAkB;AAAA,UAARF,KAAQ,SAARA,KAAQ;AAAA,kCACW,KAAKN,cADhB;AAAA,UACpBhB,IADoB,yBACpBA,IADoB;AAAA,UACdQ,KADc,yBACdA,KADc;AAAA,UACPC,MADO,yBACPA,MADO;AAAA,UACCR,MADD,yBACCA,MADD;AAAA,mCAEU,KAAKa,iBAFf;AAAA,UAEtBD,SAFsB,0BAEtBA,SAFsB;AAAA,UAEXD,iBAFW,0BAEXA,iBAFW;;AAG3B,UAAI,CAACa,MAAM,CAACC,QAAP,CAAgBb,SAAhB,CAAL,EAAiC;AAC/B;AACA;AACA;AACA;AACA;AACA;AACAA,QAAAA,SAAS,GAAGb,IAAZ;AACAY,QAAAA,iBAAiB,GAAGY,QAAQ,IAAIT,GAAhC;AACD;;AAED,UAAMY,OAAO,GAAG,KAAKC,iBAAL,CAAuB;AAACN,QAAAA,KAAK,EAALA,KAAD;AAAQT,QAAAA,SAAS,EAATA;AAAR,OAAvB,CAAhB;;AACA,UAAMgB,UAAU,GAAGzB,UAAU,CAACS,SAAD,CAA7B;AACA,UAAMiB,QAAQ,GAAG1B,UAAU,CAACuB,OAAD,CAA3B;AAEA,UAAMI,OAAO,GAAGvB,KAAK,GAAG,CAAR,GAAYP,MAAM,CAAC,CAAD,CAAlC;AACA,UAAM+B,OAAO,GAAGvB,MAAM,GAAG,CAAT,GAAaR,MAAM,CAAC,CAAD,CAAnC;AACA,UAAMgC,EAAE,GAAG,CAACrB,iBAAiB,CAAC,CAAD,CAAjB,GAAuBmB,OAAxB,KAAoCD,QAAQ,GAAGD,UAAX,GAAwB,CAA5D,CAAX;AACA,UAAMK,EAAE,GAAG,CAACtB,iBAAiB,CAAC,CAAD,CAAjB,GAAuBoB,OAAxB,KAAoCF,QAAQ,GAAGD,UAAX,GAAwB,CAA5D,CAAX;AAEA,aAAO,KAAKZ,gBAAL,CAAsB;AAC3BjB,QAAAA,IAAI,EAAE2B,OADqB;AAE3B1B,QAAAA,MAAM,EAAE,CAACA,MAAM,CAAC,CAAD,CAAN,GAAYgC,EAAb,EAAiBhC,MAAM,CAAC,CAAD,CAAN,GAAYiC,EAA7B;AAFmB,OAAtB,CAAP;AAID;AAED;;;;;;;8BAIU;AACR,aAAO,KAAKjB,gBAAL,CAAsB;AAC3BL,QAAAA,iBAAiB,EAAE,IADQ;AAE3BC,QAAAA,SAAS,EAAE;AAFgB,OAAtB,CAAP;AAID;;;oCAEeS,K,EAAO;AAAA,kCACW,KAAKN,cADhB;AAAA,UACdR,KADc,yBACdA,KADc;AAAA,UACPC,MADO,yBACPA,MADO;AAAA,UACCR,MADD,yBACCA,MADD;AAErB,aAAO,KAAKD,IAAL,CAAU;AACfe,QAAAA,GAAG,EAAE,CAACP,KAAK,GAAG,CAAR,GAAYP,MAAM,CAAC,CAAD,CAAnB,EAAwBQ,MAAM,GAAG,CAAT,GAAaR,MAAM,CAAC,CAAD,CAA3C,CADU;AAEfqB,QAAAA,KAAK,EAALA;AAFe,OAAV,CAAP;AAID;;;6BAEQ;AACP,aAAO,KAAKa,eAAL,CAAqB,CAArB,CAAP;AACD;;;8BAES;AACR,aAAO,KAAKA,eAAL,CAAqB,GAArB,CAAP;AACD;;;+BAEU;AAAA,UACFlC,MADE,GACQ,KAAKe,cADb,CACFf,MADE;AAET,UAAMiB,KAAK,GAAG,CAACpB,cAAD,EAAiB,CAAjB,CAAd;AACA,aAAO,KAAKmB,gBAAL,CAAsB;AAC3BhB,QAAAA,MAAM,EAAE,IAAIL,OAAJ,CAAYK,MAAZ,EAAoBmC,GAApB,CAAwBlB,KAAxB;AADmB,OAAtB,CAAP;AAGD;;;gCAEW;AAAA,UACHjB,MADG,GACO,KAAKe,cADZ,CACHf,MADG;AAEV,UAAMiB,KAAK,GAAG,CAAC,CAACpB,cAAF,EAAkB,CAAlB,CAAd;AACA,aAAO,KAAKmB,gBAAL,CAAsB;AAC3BhB,QAAAA,MAAM,EAAE,IAAIL,OAAJ,CAAYK,MAAZ,EAAoBmC,GAApB,CAAwBlB,KAAxB;AADmB,OAAtB,CAAP;AAGD;;;6BAEQ;AAAA,UACAjB,MADA,GACU,KAAKe,cADf,CACAf,MADA;AAEP,UAAMiB,KAAK,GAAG,CAAC,CAAD,EAAIpB,cAAJ,CAAd;AACA,aAAO,KAAKmB,gBAAL,CAAsB;AAC3BhB,QAAAA,MAAM,EAAE,IAAIL,OAAJ,CAAYK,MAAZ,EAAoBmC,GAApB,CAAwBlB,KAAxB;AADmB,OAAtB,CAAP;AAGD;;;+BAEU;AAAA,UACFjB,MADE,GACQ,KAAKe,cADb,CACFf,MADE;AAET,UAAMiB,KAAK,GAAG,CAAC,CAAD,EAAI,CAACpB,cAAL,CAAd;AACA,aAAO,KAAKmB,gBAAL,CAAsB;AAC3BhB,QAAAA,MAAM,EAAE,IAAIL,OAAJ,CAAYK,MAAZ,EAAoBmC,GAApB,CAAwBlB,KAAxB;AADmB,OAAtB,CAAP;AAGD;AAED;;;;qCAEiBmB,Q,EAAU;AACzB;AACA,aAAO,IAAI9B,iBAAJ,CACL+B,MAAM,CAACC,MAAP,CAAc,EAAd,EAAkB,KAAKvB,cAAvB,EAAuC,KAAKF,iBAA5C,EAA+DuB,QAA/D,CADK,CAAP;AAGD;;;;EA5N6B1C,S;;IA+NX6C,sB;;;;;AACnB,kCAAYC,KAAZ,EAAmB;AAAA;;AAAA;;AACjB,iGAAMlC,iBAAN,EAAyBkC,KAAzB;AACA,WAAKC,SAAL,GAAiB,IAAjB;AAFiB;AAGlB;;;;iCAEYC,K,EAAO;AAClB,UAAI,CAAC,KAAKC,UAAV,EAAsB;AACpB,eAAO,KAAP;AACD;;AACD,aAAO,KAAKC,eAAL,CAAqBF,KAArB,CAAP;AACD;;;;EAXiDjD,U;;SAA/B8C,sB","sourcesContent":["import Controller from './controller';\nimport ViewState from './view-state';\n\nimport {Vector2, clamp} from 'math.gl';\n\nconst MOVEMENT_SPEED = 10; // per keyboard click\n\nconst DEFAULT_STATE = {\n  zoom: 0,\n  offset: [0, 0],\n  minZoom: -10,\n  maxZoom: 10\n};\n\nconst zoom2Scale = zoom => Math.pow(2, zoom);\n\nclass OrthographicState extends ViewState {\n  constructor({\n    /* Viewport arguments */\n    width, // Width of viewport\n    height, // Height of viewport\n    offset = DEFAULT_STATE.offset, // Offset to the origin\n    zoom = DEFAULT_STATE.zoom, // Zoom level of the view\n    minZoom = DEFAULT_STATE.minZoom,\n    maxZoom = DEFAULT_STATE.maxZoom,\n\n    /** Interaction states */\n    /* The point on the view being grabbed when the operation first started */\n    startPanPosition,\n    /* The offset on the view being grabbed when the operation first started */\n    startPanOffset,\n    /* The point on the view being zoomed when the operation first started */\n    startZoomPosition,\n    /** The zoom level when the first zoom operation started */\n    startZoom\n  }) {\n    super({\n      width,\n      height,\n      offset,\n      zoom,\n      minZoom,\n      maxZoom\n    });\n    this._interactiveState = {\n      startPanPosition,\n      startPanOffset,\n      startZoomPosition,\n      startZoom\n    };\n  }\n\n  /* Public API */\n\n  getInteractiveState() {\n    return this._interactiveState;\n  }\n\n  /**\n   * Start panning\n   * @param {[Number, Number]} pos - position on screen where the pointer grabs\n   */\n  panStart({pos}) {\n    const {offset} = this._viewportProps;\n    return this._getUpdatedState({\n      startPanPosition: pos,\n      startPanOffset: offset\n    });\n  }\n\n  /**\n   * Pan\n   * @param {[Number, Number]} pos - position on screen where the pointer is\n   */\n  pan({pos}) {\n    const {startPanPosition, startPanOffset} = this._interactiveState;\n    const delta = new Vector2(pos).subtract(startPanPosition);\n    return this._getUpdatedState({\n      offset: new Vector2(startPanOffset).subtract(delta)\n    });\n  }\n\n  /**\n   * End panning\n   * Must call if `panStart()` was called\n   */\n  panEnd() {\n    return this._getUpdatedState({\n      startPanPosition: null,\n      startPanOffset: null\n    });\n  }\n\n  /**\n   * Start rotating\n   * @param {[Number, Number]} pos - position on screen where the pointer grabs\n   */\n  rotateStart({pos}) {\n    return this;\n  }\n\n  /**\n   * Rotate\n   * @param {[Number, Number]} pos - position on screen where the pointer is\n   */\n  rotate({deltaScaleX, deltaScaleY}) {\n    return this;\n  }\n\n  /**\n   * End rotating\n   * Must call if `rotateStart()` was called\n   */\n  rotateEnd() {\n    return this;\n  }\n\n  // Calculates new zoom\n  _calculateNewZoom({scale, startZoom}) {\n    const {maxZoom, minZoom} = this._viewportProps;\n    const zoom = startZoom + Math.log2(scale);\n    return clamp(zoom, minZoom, maxZoom);\n  }\n\n  /**\n   * Start zooming\n   * @param {[Number, Number]} pos - position on screen where the center is\n   */\n  zoomStart({pos}) {\n    return this._getUpdatedState({\n      startZoomPosition: pos,\n      startZoom: this._viewportProps.zoom\n    });\n  }\n\n  /**\n   * Zoom\n   * @param {Number} scale - a number between [0, 1] specifying the accumulated\n   *   relative scale.\n   * @param {[number, number]} pos - current mouse cursor screen position\n   */\n  zoom({pos, startPos, scale}) {\n    const {zoom, width, height, offset} = this._viewportProps;\n    let {startZoom, startZoomPosition} = this._interactiveState;\n    if (!Number.isFinite(startZoom)) {\n      // We have two modes of zoom:\n      // scroll zoom that are discrete events (transform from the current zoom level),\n      // and pinch zoom that are continuous events (transform from the zoom level when\n      // pinch started).\n      // If startZoom state is defined, then use the startZoom state;\n      // otherwise assume discrete zooming\n      startZoom = zoom;\n      startZoomPosition = startPos || pos;\n    }\n\n    const newZoom = this._calculateNewZoom({scale, startZoom});\n    const startScale = zoom2Scale(startZoom);\n    const newScale = zoom2Scale(newZoom);\n\n    const centerX = width / 2 - offset[0];\n    const centerY = height / 2 - offset[1];\n    const dX = (startZoomPosition[0] - centerX) * (newScale / startScale - 1);\n    const dY = (startZoomPosition[1] - centerY) * (newScale / startScale - 1);\n\n    return this._getUpdatedState({\n      zoom: newZoom,\n      offset: [offset[0] + dX, offset[1] + dY]\n    });\n  }\n\n  /**\n   * End zooming\n   * Must call if `zoomStart()` was called\n   */\n  zoomEnd() {\n    return this._getUpdatedState({\n      startZoomPosition: null,\n      startZoom: null\n    });\n  }\n\n  _zoomFromCenter(scale) {\n    const {width, height, offset} = this._viewportProps;\n    return this.zoom({\n      pos: [width / 2 - offset[0], height / 2 - offset[1]],\n      scale\n    });\n  }\n\n  zoomIn() {\n    return this._zoomFromCenter(2);\n  }\n\n  zoomOut() {\n    return this._zoomFromCenter(0.5);\n  }\n\n  moveLeft() {\n    const {offset} = this._viewportProps;\n    const delta = [MOVEMENT_SPEED, 0];\n    return this._getUpdatedState({\n      offset: new Vector2(offset).add(delta)\n    });\n  }\n\n  moveRight() {\n    const {offset} = this._viewportProps;\n    const delta = [-MOVEMENT_SPEED, 0];\n    return this._getUpdatedState({\n      offset: new Vector2(offset).add(delta)\n    });\n  }\n\n  moveUp() {\n    const {offset} = this._viewportProps;\n    const delta = [0, MOVEMENT_SPEED];\n    return this._getUpdatedState({\n      offset: new Vector2(offset).add(delta)\n    });\n  }\n\n  moveDown() {\n    const {offset} = this._viewportProps;\n    const delta = [0, -MOVEMENT_SPEED];\n    return this._getUpdatedState({\n      offset: new Vector2(offset).add(delta)\n    });\n  }\n\n  /* Private methods */\n\n  _getUpdatedState(newProps) {\n    // Update _viewportProps\n    return new OrthographicState(\n      Object.assign({}, this._viewportProps, this._interactiveState, newProps)\n    );\n  }\n}\n\nexport default class OrthographicController extends Controller {\n  constructor(props) {\n    super(OrthographicState, props);\n    this.invertPan = true;\n  }\n\n  _onPanRotate(event) {\n    if (!this.dragRotate) {\n      return false;\n    }\n    return this._onPanRotateMap(event);\n  }\n}\n"],"file":"orthographic-controller.js"}