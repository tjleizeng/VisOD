{"version":3,"sources":["../../../src/deprecated/orbit-viewport.js"],"names":["Viewport","createMat4","transformVector","mat4","DEGREES_TO_RADIANS","Math","PI","OrbitViewport","id","width","height","distance","rotationX","rotationOrbit","orbitAxis","lookAt","up","fov","near","far","zoom","rotationMatrix","rotateX","rotateZ","rotateY","translateMatrix","scale","translate","viewMatrix","fovRadians","aspect","perspectiveMatrix","perspective","multiply","projectionMatrix","xyz","topLeft","v","pixelProjectionMatrix","x","y","z","y2","pixelUnprojectionMatrix","boundingBox","halfMaxSide","max","tan","getDistance","displayName"],"mappings":"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","sourcesContent":["import Viewport from '../viewports/viewport';\n// import log from '../utils/log';\n\nimport {createMat4, transformVector} from '../utils/math-utils';\n\nimport * as mat4 from 'gl-matrix/mat4';\n\nconst DEGREES_TO_RADIANS = Math.PI / 180;\n\n/*\n * A deck.gl Viewport class used by OrbitController\n * Adds zoom and pixel translation on top of the PerspectiveViewport\n */\nexport default class OrbitViewport extends Viewport {\n  constructor({\n    id = 'orbit-viewport',\n    // viewport arguments\n    width, // Width of viewport\n    height, // Height of viewport\n    // view matrix arguments\n    distance, // From eye position to lookAt\n    rotationX = 0, // Rotating angle around X axis\n    rotationOrbit = 0, // Rotating angle around orbit axis\n    orbitAxis = 'Z', // Orbit axis with 360 degrees rotating freedom, can only be 'Y' or 'Z'\n    lookAt = [0, 0, 0], // Which point is camera looking at, default origin\n    up = [0, 1, 0], // Defines up direction, default positive y axis\n    // projection matrix arguments\n    fov = 75, // Field of view covered by camera\n    near = 1, // Distance of near clipping plane\n    far = 100, // Distance of far clipping plane\n    zoom = 1\n  }) {\n    // TODO - Once OrbitViewport is aligned with the View system, deprecated it\n    // log.deprecated('OrbitViewport', 'OrbitView')();\n\n    const rotationMatrix = mat4.rotateX([], createMat4(), (-rotationX / 180) * Math.PI);\n    if (orbitAxis === 'Z') {\n      mat4.rotateZ(rotationMatrix, rotationMatrix, (-rotationOrbit / 180) * Math.PI);\n    } else {\n      mat4.rotateY(rotationMatrix, rotationMatrix, (-rotationOrbit / 180) * Math.PI);\n    }\n\n    const translateMatrix = createMat4();\n    mat4.scale(translateMatrix, translateMatrix, [zoom, zoom, zoom]);\n    mat4.translate(translateMatrix, translateMatrix, [-lookAt[0], -lookAt[1], -lookAt[2]]);\n\n    const viewMatrix = mat4.lookAt([], [0, 0, distance], [0, 0, 0], up);\n    const fovRadians = fov * DEGREES_TO_RADIANS;\n    const aspect = width / height;\n    const perspectiveMatrix = mat4.perspective([], fovRadians, aspect, near, far);\n\n    super({\n      id,\n      viewMatrix: mat4.multiply(\n        viewMatrix,\n        viewMatrix,\n        mat4.multiply(rotationMatrix, rotationMatrix, translateMatrix)\n      ),\n      projectionMatrix: perspectiveMatrix,\n      width,\n      height\n    });\n\n    this.width = width;\n    this.height = height;\n    this.distance = distance;\n    this.rotationX = rotationX;\n    this.rotationOrbit = rotationOrbit;\n    this.orbitAxis = orbitAxis;\n    this.lookAt = lookAt;\n    this.up = up;\n    this.fov = fov;\n    this.near = near;\n    this.far = far;\n    this.zoom = zoom;\n  }\n\n  project(xyz, {topLeft = false} = {}) {\n    const v = transformVector(this.pixelProjectionMatrix, [...xyz, 1]);\n\n    const [x, y, z] = v;\n    const y2 = topLeft ? this.height - y : y;\n    return [x, y2, z];\n  }\n\n  unproject(xyz, {topLeft = false} = {}) {\n    const [x, y, z] = xyz;\n    const y2 = topLeft ? this.height - y : y;\n\n    return transformVector(this.pixelUnprojectionMatrix, [x, y2, z, 1]);\n  }\n\n  /** Get camera `distance` to make view fit a box centered at lookat position in the viewport.\n   * @param {Array} sizes - [sizeX, sizeY, sizeZ]], define the dimensions of bounding box\n   * @returns {Nunber} the new distance parameter\n   */\n  getDistance({boundingBox, fov}) {\n    const halfMaxSide = Math.max(boundingBox[0], boundingBox[1], boundingBox[2]) / 2;\n    const distance = halfMaxSide / Math.tan(((fov / 180) * Math.PI) / 2);\n    return distance;\n  }\n\n  /** Move camera to make a model bounding box centered at lookat position fit in the viewport.\n   * @param {Array} boundingBox - [sizeX, sizeY, sizeZ]], define the dimensions of bounding box\n   * @returns a new OrbitViewport object\n   */\n  fitBounds(boundingBox) {\n    const {\n      width,\n      height,\n      rotationX,\n      rotationOrbit,\n      orbitAxis,\n      lookAt,\n      up,\n      fov,\n      near,\n      far,\n      zoom\n    } = this;\n\n    return new OrbitViewport({\n      width,\n      height,\n      rotationX,\n      rotationOrbit,\n      orbitAxis,\n      up,\n      fov,\n      near,\n      far,\n      zoom,\n      lookAt,\n      distance: this.getDistance({boundingBox, fov})\n    });\n  }\n}\n\nOrbitViewport.displayName = 'OrbitViewport';\n"],"file":"orbit-viewport.js"}