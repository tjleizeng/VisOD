{"version":3,"sources":["../../../../../src/experimental/utils/gpu-grid-aggregation/gpu-grid-aggregator-utils.js"],"names":["getFloatTexture","gl","opts","width","height","texture","Texture2D","data","format","GL","RGBA32F","type","FLOAT","border","mipmaps","parameters","TEXTURE_MAG_FILTER","NEAREST","TEXTURE_MIN_FILTER","dataFormat","RGBA","getFramebuffer","id","fb","Framebuffer","attachments","COLOR_ATTACHMENT0","getFloatArray","array","size","fillValue","length","Float32Array","fill","updateBuffer","bufferName","result","subData","Buffer"],"mappings":";;;;;;;;;;AACA;;AACA;;;;;;AAEO,SAASA,eAAT,CAAyBC,EAAzB,EAA6BC,IAA7B,EAAmC;AAAA;;AAAA,oBACRA,IADQ,CACjCC,KADiC;AAAA,MACjCA,KADiC,4BACzB,CADyB;AAAA,qBACRD,IADQ,CACtBE,MADsB;AAAA,MACtBA,MADsB,6BACb,CADa;AAExC,MAAMC,OAAO,GAAG,IAAIC,eAAJ,CAAcL,EAAd,EAAkB;AAChCM,IAAAA,IAAI,EAAE,IAD0B;AAEhCC,IAAAA,MAAM,EAAEC,mBAAGC,OAFqB;AAGhCC,IAAAA,IAAI,EAAEF,mBAAGG,KAHuB;AAIhCC,IAAAA,MAAM,EAAE,CAJwB;AAKhCC,IAAAA,OAAO,EAAE,KALuB;AAMhCC,IAAAA,UAAU,kDACPN,mBAAGO,kBADI,EACiBP,mBAAGQ,OADpB,gCAEPR,mBAAGS,kBAFI,EAEiBT,mBAAGQ,OAFpB,eANsB;AAUhCE,IAAAA,UAAU,EAAEV,mBAAGW,IAViB;AAWhCjB,IAAAA,KAAK,EAALA,KAXgC;AAYhCC,IAAAA,MAAM,EAANA;AAZgC,GAAlB,CAAhB;AAcA,SAAOC,OAAP;AACD;;AAEM,SAASgB,cAAT,CAAwBpB,EAAxB,EAA4BC,IAA5B,EAAkC;AAAA,MAChCoB,EADgC,GACHpB,IADG,CAChCoB,EADgC;AAAA,qBACHpB,IADG,CAC5BC,KAD4B;AAAA,MAC5BA,KAD4B,6BACpB,CADoB;AAAA,sBACHD,IADG,CACjBE,MADiB;AAAA,MACjBA,MADiB,8BACR,CADQ;AAEvC,MAAMC,OAAO,GAAGH,IAAI,CAACG,OAAL,IAAgBL,eAAe,CAACC,EAAD,EAAKC,IAAL,CAA/C;AACA,MAAMqB,EAAE,GAAG,IAAIC,iBAAJ,CAAgBvB,EAAhB,EAAoB;AAC7BqB,IAAAA,EAAE,EAAFA,EAD6B;AAE7BnB,IAAAA,KAAK,EAALA,KAF6B;AAG7BC,IAAAA,MAAM,EAANA,MAH6B;AAI7BqB,IAAAA,WAAW,sBACRhB,mBAAGiB,iBADK,EACerB,OADf;AAJkB,GAApB,CAAX;AASA,SAAOkB,EAAP;AACD;;AAEM,SAASI,aAAT,CAAuBC,KAAvB,EAA8BC,IAA9B,EAAmD;AAAA,MAAfC,SAAe,uEAAH,CAAG;;AACxD,MAAI,CAACF,KAAD,IAAUA,KAAK,CAACG,MAAN,GAAeF,IAA7B,EAAmC;AACjC,WAAO,IAAIG,YAAJ,CAAiBH,IAAjB,EAAuBI,IAAvB,CAA4BH,SAA5B,CAAP;AACD;;AACD,SAAOF,KAAP;AACD;;AAEM,SAASM,YAAT,OAAsD;AAAA,MAA/BjC,EAA+B,QAA/BA,EAA+B;AAAA,MAA3BkC,UAA2B,QAA3BA,UAA2B;AAAA,MAAf5B,IAAe,QAAfA,IAAe;AAAA,MAAT6B,MAAS,QAATA,MAAS;;AAC3D,MAAIA,MAAM,CAACD,UAAD,CAAV,EAAwB;AACtBC,IAAAA,MAAM,CAACD,UAAD,CAAN,CAAmBE,OAAnB,CAA2B;AAAC9B,MAAAA,IAAI,EAAJA;AAAD,KAA3B;AACD,GAFD,MAEO;AACL6B,IAAAA,MAAM,CAACD,UAAD,CAAN,GAAqB,IAAIG,YAAJ,CAAWrC,EAAX,EAAeM,IAAf,CAArB;AACD;AACF","sourcesContent":["// Helper methods used by GPUGridAggregator.\nimport GL from 'luma.gl/constants';\nimport {Buffer, Framebuffer, Texture2D} from 'luma.gl';\n\nexport function getFloatTexture(gl, opts) {\n  const {width = 1, height = 1} = opts;\n  const texture = new Texture2D(gl, {\n    data: null,\n    format: GL.RGBA32F,\n    type: GL.FLOAT,\n    border: 0,\n    mipmaps: false,\n    parameters: {\n      [GL.TEXTURE_MAG_FILTER]: GL.NEAREST,\n      [GL.TEXTURE_MIN_FILTER]: GL.NEAREST\n    },\n    dataFormat: GL.RGBA,\n    width,\n    height\n  });\n  return texture;\n}\n\nexport function getFramebuffer(gl, opts) {\n  const {id, width = 1, height = 1} = opts;\n  const texture = opts.texture || getFloatTexture(gl, opts);\n  const fb = new Framebuffer(gl, {\n    id,\n    width,\n    height,\n    attachments: {\n      [GL.COLOR_ATTACHMENT0]: texture\n    }\n  });\n\n  return fb;\n}\n\nexport function getFloatArray(array, size, fillValue = 0) {\n  if (!array || array.length < size) {\n    return new Float32Array(size).fill(fillValue);\n  }\n  return array;\n}\n\nexport function updateBuffer({gl, bufferName, data, result}) {\n  if (result[bufferName]) {\n    result[bufferName].subData({data});\n  } else {\n    result[bufferName] = new Buffer(gl, data);\n  }\n}\n"],"file":"gpu-grid-aggregator-utils.js"}