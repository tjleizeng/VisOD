{"version":3,"sources":["../../../src/lib/layer-manager.js"],"names":["assert","Framebuffer","_ShaderCache","ShaderCache","seer","Layer","drawLayers","pickObject","pickVisibleObjects","LIFECYCLE","log","flatten","Stats","Viewport","setPropOverrides","layerEditListener","seerInitListener","initLayerInSeer","updateLayerInSeer","LOG_PRIORITY_LIFECYCLE","LOG_PRIORITY_LIFECYCLE_MINOR","INITIAL_CONTEXT","Object","seal","layerManager","gl","useDevicePixels","stats","shaderCache","pickingFBO","pickingEvent","lastPickedInfo","animationProps","userData","layerName","layer","LayerManager","constructor","viewport","lastRenderedLayers","layers","context","assign","_cachePrograms","id","index","layerId","info","layerFilter","drawPickingColors","_needsRedraw","_needsUpdate","_debug","_activateViewport","bind","_initSeer","_editSeer","finalize","removeListener","needsRedraw","clearRedrawFlags","_checkIfNeedsRedraw","needsUpdate","setNeedsRedraw","reason","setNeedsUpdate","getLayers","layerIds","filter","find","indexOf","setProps","props","debug","setLayers","newLayers","Boolean","_updateLayers","oldLayers","error","generatedLayers","updateLayers","pass","viewports","views","redrawReason","customRender","onViewportActive","getLastPickedObject","x","y","lastPickedLayerId","l","coordinate","unproject","lngLat","color","object","mode","radius","depth","event","result","_getPickingBuffer","pickObjects","width","height","redraw","layerNeedsRedraw","getNeedsRedraw","oldViewport","viewportChanged","equals","setChangeFlags","_updateLayer","resize","canvas","oldLayerMap","oldLayer","warn","_updateSublayersRecursively","error2","_finalizeOldLayers","firstError","newLayer","sublayers","validateProps","_initializeLayer","_transferLayerState","push","isComposite","getSubLayers","err","_finalizeLayer","_initialize","lifecycle","INITIALIZED","internalState","model","getModels","_transferState","MATCHED","AWAITING_GC","printChangeFlags","_update","AWAITING_FINALIZATION","_finalize","FINALIZED","forEach","payload","type","valuePath","itemKey","slice","value","map"],"mappings":"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","sourcesContent":["// Copyright (c) 2015 - 2017 Uber Technologies, Inc.\n//\n// Permission is hereby granted, free of charge, to any person obtaining a copy\n// of this software and associated documentation files (the \"Software\"), to deal\n// in the Software without restriction, including without limitation the rights\n// to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n// copies of the Software, and to permit persons to whom the Software is\n// furnished to do so, subject to the following conditions:\n//\n// The above copyright notice and this permission notice shall be included in\n// all copies or substantial portions of the Software.\n//\n// THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\n// THE SOFTWARE.\n\nimport assert from '../utils/assert';\nimport {Framebuffer, _ShaderCache as ShaderCache} from 'luma.gl';\nimport seer from 'seer';\nimport Layer from './layer';\nimport {drawLayers} from './draw-layers';\nimport {pickObject, pickVisibleObjects} from './pick-layers';\nimport {LIFECYCLE} from '../lifecycle/constants';\nimport log from '../utils/log';\nimport {flatten} from '../utils/flatten';\nimport {Stats} from 'probe.gl';\n\nimport Viewport from '../viewports/viewport';\n\nimport {\n  setPropOverrides,\n  layerEditListener,\n  seerInitListener,\n  initLayerInSeer,\n  updateLayerInSeer\n} from './seer-integration';\n\nconst LOG_PRIORITY_LIFECYCLE = 2;\nconst LOG_PRIORITY_LIFECYCLE_MINOR = 4;\n\n// CONTEXT IS EXPOSED TO LAYERS\nconst INITIAL_CONTEXT = Object.seal({\n  layerManager: null,\n  gl: null,\n\n  // Settings\n  useDevicePixels: true, // Exposed in case custom layers need to adjust sizes\n\n  // General resources\n  stats: null, // for tracking lifecycle performance\n\n  // GL Resources\n  shaderCache: null,\n  pickingFBO: null, // Screen-size framebuffer that layers can reuse\n\n  // State\n  pickingEvent: null,\n  lastPickedInfo: null,\n\n  animationProps: null,\n\n  userData: {} // Place for any custom app `context`\n});\n\nconst layerName = layer => (layer instanceof Layer ? `${layer}` : !layer ? 'null' : 'invalid');\n\nexport default class LayerManager {\n  // eslint-disable-next-line\n  constructor(gl, {stats, viewport = null} = {}) {\n    // Currently deck.gl expects the DeckGL.layers array to be different\n    // whenever React rerenders. If the same layers array is used, the\n    // LayerManager's diffing algorithm will generate a fatal error and\n    // break the rendering.\n\n    // `this.lastRenderedLayers` stores the UNFILTERED layers sent\n    // down to LayerManager, so that `layers` reference can be compared.\n    // If it's the same across two React render calls, the diffing logic\n    // will be skipped.\n    this.lastRenderedLayers = [];\n    this.layers = [];\n\n    this.context = Object.assign({}, INITIAL_CONTEXT, {\n      layerManager: this,\n\n      gl,\n      // Enabling luma.gl Program caching using private API (_cachePrograms)\n      shaderCache: gl && new ShaderCache({gl, _cachePrograms: true}),\n      stats: stats || new Stats({id: 'deck.gl'}),\n      lastPickedInfo: {\n        // For callback tracking and autohighlight\n        index: -1,\n        layerId: null,\n        info: null\n      },\n      // Make sure context.viewport is not empty on the first layer initialization\n      viewport: viewport || new Viewport({id: 'DEFAULT-INITIAL-VIEWPORT'}) // Current viewport, exposed to layers for project* function\n    });\n\n    this.layerFilter = null;\n    this.drawPickingColors = false;\n\n    this._needsRedraw = 'Initial render';\n    this._needsUpdate = false;\n    this._debug = false;\n\n    this._activateViewport = this._activateViewport.bind(this);\n\n    // Seer integration\n    this._initSeer = this._initSeer.bind(this);\n    this._editSeer = this._editSeer.bind(this);\n\n    Object.seal(this);\n\n    seerInitListener(this._initSeer);\n    layerEditListener(this._editSeer);\n  }\n\n  // Method to call when the layer manager is not needed anymore.\n  // Currently used in the <DeckGL> componentWillUnmount lifecycle to unbind Seer listeners.\n  finalize() {\n    seer.removeListener(this._initSeer);\n    seer.removeListener(this._editSeer);\n  }\n\n  // Check if a redraw is needed\n  needsRedraw({clearRedrawFlags = true} = {}) {\n    return this._checkIfNeedsRedraw(clearRedrawFlags);\n  }\n\n  // Check if a deep update of all layers is needed\n  needsUpdate() {\n    return this._needsUpdate;\n  }\n\n  // Layers will be redrawn (in next animation frame)\n  setNeedsRedraw(reason) {\n    this._needsRedraw = this._needsRedraw || reason;\n  }\n\n  // Layers will be updated deeply (in next animation frame)\n  // Potentially regenerating attributes and sub layers\n  setNeedsUpdate(reason) {\n    this._needsUpdate = this._needsUpdate || reason;\n  }\n\n  // Gets an (optionally) filtered list of layers\n  getLayers({layerIds = null} = {}) {\n    // Filtering by layerId compares beginning of strings, so that sublayers will be included\n    // Dependes on the convention of adding suffixes to the parent's layer name\n    return layerIds\n      ? this.layers.filter(layer => layerIds.find(layerId => layer.id.indexOf(layerId) === 0))\n      : this.layers;\n  }\n\n  /**\n   * Set props needed for layer rendering and picking.\n   * Parameters are to be passed as a single object, with the following values:\n   * @param {Boolean} useDevicePixels\n   */\n  /* eslint-disable complexity, max-statements */\n  setProps(props) {\n    if ('debug' in props) {\n      this._debug = props.debug;\n    }\n\n    // A way for apps to add data to context that can be accessed in layers\n    if ('userData' in props) {\n      this.context.userData = props.userData;\n    }\n\n    if ('useDevicePixels' in props) {\n      this.context.useDevicePixels = props.useDevicePixels;\n    }\n\n    // TODO - For now we set layers before viewports to preserve changeFlags\n    if ('layers' in props) {\n      this.setLayers(props.layers);\n    }\n\n    if ('layerFilter' in props) {\n      if (this.layerFilter !== props.layerFilter) {\n        this.layerFilter = props.layerFilter;\n        this.setNeedsRedraw('layerFilter changed');\n      }\n    }\n\n    if ('drawPickingColors' in props) {\n      if (props.drawPickingColors !== this.drawPickingColors) {\n        this.drawPickingColors = props.drawPickingColors;\n        this.setNeedsRedraw('drawPickingColors changed');\n      }\n    }\n  }\n  /* eslint-enable complexity, max-statements */\n\n  // Supply a new layer list, initiating sublayer generation and layer matching\n  setLayers(newLayers) {\n    // TODO - something is generating state updates that cause rerender of the same\n    if (newLayers === this.lastRenderedLayers) {\n      log.log(3, 'Ignoring layer update due to layer array not changed')();\n      return this;\n    }\n    this.lastRenderedLayers = newLayers;\n\n    newLayers = flatten(newLayers, {filter: Boolean});\n\n    for (const layer of newLayers) {\n      layer.context = this.context;\n    }\n\n    const {error, generatedLayers} = this._updateLayers({\n      oldLayers: this.layers,\n      newLayers\n    });\n\n    this.layers = generatedLayers;\n\n    // Throw first error found, if any\n    if (error) {\n      throw error;\n    }\n    return this;\n  }\n\n  // Update layers from last cycle if `setNeedsUpdate()` has been called\n  updateLayers() {\n    // NOTE: For now, even if only some layer has changed, we update all layers\n    // to ensure that layer id maps etc remain consistent even if different\n    // sublayers are rendered\n    const reason = this.needsUpdate();\n    if (reason) {\n      this.setNeedsRedraw(`updating layers: ${reason}`);\n      // HACK - Call with a copy of lastRenderedLayers to trigger a full update\n      this.setLayers([...this.lastRenderedLayers]);\n    }\n  }\n\n  //\n  // METHODS FOR LAYERS\n  //\n\n  // Draw all layers in all views\n  drawLayers({\n    pass = 'render to screen',\n    viewports,\n    views,\n    redrawReason = 'unknown reason',\n    customRender = false\n  }) {\n    const {drawPickingColors} = this;\n    const {gl, useDevicePixels} = this.context;\n\n    // render this viewport\n    drawLayers(gl, {\n      layers: this.layers,\n      viewports,\n      views,\n      onViewportActive: this._activateViewport,\n      useDevicePixels,\n      drawPickingColors,\n      pass,\n      layerFilter: this.layerFilter,\n      redrawReason,\n      customRender\n    });\n  }\n\n  // Returns a new picking info object by assuming the last picked object is still picked\n  getLastPickedObject({x, y, viewports}) {\n    const lastPickedInfo = this.context.lastPickedInfo.info;\n    const lastPickedLayerId = lastPickedInfo && lastPickedInfo.layer && lastPickedInfo.layer.id;\n    const layer = lastPickedLayerId ? this.layers.find(l => l.id === lastPickedLayerId) : null;\n    const coordinate = viewports[0] && viewports[0].unproject([x, y]);\n\n    const info = {\n      x,\n      y,\n      coordinate,\n      // TODO remove the lngLat prop after compatibility check\n      lngLat: coordinate,\n      layer\n    };\n\n    if (layer) {\n      return Object.assign({}, lastPickedInfo, info);\n    }\n    return Object.assign(info, {color: null, object: null, index: -1});\n  }\n\n  // Pick the closest info at given coordinate\n  pickObject({x, y, mode, radius = 0, layerIds, viewports, depth = 1, event = null}) {\n    const {gl, useDevicePixels} = this.context;\n    // Allow layers to access the event\n    this.context.pickingEvent = event;\n\n    const layers = this.getLayers({layerIds});\n\n    const result = pickObject(gl, {\n      // User params\n      x,\n      y,\n      radius,\n      layers,\n      mode,\n      layerFilter: this.layerFilter,\n      depth,\n      // Injected params\n      viewports,\n      onViewportActive: this._activateViewport,\n      pickingFBO: this._getPickingBuffer(),\n      lastPickedInfo: this.context.lastPickedInfo,\n      useDevicePixels\n    });\n\n    // Clear the current event\n    this.context.pickingEvent = null;\n    return result;\n  }\n\n  // Get all unique infos within a bounding box\n  pickObjects({x, y, width, height, layerIds, viewports}) {\n    const {gl, useDevicePixels} = this.context;\n\n    const layers = this.getLayers({layerIds});\n\n    return pickVisibleObjects(gl, {\n      x,\n      y,\n      width,\n      height,\n      layers,\n      layerFilter: this.layerFilter,\n      mode: 'pickObjects',\n      viewports,\n      onViewportActive: this._activateViewport,\n      pickingFBO: this._getPickingBuffer(),\n      useDevicePixels\n    });\n  }\n\n  //\n  // PRIVATE METHODS\n  //\n\n  _checkIfNeedsRedraw(clearRedrawFlags) {\n    let redraw = this._needsRedraw;\n    if (clearRedrawFlags) {\n      this._needsRedraw = false;\n    }\n\n    // This layers list doesn't include sublayers, relying on composite layers\n    for (const layer of this.layers) {\n      // Call every layer to clear their flags\n      const layerNeedsRedraw = layer.getNeedsRedraw({clearRedrawFlags});\n      redraw = redraw || layerNeedsRedraw;\n    }\n\n    return redraw;\n  }\n\n  // Make a viewport \"current\" in layer context, updating viewportChanged flags\n  _activateViewport(viewport) {\n    const oldViewport = this.context.viewport;\n    const viewportChanged = !oldViewport || !viewport.equals(oldViewport);\n\n    if (viewportChanged) {\n      log.log(4, 'Viewport changed', viewport)();\n\n      this.context.viewport = viewport;\n\n      // Update layers states\n      // Let screen space layers update their state based on viewport\n      for (const layer of this.layers) {\n        layer.setChangeFlags({viewportChanged: 'Viewport changed'});\n        this._updateLayer(layer);\n      }\n    }\n\n    assert(this.context.viewport, 'LayerManager: viewport not set');\n\n    return this;\n  }\n\n  _getPickingBuffer() {\n    const {gl} = this.context;\n    // Create a frame buffer if not already available\n    this.context.pickingFBO = this.context.pickingFBO || new Framebuffer(gl);\n    // Resize it to current canvas size (this is a noop if size hasn't changed)\n    this.context.pickingFBO.resize({width: gl.canvas.width, height: gl.canvas.height});\n    return this.context.pickingFBO;\n  }\n\n  // Match all layers, checking for caught errors\n  // To avoid having an exception in one layer disrupt other layers\n  // TODO - mark layers with exceptions as bad and remove from rendering cycle?\n  _updateLayers({oldLayers, newLayers}) {\n    // Create old layer map\n    const oldLayerMap = {};\n    for (const oldLayer of oldLayers) {\n      if (oldLayerMap[oldLayer.id]) {\n        log.warn(`Multiple old layers with same id ${layerName(oldLayer)}`)();\n      } else {\n        oldLayerMap[oldLayer.id] = oldLayer;\n      }\n    }\n\n    // Allocate array for generated layers\n    const generatedLayers = [];\n\n    // Match sublayers\n    const error = this._updateSublayersRecursively({\n      newLayers,\n      oldLayerMap,\n      generatedLayers\n    });\n\n    // Finalize unmatched layers\n    const error2 = this._finalizeOldLayers(oldLayerMap);\n\n    this._needsUpdate = false;\n\n    const firstError = error || error2;\n    return {error: firstError, generatedLayers};\n  }\n\n  // Note: adds generated layers to `generatedLayers` array parameter\n  _updateSublayersRecursively({newLayers, oldLayerMap, generatedLayers}) {\n    let error = null;\n\n    for (const newLayer of newLayers) {\n      newLayer.context = this.context;\n\n      // Given a new coming layer, find its matching old layer (if any)\n      const oldLayer = oldLayerMap[newLayer.id];\n      if (oldLayer === null) {\n        // null, rather than undefined, means this id was originally there\n        log.warn(`Multiple new layers with same id ${layerName(newLayer)}`)();\n      }\n      // Remove the old layer from candidates, as it has been matched with this layer\n      oldLayerMap[newLayer.id] = null;\n\n      let sublayers = null;\n\n      // We must not generate exceptions until after layer matching is complete\n      try {\n        if (this._debug && oldLayer !== newLayer) {\n          newLayer.validateProps();\n        }\n\n        if (!oldLayer) {\n          this._initializeLayer(newLayer);\n          initLayerInSeer(newLayer); // Initializes layer in seer chrome extension (if connected)\n        } else {\n          this._transferLayerState(oldLayer, newLayer);\n          this._updateLayer(newLayer);\n          updateLayerInSeer(newLayer); // Updates layer in seer chrome extension (if connected)\n        }\n        generatedLayers.push(newLayer);\n\n        // Call layer lifecycle method: render sublayers\n        sublayers = newLayer.isComposite && newLayer.getSubLayers();\n        // End layer lifecycle method: render sublayers\n      } catch (err) {\n        log.warn(`error during matching of ${layerName(newLayer)}`, err)();\n        error = error || err; // Record first exception\n      }\n\n      if (sublayers) {\n        this._updateSublayersRecursively({\n          newLayers: sublayers,\n          oldLayerMap,\n          generatedLayers\n        });\n      }\n    }\n\n    return error;\n  }\n\n  // Finalize any old layers that were not matched\n  _finalizeOldLayers(oldLayerMap) {\n    let error = null;\n    for (const layerId in oldLayerMap) {\n      const layer = oldLayerMap[layerId];\n      if (layer) {\n        error = error || this._finalizeLayer(layer);\n      }\n    }\n    return error;\n  }\n\n  // EXCEPTION SAFE LAYER ACCESS\n\n  // Initializes a single layer, calling layer methods\n  _initializeLayer(layer) {\n    log.log(LOG_PRIORITY_LIFECYCLE, `initializing ${layerName(layer)}`)();\n\n    let error = null;\n    try {\n      layer._initialize();\n      layer.lifecycle = LIFECYCLE.INITIALIZED;\n    } catch (err) {\n      log.warn(`error while initializing ${layerName(layer)}\\n`, err)();\n      error = error || err;\n      // TODO - what should the lifecycle state be here? LIFECYCLE.INITIALIZATION_FAILED?\n    }\n\n    // Set back pointer (used in picking)\n    layer.internalState.layer = layer;\n\n    // Save layer on model for picking purposes\n    // store on model.userData rather than directly on model\n    for (const model of layer.getModels()) {\n      model.userData.layer = layer;\n    }\n\n    return error;\n  }\n\n  _transferLayerState(oldLayer, newLayer) {\n    newLayer._transferState(oldLayer);\n    newLayer.lifecycle = LIFECYCLE.MATCHED;\n\n    if (newLayer !== oldLayer) {\n      log.log(\n        LOG_PRIORITY_LIFECYCLE_MINOR,\n        `matched ${layerName(newLayer)}`,\n        oldLayer,\n        '->',\n        newLayer\n      )();\n      oldLayer.lifecycle = LIFECYCLE.AWAITING_GC;\n    } else {\n      log.log(LOG_PRIORITY_LIFECYCLE_MINOR, `Matching layer is unchanged ${newLayer.id}`)();\n    }\n  }\n\n  // Updates a single layer, cleaning all flags\n  _updateLayer(layer) {\n    log.log(\n      LOG_PRIORITY_LIFECYCLE_MINOR,\n      `updating ${layer} because: ${layer.printChangeFlags()}`\n    )();\n    let error = null;\n    try {\n      layer._update();\n    } catch (err) {\n      log.warn(`error during update of ${layerName(layer)}`, err)();\n      // Save first error\n      error = err;\n    }\n    return error;\n  }\n\n  // Finalizes a single layer\n  _finalizeLayer(layer) {\n    assert(layer.lifecycle !== LIFECYCLE.AWAITING_FINALIZATION);\n    layer.lifecycle = LIFECYCLE.AWAITING_FINALIZATION;\n    let error = null;\n    this.setNeedsRedraw(`finalized ${layerName(layer)}`);\n    try {\n      layer._finalize();\n    } catch (err) {\n      log.warn(`error during finalization of ${layerName(layer)}`, err)();\n      error = err;\n    }\n    layer.lifecycle = LIFECYCLE.FINALIZED;\n    log.log(LOG_PRIORITY_LIFECYCLE, `finalizing ${layerName(layer)}`)();\n    return error;\n  }\n\n  // SEER INTEGRATION\n\n  /**\n   * Called upon Seer initialization, manually sends layers data.\n   */\n  _initSeer() {\n    this.layers.forEach(layer => {\n      initLayerInSeer(layer);\n      updateLayerInSeer(layer);\n    });\n  }\n\n  /**\n   * On Seer property edition, set override and update layers.\n   */\n  _editSeer(payload) {\n    if (payload.type !== 'edit' || payload.valuePath[0] !== 'props') {\n      return;\n    }\n\n    setPropOverrides(payload.itemKey, payload.valuePath.slice(1), payload.value);\n    const newLayers = this.layers.map(layer => new layer.constructor(layer.props));\n    this.updateLayers({newLayers});\n  }\n}\n"],"file":"layer-manager.js"}