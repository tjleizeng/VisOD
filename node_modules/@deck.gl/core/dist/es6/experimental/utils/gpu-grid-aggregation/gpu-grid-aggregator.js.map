{"version":3,"sources":["../../../../../src/experimental/utils/gpu-grid-aggregation/gpu-grid-aggregator.js"],"names":["GL","Buffer","Model","Transform","FEATURES","hasFeatures","isWebGL2","log","assert","fp64","fp64Utils","withParameters","worldToPixels","fp64ifyMatrix4","AGGREGATION_OPERATION","DEFAULT_CHANGE_FLAGS","DEFAULT_RUN_PARAMS","MAX_32_BIT_FLOAT","MIN_BLEND_EQUATION","MAX_BLEND_EQUATION","MAX_MIN_BLEND_EQUATION","EQUATION_MAP","ELEMENTCOUNT","DEFAULT_WEIGHT_PARAMS","IDENTITY_MATRIX","PIXEL_SIZE","WEIGHT_SIZE","AGGREGATE_TO_GRID_VS","AGGREGATE_TO_GRID_VS_FP64","AGGREGATE_TO_GRID_FS","AGGREGATE_ALL_VS_FP64","AGGREGATE_ALL_FS","TRANSFORM_MEAN_VS","getFloatTexture","getFramebuffer","getFloatArray","updateBuffer","GPUGridAggregator","getAggregationData","aggregationData","maxData","pixelIndex","length","index","cellCount","cellWeight","totalCount","maxCellWieght","getCellData","countsData","size","cellWeights","cellCounts","sizeIndex","push","constructor","gl","opts","id","shaderCache","state","weights","gridPositions","positionsBuffer","positions64xyLowBuffer","vertexCount","useGPU","numCol","numRow","windowSize","cellSize","weightAttributes","textures","meanTextures","buffers","framebuffers","maxMinFramebuffers","minFramebuffers","maxFramebuffers","equations","_hasGPUSupport","BLEND_EQUATION_MINMAX","COLOR_ATTACHMENT_RGBA32F","TEXTURE_FLOAT","delete","gridAggregationModel","allAggregationModel","meanTransform","position64Buffer","deleteResources","run","aggregationParams","getAggregationParams","updateGridSize","runAggregationOnGPU","warn","runAggregationOnCPU","obj","name","Object","assign","gridTransformMatrix","viewport","projectPoints","changeFlags","cellSizeChanged","setState","validateProps","viewportMatrix","normalizeWeightParams","result","updateObject","shouldTransformToGrid","dataChanged","viewportChanged","width","height","Math","ceil","positions","projectPositions","calculateAggregationData","results","cellIndex","posIndex","values","operation","cellElementIndex","weightComponent","Number","isFinite","SUM","MEAN","MIN","min","MAX","max","calculateMeanMaxMinData","validCellIndices","forEach","needMin","needMax","minData","maxMinData","calculateMinMax","calculateMean","combineMaxMin","count","weight","initCPUResults","aggregationSize","fill","Infinity","gridTransformRequired","posCount","Set","gridPos","pos","project","slice","x","y","colId","floor","rowId","add","updateAggregationBuffers","createBufferObjects","bufferName","data","getAggregateData","aggregationTexture","aggregationBuffer","readPixelsToBuffer","buffer","type","FLOAT","maxMinBuffer","minBuffer","maxBuffer","getAggregationModel","vs","fs","modules","drawMode","POINTS","getAllAggregationModel","isInstanced","instanceCount","attributes","position","Float32Array","getMeanTransform","update","_targetTextureVarying","renderAggregateData","uProjectionMatrixFP64","gridSize","parameters","blend","depthTest","blendFunc","ONE","moduleSettings","uniforms","uProjectionMatrix","renderToWeightsTexture","renderToMaxMinTexture","blendEquation","minOrMaxFb","clearParams","clearColor","bind","clear","COLOR_BUFFER_BIT","draw","uSampler","texture","unbind","transformOptions","_sourceTextures","aggregationValues","_targetTexture","elementCount","attach","COLOR_ATTACHMENT0","updateModels","setupFramebuffers","framebufferSize","resize","setupModels","setupWeightAttributes","Array","isArray","typedArray","setData","positions64xyLow","aggregationModelAttributes","createPos64xyLow","setVertexCount","setAttributes","setInstanceCount"],"mappings":"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","sourcesContent":["import GL from 'luma.gl/constants';\nimport {Buffer, Model, Transform, FEATURES, hasFeatures, isWebGL2} from 'luma.gl';\nimport {log} from '@deck.gl/core';\nimport assert from '../../../utils/assert';\nimport {fp64 as fp64Utils, withParameters} from 'luma.gl';\nimport {worldToPixels} from 'viewport-mercator-project';\nconst {fp64ifyMatrix4} = fp64Utils;\n\nimport {\n  AGGREGATION_OPERATION,\n  DEFAULT_CHANGE_FLAGS,\n  DEFAULT_RUN_PARAMS,\n  MAX_32_BIT_FLOAT,\n  MIN_BLEND_EQUATION,\n  MAX_BLEND_EQUATION,\n  MAX_MIN_BLEND_EQUATION,\n  EQUATION_MAP,\n  ELEMENTCOUNT,\n  DEFAULT_WEIGHT_PARAMS,\n  IDENTITY_MATRIX,\n  PIXEL_SIZE,\n  WEIGHT_SIZE\n} from './gpu-grid-aggregator-constants';\n\nimport AGGREGATE_TO_GRID_VS from './aggregate-to-grid-vs.glsl';\nimport AGGREGATE_TO_GRID_VS_FP64 from './aggregate-to-grid-vs-64.glsl';\nimport AGGREGATE_TO_GRID_FS from './aggregate-to-grid-fs.glsl';\nimport AGGREGATE_ALL_VS_FP64 from './aggregate-all-vs-64.glsl';\nimport AGGREGATE_ALL_FS from './aggregate-all-fs.glsl';\nimport TRANSFORM_MEAN_VS from './transform-mean-vs.glsl';\nimport {\n  getFloatTexture,\n  getFramebuffer,\n  getFloatArray,\n  updateBuffer\n} from './gpu-grid-aggregator-utils.js';\n\nexport default class GPUGridAggregator {\n  // Decode and return aggregation data of given pixel.\n  static getAggregationData({aggregationData, maxData, pixelIndex}) {\n    assert(aggregationData.length >= (pixelIndex + 1) * PIXEL_SIZE);\n    assert(maxData.length === PIXEL_SIZE);\n    const index = pixelIndex * PIXEL_SIZE;\n    const cellCount = aggregationData[index + 3];\n    const cellWeight = aggregationData[index];\n    const totalCount = maxData[3];\n    const maxCellWieght = maxData[0];\n    return {\n      cellCount,\n      cellWeight,\n      totalCount,\n      maxCellWieght\n    };\n  }\n\n  // Decodes and retuns counts and weights of all cells\n  static getCellData({countsData, size = 1}) {\n    const cellWeights = [];\n    const cellCounts = [];\n    for (let index = 0; index < countsData.length; index += 4) {\n      // weights in RGB channels\n      for (let sizeIndex = 0; sizeIndex < size; sizeIndex++) {\n        cellWeights.push(countsData[index + sizeIndex]);\n      }\n      // count in Alpha channel\n      cellCounts.push(countsData[index + 3]);\n    }\n    return {cellCounts, cellWeights};\n  }\n\n  // DEBUG ONLY\n  // static logData({aggregationBuffer, minBuffer, maxBuffer, maxMinBuffer}) {\n  //   const agrData = aggregationBuffer.getData();\n  //   for (let index = 0; index < agrData.length; index += 4) {\n  //     if (agrData[index + 3] > 0) {\n  //       console.log(\n  //         `index: ${index} weights: ${agrData[index]} ${agrData[index + 1]} ${\n  //           agrData[index + 2]\n  //         } count: ${agrData[index + 3]}`\n  //       );\n  //     }\n  //   }\n  // }\n\n  constructor(gl, opts = {}) {\n    this.id = opts.id || 'gpu-grid-aggregator';\n    this.shaderCache = opts.shaderCache || null;\n    this.gl = gl;\n    this.state = {\n      // cache weights and position data to process when data is not changed\n      weights: null,\n      gridPositions: null,\n      positionsBuffer: null,\n      positions64xyLowBuffer: null,\n      vertexCount: 0,\n\n      // flags/variables that affect the aggregation\n      fp64: null,\n      useGPU: null,\n      numCol: 0,\n      numRow: 0,\n      windowSize: null,\n      cellSize: null,\n\n      // per weight GPU resources\n      weightAttributes: {},\n      textures: {},\n      meanTextures: {},\n      buffers: {},\n      framebuffers: {},\n      maxMinFramebuffers: {},\n      minFramebuffers: {},\n      maxFramebuffers: {},\n      equations: {}\n    };\n    this._hasGPUSupport =\n      isWebGL2(gl) && // gl_InstanceID usage in min/max calculation shaders\n      hasFeatures(\n        this.gl,\n        FEATURES.BLEND_EQUATION_MINMAX, // set min/max blend modes\n        FEATURES.COLOR_ATTACHMENT_RGBA32F, // render to float texture\n        FEATURES.TEXTURE_FLOAT // sample from a float texture\n      );\n  }\n\n  // Delete owned resources.\n  /* eslint no-unused-expressions: [\"error\", { \"allowShortCircuit\": true }] */\n  delete() {\n    const {gridAggregationModel, allAggregationModel, meanTransform} = this;\n    const {\n      positionsBuffer,\n      position64Buffer,\n      framebuffers,\n      maxMinFramebuffers,\n      minFramebuffers,\n      maxFramebuffers,\n      meanTextures\n    } = this.state;\n\n    gridAggregationModel && gridAggregationModel.delete();\n    allAggregationModel && allAggregationModel.delete();\n    meanTransform && meanTransform.delete();\n\n    positionsBuffer && positionsBuffer.delete();\n    position64Buffer && position64Buffer.delete();\n    this.deleteResources(framebuffers);\n    this.deleteResources(maxMinFramebuffers);\n    this.deleteResources(minFramebuffers);\n    this.deleteResources(maxFramebuffers);\n    this.deleteResources(meanTextures);\n  }\n\n  // Perform aggregation and retun the results\n  run(opts = {}) {\n    const aggregationParams = this.getAggregationParams(opts);\n    assert(aggregationParams);\n    this.updateGridSize(aggregationParams);\n    const {useGPU} = aggregationParams;\n    if (this._hasGPUSupport && useGPU) {\n      return this.runAggregationOnGPU(aggregationParams);\n    }\n    if (useGPU) {\n      log.warn('ScreenGridAggregator: GPU Aggregation not supported, falling back to CPU')();\n    }\n    return this.runAggregationOnCPU(aggregationParams);\n  }\n\n  // PRIVATE\n\n  // Common methods\n\n  deleteResources(obj) {\n    for (const name in obj) {\n      obj[name].delete();\n    }\n  }\n\n  getAggregationParams(opts) {\n    const aggregationParams = Object.assign({}, DEFAULT_RUN_PARAMS, opts);\n    const {\n      useGPU,\n      gridTransformMatrix,\n      viewport,\n      weights,\n      projectPoints,\n      cellSize\n    } = aggregationParams;\n    if (this.state.useGPU !== useGPU) {\n      // CPU/GPU resources need to reinitialized, force set the change flags.\n      aggregationParams.changeFlags = Object.assign(\n        {},\n        aggregationParams.changeFlags,\n        DEFAULT_CHANGE_FLAGS\n      );\n    }\n    if (\n      cellSize &&\n      (!this.state.cellSize ||\n        this.state.cellSize[0] !== cellSize[0] ||\n        this.state.cellSize[1] !== cellSize[1])\n    ) {\n      aggregationParams.changeFlags.cellSizeChanged = true;\n      // For GridLayer aggregation, cellSize is calculated by parsing all input data as it depends\n      // on bounding box, cache cellSize\n      this.setState({cellSize});\n    }\n\n    this.validateProps(aggregationParams, opts);\n\n    this.setState({useGPU});\n    aggregationParams.gridTransformMatrix =\n      (projectPoints ? viewport.viewportMatrix : gridTransformMatrix) || IDENTITY_MATRIX;\n\n    if (weights) {\n      aggregationParams.weights = this.normalizeWeightParams(weights);\n\n      // cache weights to process when only cellSize or viewport is changed.\n      // position data is cached in Buffers for GPU case and in 'gridPositions' for CPU case.\n      this.setState({weights: aggregationParams.weights});\n    }\n    return aggregationParams;\n  }\n\n  normalizeWeightParams(weights) {\n    const result = {};\n    for (const id in weights) {\n      result[id] = Object.assign({}, DEFAULT_WEIGHT_PARAMS, weights[id]);\n    }\n    return result;\n  }\n\n  // Update priveate state\n  setState(updateObject) {\n    Object.assign(this.state, updateObject);\n  }\n\n  shouldTransformToGrid(opts) {\n    const {projectPoints, changeFlags} = opts;\n    if (\n      !this.state.gridPositions ||\n      changeFlags.dataChanged ||\n      (projectPoints && changeFlags.viewportChanged) // world space aggregation (GridLayer) doesn't change when viewport is changed.\n    ) {\n      return true;\n    }\n    return false;\n  }\n\n  updateGridSize(opts) {\n    const {viewport, cellSize} = opts;\n    const width = opts.width || viewport.width;\n    const height = opts.height || viewport.height;\n    const numCol = Math.ceil(width / cellSize[0]);\n    const numRow = Math.ceil(height / cellSize[1]);\n    this.setState({numCol, numRow, windowSize: [width, height]});\n  }\n\n  // validate and assert\n  validateProps(aggregationParams, opts) {\n    const {changeFlags, projectPoints, gridTransformMatrix} = aggregationParams;\n    assert(changeFlags.dataChanged || changeFlags.viewportChanged || changeFlags.cellSizeChanged);\n\n    // assert for required options\n    assert(\n      !changeFlags.dataChanged ||\n        (opts.positions &&\n          opts.weights &&\n          (!opts.projectPositions || opts.viewport) &&\n          opts.cellSize)\n    );\n    assert(!changeFlags.cellSizeChanged || opts.cellSize);\n\n    // viewport need only when performing screen space aggregation (projectPoints is true)\n    assert(!(changeFlags.viewportChanged && projectPoints) || opts.viewport);\n\n    if (projectPoints && gridTransformMatrix) {\n      log.warn('projectPoints is true, gridTransformMatrix is ignored')();\n    }\n  }\n\n  // CPU Aggregation methods\n\n  // aggregated weight value to a cell\n  /* eslint-disable max-depth */\n  calculateAggregationData(opts) {\n    const {weights, results, cellIndex, posIndex} = opts;\n    for (const id in weights) {\n      const {values, size, operation} = weights[id];\n      const {aggregationData} = results[id];\n      assert(size >= 1 && size <= 3);\n\n      // Fill RGB with weights\n      for (let sizeIndex = 0; sizeIndex < size; sizeIndex++) {\n        const cellElementIndex = cellIndex + sizeIndex;\n        const weightComponent = values[posIndex * WEIGHT_SIZE + sizeIndex];\n        assert(Number.isFinite(weightComponent));\n        if (aggregationData[cellIndex + 3] === 0) {\n          // if the cell is getting update the first time, set the value directly.\n          aggregationData[cellElementIndex] = weightComponent;\n        } else {\n          switch (operation) {\n            case AGGREGATION_OPERATION.SUM:\n            case AGGREGATION_OPERATION.MEAN:\n              aggregationData[cellElementIndex] += weightComponent;\n              // MEAN value is calculated during 'calculateMeanMaxMinData'\n              break;\n            case AGGREGATION_OPERATION.MIN:\n              aggregationData[cellElementIndex] = Math.min(\n                aggregationData[cellElementIndex],\n                weightComponent\n              );\n              break;\n            case AGGREGATION_OPERATION.MAX:\n              aggregationData[cellElementIndex] = Math.max(\n                aggregationData[cellElementIndex],\n                weightComponent\n              );\n              break;\n            default:\n              // Not a valid operation enum.\n              assert(false);\n              break;\n          }\n        }\n      }\n\n      // Track the count per grid-cell\n      aggregationData[cellIndex + 3]++;\n    }\n  }\n\n  /* eslint-disable max-depth, complexity */\n  calculateMeanMaxMinData(opts) {\n    const {validCellIndices, results, weights} = opts;\n\n    // collect max/min values\n    validCellIndices.forEach(cellIndex => {\n      for (const id in results) {\n        const {size, needMin, needMax, operation} = weights[id];\n        const {aggregationData, minData, maxData, maxMinData} = results[id];\n        const calculateMinMax = needMin || needMax;\n        const calculateMean = operation === AGGREGATION_OPERATION.MEAN;\n        const combineMaxMin = needMin && needMax && weights[id].combineMaxMin;\n        const count = aggregationData[cellIndex + ELEMENTCOUNT - 1];\n        for (\n          let sizeIndex = 0;\n          sizeIndex < size && (calculateMinMax || calculateMean);\n          sizeIndex++\n        ) {\n          const cellElementIndex = cellIndex + sizeIndex;\n          let weight = aggregationData[cellElementIndex];\n          if (calculateMean) {\n            aggregationData[cellElementIndex] /= count;\n            weight = aggregationData[cellElementIndex];\n          }\n          if (combineMaxMin) {\n            // use RGB for max values for 3 weights.\n            maxMinData[sizeIndex] = Math.max(maxMinData[sizeIndex], weight);\n          } else {\n            if (needMin) {\n              minData[sizeIndex] = Math.min(minData[sizeIndex], weight);\n            }\n            if (needMax) {\n              maxData[sizeIndex] = Math.max(maxData[sizeIndex], weight);\n            }\n          }\n        }\n        // update total aggregation values.\n        if (combineMaxMin) {\n          // Use Alpha channel to store total min value for weight#0\n          maxMinData[ELEMENTCOUNT - 1] = Math.min(\n            maxMinData[ELEMENTCOUNT - 1],\n            aggregationData[cellIndex + 0]\n          );\n        } else {\n          // Use Alpha channel to store total counts.\n          if (needMin) {\n            minData[ELEMENTCOUNT - 1] += count;\n          }\n          if (needMax) {\n            maxData[ELEMENTCOUNT - 1] += count;\n          }\n        }\n      }\n    });\n  }\n  /* eslint-enable max-depth */\n\n  initCPUResults(opts) {\n    const weights = opts.weights || this.state.weights;\n    const {numCol, numRow} = this.state;\n    const results = {};\n    // setup results object\n    for (const id in weights) {\n      let {aggregationData, minData, maxData, maxMinData} = weights[id];\n      const {needMin, needMax} = weights[id];\n      const combineMaxMin = needMin && needMax && weights[id].combineMaxMin;\n\n      const aggregationSize = numCol * numRow * ELEMENTCOUNT;\n      aggregationData = getFloatArray(aggregationData, aggregationSize);\n      if (combineMaxMin) {\n        maxMinData = getFloatArray(maxMinData, ELEMENTCOUNT);\n        // RGB for max value\n        maxMinData.fill(-Infinity, 0, ELEMENTCOUNT - 1);\n        // Alpha for min value\n        maxMinData[ELEMENTCOUNT - 1] = Infinity;\n      } else {\n        // RGB for min/max values\n        // Alpha for total count\n        if (needMin) {\n          minData = getFloatArray(minData, ELEMENTCOUNT, Infinity);\n          minData[ELEMENTCOUNT - 1] = 0;\n        }\n        if (needMax) {\n          maxData = getFloatArray(maxData, ELEMENTCOUNT, -Infinity);\n          maxData[ELEMENTCOUNT - 1] = 0;\n        }\n      }\n      results[id] = Object.assign({}, weights[id], {\n        aggregationData,\n        minData,\n        maxData,\n        maxMinData\n      });\n    }\n    return results;\n  }\n\n  /* eslint-disable max-statements */\n  runAggregationOnCPU(opts) {\n    const {positions, cellSize, gridTransformMatrix, viewport, projectPoints} = opts;\n    let {weights} = opts;\n    const {numCol, numRow} = this.state;\n    const results = this.initCPUResults(opts);\n    // screen space or world space projection required\n    const gridTransformRequired = this.shouldTransformToGrid(opts);\n    let gridPositions = [];\n\n    assert(gridTransformRequired || opts.changeFlags.cellSizeChanged);\n\n    let posCount;\n    if (gridTransformRequired) {\n      this.setState({gridPositions});\n      posCount = positions.length / 2;\n    } else {\n      gridPositions = this.state.gridPositions;\n      weights = this.state.weights;\n      posCount = gridPositions.length / 2;\n    }\n\n    const validCellIndices = new Set();\n    for (let posIndex = 0; posIndex < posCount; posIndex++) {\n      let gridPos;\n      if (gridTransformRequired) {\n        const pos = [positions[posIndex * 2], positions[posIndex * 2 + 1]];\n        if (projectPoints) {\n          gridPos = viewport.project([pos[0], pos[1]]);\n        } else {\n          gridPos = worldToPixels([pos[0], pos[1], 0], gridTransformMatrix).slice(0, 2);\n        }\n        gridPositions.push(...gridPos);\n      } else {\n        gridPos = [gridPositions[posIndex * 2], gridPositions[posIndex * 2 + 1]];\n      }\n\n      const x = gridPos[0];\n      const y = gridPos[1];\n      const colId = Math.floor(x / cellSize[0]);\n      const rowId = Math.floor(y / cellSize[1]);\n      if (colId >= 0 && colId < numCol && rowId >= 0 && rowId < numRow) {\n        const cellIndex = (colId + rowId * numCol) * ELEMENTCOUNT;\n        validCellIndices.add(cellIndex);\n        this.calculateAggregationData({weights, results, cellIndex, posIndex});\n      }\n    }\n\n    this.calculateMeanMaxMinData({validCellIndices, results, weights});\n\n    // Update buffer objects.\n    this.updateAggregationBuffers(opts, results);\n    return results;\n  }\n  /* eslint-disable max-statements */\n\n  updateAggregationBuffers(opts, results) {\n    if (!opts.createBufferObjects) {\n      return;\n    }\n    const weights = opts.weights || this.state.weights;\n    for (const id in results) {\n      const {aggregationData, minData, maxData, maxMinData} = results[id];\n      const {needMin, needMax} = weights[id];\n      const combineMaxMin = needMin && needMax && weights[id].combineMaxMin;\n      updateBuffer({\n        gl: this.gl,\n        bufferName: 'aggregationBuffer',\n        data: aggregationData,\n        result: results[id]\n      });\n      if (combineMaxMin) {\n        updateBuffer({\n          gl: this.gl,\n          bufferName: 'maxMinBuffer',\n          data: maxMinData,\n          result: results[id]\n        });\n      } else {\n        if (needMin) {\n          updateBuffer({\n            gl: this.gl,\n            bufferName: 'minBuffer',\n            data: minData,\n            result: results[id]\n          });\n        }\n        if (needMax) {\n          updateBuffer({\n            gl: this.gl,\n            bufferName: 'maxBuffer',\n            data: maxData,\n            result: results[id]\n          });\n        }\n      }\n    }\n  }\n\n  // GPU Aggregation methods\n\n  getAggregateData(opts) {\n    const results = {};\n    const {\n      textures,\n      framebuffers,\n      maxMinFramebuffers,\n      minFramebuffers,\n      maxFramebuffers,\n      weights\n    } = this.state;\n\n    for (const id in weights) {\n      results[id] = {};\n      const {needMin, needMax, combineMaxMin} = weights[id];\n      results[id].aggregationTexture = textures[id];\n      results[id].aggregationBuffer = framebuffers[id].readPixelsToBuffer({\n        buffer: weights[id].aggregationBuffer, // update if a buffer is provided\n        type: GL.FLOAT\n      });\n      if (needMin && needMax && combineMaxMin) {\n        results[id].maxMinBuffer = maxMinFramebuffers[id].readPixelsToBuffer({\n          buffer: weights[id].maxMinBuffer, // update if a buffer is provided\n          type: GL.FLOAT\n        });\n      } else {\n        if (needMin) {\n          results[id].minBuffer = minFramebuffers[id].readPixelsToBuffer({\n            buffer: weights[id].minBuffer, // update if a buffer is provided\n            type: GL.FLOAT\n          });\n        }\n        if (needMax) {\n          results[id].maxBuffer = maxFramebuffers[id].readPixelsToBuffer({\n            buffer: weights[id].maxBuffer, // update if a buffer is provided\n            type: GL.FLOAT\n          });\n        }\n      }\n    }\n    return results;\n  }\n\n  getAggregationModel(fp64 = false) {\n    const {gl, shaderCache} = this;\n    return new Model(gl, {\n      id: 'Gird-Aggregation-Model',\n      vs: fp64 ? AGGREGATE_TO_GRID_VS_FP64 : AGGREGATE_TO_GRID_VS,\n      fs: AGGREGATE_TO_GRID_FS,\n      modules: fp64 ? ['fp64', 'project64'] : ['project32'],\n      shaderCache,\n      vertexCount: 0,\n      drawMode: GL.POINTS\n    });\n  }\n\n  getAllAggregationModel(fp64 = false) {\n    const {gl, shaderCache} = this;\n    return new Model(gl, {\n      id: 'All-Aggregation-Model',\n      vs: AGGREGATE_ALL_VS_FP64,\n      fs: AGGREGATE_ALL_FS,\n      modules: ['fp64'],\n      shaderCache,\n      vertexCount: 1,\n      drawMode: GL.POINTS,\n      isInstanced: true,\n      instanceCount: 0,\n      attributes: {position: new Buffer(gl, {size: 2, data: new Float32Array([0, 0])})}\n    });\n  }\n\n  getMeanTransform(opts) {\n    if (this.meanTransform) {\n      this.meanTransform.update(opts);\n    } else {\n      this.meanTransform = new Transform(\n        this.gl,\n        Object.assign(\n          {},\n          {\n            vs: TRANSFORM_MEAN_VS,\n            _targetTextureVarying: 'meanValues'\n          },\n          opts\n        )\n      );\n    }\n    return this.meanTransform;\n  }\n\n  renderAggregateData(opts) {\n    const {cellSize, viewport, gridTransformMatrix, projectPoints} = opts;\n    const {\n      numCol,\n      numRow,\n      windowSize,\n      maxMinFramebuffers,\n      minFramebuffers,\n      maxFramebuffers,\n      weights\n    } = this.state;\n\n    const uProjectionMatrixFP64 = fp64ifyMatrix4(gridTransformMatrix);\n    const gridSize = [numCol, numRow];\n    const parameters = {\n      blend: true,\n      depthTest: false,\n      blendFunc: [GL.ONE, GL.ONE]\n    };\n    const moduleSettings = {viewport};\n    const uniforms = {\n      windowSize,\n      cellSize,\n      gridSize,\n      uProjectionMatrix: gridTransformMatrix,\n      uProjectionMatrixFP64,\n      projectPoints\n    };\n\n    for (const id in weights) {\n      const {needMin, needMax} = weights[id];\n      const combineMaxMin = needMin && needMax && weights[id].combineMaxMin;\n      this.renderToWeightsTexture({id, parameters, moduleSettings, uniforms, gridSize});\n      if (combineMaxMin) {\n        this.renderToMaxMinTexture({\n          id,\n          parameters: Object.assign({}, parameters, {blendEquation: MAX_MIN_BLEND_EQUATION}),\n          gridSize,\n          minOrMaxFb: maxMinFramebuffers[id],\n          clearParams: {clearColor: [0, 0, 0, MAX_32_BIT_FLOAT]},\n          combineMaxMin\n        });\n      } else {\n        if (needMin) {\n          this.renderToMaxMinTexture({\n            id,\n            parameters: Object.assign({}, parameters, {blendEquation: MIN_BLEND_EQUATION}),\n            gridSize,\n            minOrMaxFb: minFramebuffers[id],\n            clearParams: {clearColor: [MAX_32_BIT_FLOAT, MAX_32_BIT_FLOAT, MAX_32_BIT_FLOAT, 0]},\n            combineMaxMin\n          });\n        }\n        if (needMax) {\n          this.renderToMaxMinTexture({\n            id,\n            parameters: Object.assign({}, parameters, {blendEquation: MAX_BLEND_EQUATION}),\n            gridSize,\n            minOrMaxFb: maxFramebuffers[id],\n            combineMaxMin\n          });\n        }\n      }\n    }\n  }\n\n  // render all aggregated grid-cells to generate Min, Max or MaxMin data texture\n  renderToMaxMinTexture(opts) {\n    const {id, parameters, gridSize, minOrMaxFb, combineMaxMin, clearParams = {}} = opts;\n    const {framebuffers} = this.state;\n    const {gl, allAggregationModel} = this;\n\n    minOrMaxFb.bind();\n    gl.viewport(0, 0, gridSize[0], gridSize[1]);\n    withParameters(gl, clearParams, () => {\n      gl.clear(gl.COLOR_BUFFER_BIT);\n    });\n    allAggregationModel.draw({\n      parameters,\n      uniforms: {\n        uSampler: framebuffers[id].texture,\n        gridSize,\n        combineMaxMin\n      }\n    });\n    minOrMaxFb.unbind();\n  }\n\n  // render all data points to aggregate weights\n  renderToWeightsTexture(opts) {\n    const {id, parameters, moduleSettings, uniforms, gridSize} = opts;\n    const {framebuffers, equations, weightAttributes, weights} = this.state;\n    const {gl, gridAggregationModel} = this;\n    const {operation} = weights[id];\n\n    framebuffers[id].bind();\n    gl.viewport(0, 0, gridSize[0], gridSize[1]);\n    const clearColor =\n      operation === AGGREGATION_OPERATION.MIN\n        ? [MAX_32_BIT_FLOAT, MAX_32_BIT_FLOAT, MAX_32_BIT_FLOAT, 0]\n        : [0, 0, 0, 0];\n    withParameters(gl, {clearColor}, () => {\n      gl.clear(gl.COLOR_BUFFER_BIT);\n    });\n\n    const attributes = {weights: weightAttributes[id]};\n    gridAggregationModel.draw({\n      parameters: Object.assign({}, parameters, {blendEquation: equations[id]}),\n      moduleSettings,\n      uniforms,\n      attributes\n    });\n    framebuffers[id].unbind();\n\n    if (operation === AGGREGATION_OPERATION.MEAN) {\n      const {meanTextures, textures} = this.state;\n      const transformOptions = {\n        _sourceTextures: {aggregationValues: meanTextures[id]}, // contains aggregated data\n        _targetTexture: textures[id], // store mean values,\n        elementCount: textures[id].width * textures[id].height\n      };\n      const meanTransform = this.getMeanTransform(transformOptions);\n      meanTransform.run({\n        parameters: {\n          blend: false,\n          depthTest: false\n        }\n      });\n\n      // update framebuffer with mean results so readPixelsToBuffer returns mean values\n      framebuffers[id].attach({[GL.COLOR_ATTACHMENT0]: textures[id]});\n    }\n  }\n\n  runAggregationOnGPU(opts) {\n    this.updateModels(opts);\n    this.setupFramebuffers(opts);\n    this.renderAggregateData(opts);\n    return this.getAggregateData(opts);\n  }\n\n  // set up framebuffer for each weight\n  /* eslint-disable complexity, max-depth */\n  setupFramebuffers(opts) {\n    const {\n      numCol,\n      numRow,\n      textures,\n      framebuffers,\n      maxMinFramebuffers,\n      minFramebuffers,\n      maxFramebuffers,\n      meanTextures,\n      equations,\n      weights\n    } = this.state;\n    const framebufferSize = {width: numCol, height: numRow};\n    for (const id in weights) {\n      const {needMin, needMax, combineMaxMin, operation} = weights[id];\n      textures[id] =\n        weights[id].aggregationTexture ||\n        textures[id] ||\n        getFloatTexture(this.gl, {id: `${id}-texture`, width: numCol, height: numRow});\n      textures[id].resize(framebufferSize);\n      let texture = textures[id];\n      if (operation === AGGREGATION_OPERATION.MEAN) {\n        // For MEAN, we first aggregatet into a temp texture\n        meanTextures[id] =\n          meanTextures[id] ||\n          getFloatTexture(this.gl, {id: `${id}-mean-texture`, width: numCol, height: numRow});\n        meanTextures[id].resize(framebufferSize);\n        texture = meanTextures[id];\n      }\n      if (framebuffers[id]) {\n        framebuffers[id].attach({[GL.COLOR_ATTACHMENT0]: texture});\n      } else {\n        framebuffers[id] = getFramebuffer(this.gl, {\n          id: `${id}-fb`,\n          width: numCol,\n          height: numRow,\n          texture\n        });\n      }\n      framebuffers[id].resize(framebufferSize);\n      equations[id] = EQUATION_MAP[operation];\n      // For min/max framebuffers will use default size 1X1\n      if (needMin || needMax) {\n        if (needMin && needMax && combineMaxMin) {\n          maxMinFramebuffers[id] =\n            maxMinFramebuffers[id] || getFramebuffer(this.gl, {id: `${id}-maxMinFb`});\n        } else {\n          if (needMin) {\n            minFramebuffers[id] =\n              minFramebuffers[id] || getFramebuffer(this.gl, {id: `${id}-minFb`});\n          }\n          if (needMax) {\n            maxFramebuffers[id] =\n              maxFramebuffers[id] || getFramebuffer(this.gl, {id: `${id}-maxFb`});\n          }\n        }\n      }\n    }\n  }\n  /* eslint-enable complexity, max-depth */\n\n  setupModels(fp64 = false) {\n    if (this.gridAggregationModel) {\n      this.gridAggregationModel.delete();\n    }\n    this.gridAggregationModel = this.getAggregationModel(fp64);\n    if (this.allAggregationModel) {\n      this.allAggregationModel.delete();\n    }\n    this.allAggregationModel = this.getAllAggregationModel(fp64);\n  }\n\n  // set up buffers for all weights\n  setupWeightAttributes(opts) {\n    const {weightAttributes, vertexCount, weights} = this.state;\n    for (const id in weights) {\n      const {values} = weights[id];\n      // values can be Array, Float32Array or Buffer\n      if (Array.isArray(values) || values.constructor === Float32Array) {\n        assert(values.length / 3 === vertexCount);\n        const typedArray = Array.isArray(values) ? new Float32Array(values) : values;\n        if (weightAttributes[id] instanceof Buffer) {\n          weightAttributes[id].setData(typedArray);\n        } else {\n          weightAttributes[id] = new Buffer(this.gl, typedArray);\n        }\n      } else {\n        // assert((values instanceof Attribute) || (values instanceof Buffer));\n        assert(values instanceof Buffer);\n        weightAttributes[id] = values;\n      }\n    }\n  }\n\n  /* eslint-disable max-statements */\n  updateModels(opts) {\n    const {gl} = this;\n    const {positions, positions64xyLow, changeFlags} = opts;\n    const {numCol, numRow} = this.state;\n\n    let {positionsBuffer, positions64xyLowBuffer} = this.state;\n\n    const aggregationModelAttributes = {};\n\n    let createPos64xyLow = false;\n    if (opts.fp64 !== this.state.fp64) {\n      this.setupModels(opts.fp64);\n      this.setState({fp64: opts.fp64});\n      if (opts.fp64) {\n        createPos64xyLow = true;\n      }\n    }\n\n    if (changeFlags.dataChanged || !positionsBuffer) {\n      if (positionsBuffer) {\n        positionsBuffer.delete();\n      }\n      const vertexCount = positions.length / 2;\n      // positionsBuffer = new Buffer(gl, {size: 2, data: new Float32Array(positions)});\n      positionsBuffer = new Buffer(gl, new Float32Array(positions));\n      createPos64xyLow = opts.fp64;\n      Object.assign(aggregationModelAttributes, {\n        positions: positionsBuffer\n      });\n      this.setState({positionsBuffer, vertexCount});\n\n      this.setupWeightAttributes(opts);\n      this.gridAggregationModel.setVertexCount(vertexCount);\n    }\n\n    if (createPos64xyLow) {\n      assert(positions64xyLow);\n      if (positions64xyLowBuffer) {\n        positions64xyLowBuffer.delete();\n      }\n      positions64xyLowBuffer = new Buffer(gl, {size: 2, data: new Float32Array(positions64xyLow)});\n      Object.assign(aggregationModelAttributes, {\n        positions64xyLow: positions64xyLowBuffer\n      });\n      this.setState({positions64xyLowBuffer});\n    }\n\n    this.gridAggregationModel.setAttributes(aggregationModelAttributes);\n\n    if (changeFlags.cellSizeChanged || changeFlags.viewportChanged) {\n      this.allAggregationModel.setInstanceCount(numCol * numRow);\n    }\n  }\n  /* eslint-enable max-statements */\n}\n"],"file":"gpu-grid-aggregator.js"}