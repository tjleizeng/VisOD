import View from './view';
import Viewport from '../viewports/viewport';
import { Matrix4 } from 'math.gl';
import OrthographicController from '../controllers/orthographic-controller';
export default class OrthographicView extends View {
  get controller() {
    return this._getControllerProps({
      type: OrthographicController
    });
  }

  _getViewport(_ref) {
    let x = _ref.x,
        y = _ref.y,
        width = _ref.width,
        height = _ref.height,
        viewState = _ref.viewState;
    // Get view matrix parameters from view state
    const _viewState$offset = viewState.offset,
          offset = _viewState$offset === void 0 ? [0, 0] : _viewState$offset,
          _viewState$zoom = viewState.zoom,
          zoom = _viewState$zoom === void 0 ? 0 : _viewState$zoom; // Make sure Matrix4.ortho doesn't crash on 0 width/height

    width = width || 1;
    height = height || 1;
    const scale = Math.pow(2, zoom); // Get projection matrix parameters from the view itself
    // NOTE: automatically calculated from width and height if not provided

    const _this$props = this.props,
          _this$props$eye = _this$props.eye,
          eye = _this$props$eye === void 0 ? [0, 0, 1] : _this$props$eye,
          _this$props$lookAt = _this$props.lookAt,
          lookAt = _this$props$lookAt === void 0 ? [0, 0, 0] : _this$props$lookAt,
          _this$props$up = _this$props.up,
          up = _this$props$up === void 0 ? [0, 1, 0] : _this$props$up,
          _this$props$left = _this$props.left,
          left = _this$props$left === void 0 ? (-width / 2 + offset[0]) / scale : _this$props$left,
          _this$props$top = _this$props.top,
          top = _this$props$top === void 0 ? (-height / 2 + offset[1]) / scale : _this$props$top,
          _this$props$right = _this$props.right,
          right = _this$props$right === void 0 ? (width / 2 + offset[0]) / scale : _this$props$right,
          _this$props$bottom = _this$props.bottom,
          bottom = _this$props$bottom === void 0 ? (height / 2 + offset[1]) / scale : _this$props$bottom,
          _this$props$near = _this$props.near,
          near = _this$props$near === void 0 ? 1 : _this$props$near,
          _this$props$far = _this$props.far,
          far = _this$props$far === void 0 ? 100 : _this$props$far;
    return new Viewport({
      id: this.id,
      x,
      y,
      width,
      height,
      viewMatrix: new Matrix4().lookAt({
        eye,
        lookAt,
        up
      }),
      projectionMatrix: new Matrix4().ortho({
        left,
        right,
        bottom,
        top,
        near,
        far
      }),
      zoom
    });
  }

}
OrthographicView.displayName = 'OrthographicView';
//# sourceMappingURL=orthographic-view.js.map