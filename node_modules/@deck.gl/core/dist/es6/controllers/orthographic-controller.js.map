{"version":3,"sources":["../../../src/controllers/orthographic-controller.js"],"names":["Controller","ViewState","Vector2","clamp","MOVEMENT_SPEED","DEFAULT_STATE","zoom","offset","minZoom","maxZoom","zoom2Scale","Math","pow","OrthographicState","constructor","width","height","startPanPosition","startPanOffset","startZoomPosition","startZoom","_interactiveState","getInteractiveState","panStart","pos","_viewportProps","_getUpdatedState","pan","delta","subtract","panEnd","rotateStart","rotate","deltaScaleX","deltaScaleY","rotateEnd","_calculateNewZoom","scale","log2","zoomStart","startPos","Number","isFinite","newZoom","startScale","newScale","centerX","centerY","dX","dY","zoomEnd","_zoomFromCenter","zoomIn","zoomOut","moveLeft","add","moveRight","moveUp","moveDown","newProps","Object","assign","OrthographicController","props","invertPan","_onPanRotate","event","dragRotate","_onPanRotateMap"],"mappings":"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","sourcesContent":["import Controller from './controller';\nimport ViewState from './view-state';\n\nimport {Vector2, clamp} from 'math.gl';\n\nconst MOVEMENT_SPEED = 10; // per keyboard click\n\nconst DEFAULT_STATE = {\n  zoom: 0,\n  offset: [0, 0],\n  minZoom: -10,\n  maxZoom: 10\n};\n\nconst zoom2Scale = zoom => Math.pow(2, zoom);\n\nclass OrthographicState extends ViewState {\n  constructor({\n    /* Viewport arguments */\n    width, // Width of viewport\n    height, // Height of viewport\n    offset = DEFAULT_STATE.offset, // Offset to the origin\n    zoom = DEFAULT_STATE.zoom, // Zoom level of the view\n    minZoom = DEFAULT_STATE.minZoom,\n    maxZoom = DEFAULT_STATE.maxZoom,\n\n    /** Interaction states */\n    /* The point on the view being grabbed when the operation first started */\n    startPanPosition,\n    /* The offset on the view being grabbed when the operation first started */\n    startPanOffset,\n    /* The point on the view being zoomed when the operation first started */\n    startZoomPosition,\n    /** The zoom level when the first zoom operation started */\n    startZoom\n  }) {\n    super({\n      width,\n      height,\n      offset,\n      zoom,\n      minZoom,\n      maxZoom\n    });\n    this._interactiveState = {\n      startPanPosition,\n      startPanOffset,\n      startZoomPosition,\n      startZoom\n    };\n  }\n\n  /* Public API */\n\n  getInteractiveState() {\n    return this._interactiveState;\n  }\n\n  /**\n   * Start panning\n   * @param {[Number, Number]} pos - position on screen where the pointer grabs\n   */\n  panStart({pos}) {\n    const {offset} = this._viewportProps;\n    return this._getUpdatedState({\n      startPanPosition: pos,\n      startPanOffset: offset\n    });\n  }\n\n  /**\n   * Pan\n   * @param {[Number, Number]} pos - position on screen where the pointer is\n   */\n  pan({pos}) {\n    const {startPanPosition, startPanOffset} = this._interactiveState;\n    const delta = new Vector2(pos).subtract(startPanPosition);\n    return this._getUpdatedState({\n      offset: new Vector2(startPanOffset).subtract(delta)\n    });\n  }\n\n  /**\n   * End panning\n   * Must call if `panStart()` was called\n   */\n  panEnd() {\n    return this._getUpdatedState({\n      startPanPosition: null,\n      startPanOffset: null\n    });\n  }\n\n  /**\n   * Start rotating\n   * @param {[Number, Number]} pos - position on screen where the pointer grabs\n   */\n  rotateStart({pos}) {\n    return this;\n  }\n\n  /**\n   * Rotate\n   * @param {[Number, Number]} pos - position on screen where the pointer is\n   */\n  rotate({deltaScaleX, deltaScaleY}) {\n    return this;\n  }\n\n  /**\n   * End rotating\n   * Must call if `rotateStart()` was called\n   */\n  rotateEnd() {\n    return this;\n  }\n\n  // Calculates new zoom\n  _calculateNewZoom({scale, startZoom}) {\n    const {maxZoom, minZoom} = this._viewportProps;\n    const zoom = startZoom + Math.log2(scale);\n    return clamp(zoom, minZoom, maxZoom);\n  }\n\n  /**\n   * Start zooming\n   * @param {[Number, Number]} pos - position on screen where the center is\n   */\n  zoomStart({pos}) {\n    return this._getUpdatedState({\n      startZoomPosition: pos,\n      startZoom: this._viewportProps.zoom\n    });\n  }\n\n  /**\n   * Zoom\n   * @param {Number} scale - a number between [0, 1] specifying the accumulated\n   *   relative scale.\n   * @param {[number, number]} pos - current mouse cursor screen position\n   */\n  zoom({pos, startPos, scale}) {\n    const {zoom, width, height, offset} = this._viewportProps;\n    let {startZoom, startZoomPosition} = this._interactiveState;\n    if (!Number.isFinite(startZoom)) {\n      // We have two modes of zoom:\n      // scroll zoom that are discrete events (transform from the current zoom level),\n      // and pinch zoom that are continuous events (transform from the zoom level when\n      // pinch started).\n      // If startZoom state is defined, then use the startZoom state;\n      // otherwise assume discrete zooming\n      startZoom = zoom;\n      startZoomPosition = startPos || pos;\n    }\n\n    const newZoom = this._calculateNewZoom({scale, startZoom});\n    const startScale = zoom2Scale(startZoom);\n    const newScale = zoom2Scale(newZoom);\n\n    const centerX = width / 2 - offset[0];\n    const centerY = height / 2 - offset[1];\n    const dX = (startZoomPosition[0] - centerX) * (newScale / startScale - 1);\n    const dY = (startZoomPosition[1] - centerY) * (newScale / startScale - 1);\n\n    return this._getUpdatedState({\n      zoom: newZoom,\n      offset: [offset[0] + dX, offset[1] + dY]\n    });\n  }\n\n  /**\n   * End zooming\n   * Must call if `zoomStart()` was called\n   */\n  zoomEnd() {\n    return this._getUpdatedState({\n      startZoomPosition: null,\n      startZoom: null\n    });\n  }\n\n  _zoomFromCenter(scale) {\n    const {width, height, offset} = this._viewportProps;\n    return this.zoom({\n      pos: [width / 2 - offset[0], height / 2 - offset[1]],\n      scale\n    });\n  }\n\n  zoomIn() {\n    return this._zoomFromCenter(2);\n  }\n\n  zoomOut() {\n    return this._zoomFromCenter(0.5);\n  }\n\n  moveLeft() {\n    const {offset} = this._viewportProps;\n    const delta = [MOVEMENT_SPEED, 0];\n    return this._getUpdatedState({\n      offset: new Vector2(offset).add(delta)\n    });\n  }\n\n  moveRight() {\n    const {offset} = this._viewportProps;\n    const delta = [-MOVEMENT_SPEED, 0];\n    return this._getUpdatedState({\n      offset: new Vector2(offset).add(delta)\n    });\n  }\n\n  moveUp() {\n    const {offset} = this._viewportProps;\n    const delta = [0, MOVEMENT_SPEED];\n    return this._getUpdatedState({\n      offset: new Vector2(offset).add(delta)\n    });\n  }\n\n  moveDown() {\n    const {offset} = this._viewportProps;\n    const delta = [0, -MOVEMENT_SPEED];\n    return this._getUpdatedState({\n      offset: new Vector2(offset).add(delta)\n    });\n  }\n\n  /* Private methods */\n\n  _getUpdatedState(newProps) {\n    // Update _viewportProps\n    return new OrthographicState(\n      Object.assign({}, this._viewportProps, this._interactiveState, newProps)\n    );\n  }\n}\n\nexport default class OrthographicController extends Controller {\n  constructor(props) {\n    super(OrthographicState, props);\n    this.invertPan = true;\n  }\n\n  _onPanRotate(event) {\n    if (!this.dragRotate) {\n      return false;\n    }\n    return this._onPanRotateMap(event);\n  }\n}\n"],"file":"orthographic-controller.js"}