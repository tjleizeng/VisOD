import { clamp } from 'math.gl';
import Controller from './controller';
import OrbitViewport from '../deprecated/orbit-viewport';
import assert from '../utils/assert';
import LinearInterpolator from '../transitions/linear-interpolator';
import { TRANSITION_EVENTS } from './transition-manager';
const ZOOM_TRANSITION_PROPS = {
  transitionDuration: 300,
  transitionEasing: t => t,
  transitionInterpolator: new LinearInterpolator(['zoom']),
  transitionInterruption: TRANSITION_EVENTS.BREAK
};
const defaultState = {
  lookAt: [0, 0, 0],
  rotationX: 0,
  rotationOrbit: 0,
  fov: 50,
  near: 1,
  far: 100,
  translationX: 0,
  translationY: 0,
  zoom: 1
};
const defaultConstraints = {
  minZoom: 0,
  maxZoom: Infinity
};
/* Helpers */

function ensureFinite(value, fallbackValue) {
  return Number.isFinite(value) ? value : fallbackValue;
}

class OrbitState {
  constructor(_ref) {
    let width = _ref.width,
        height = _ref.height,
        distance = _ref.distance,
        rotationX = _ref.rotationX,
        rotationOrbit = _ref.rotationOrbit,
        orbitAxis = _ref.orbitAxis,
        bounds = _ref.bounds,
        lookAt = _ref.lookAt,
        fov = _ref.fov,
        near = _ref.near,
        far = _ref.far,
        translationX = _ref.translationX,
        translationY = _ref.translationY,
        zoom = _ref.zoom,
        minZoom = _ref.minZoom,
        maxZoom = _ref.maxZoom,
        startPanViewport = _ref.startPanViewport,
        startPanPos = _ref.startPanPos,
        isPanning = _ref.isPanning,
        startRotateViewport = _ref.startRotateViewport,
        isRotating = _ref.isRotating,
        startZoomViewport = _ref.startZoomViewport,
        startZoomPos = _ref.startZoomPos;
    assert(Number.isFinite(width), '`width` must be supplied');
    assert(Number.isFinite(height), '`height` must be supplied');
    assert(Number.isFinite(distance), '`distance` must be supplied');
    this._viewportProps = this._applyConstraints({
      width,
      height,
      distance,
      rotationX: ensureFinite(rotationX, defaultState.rotationX),
      rotationOrbit: ensureFinite(rotationOrbit, defaultState.rotationOrbit),
      orbitAxis,
      bounds,
      lookAt: lookAt || defaultState.lookAt,
      fov: ensureFinite(fov, defaultState.fov),
      near: ensureFinite(near, defaultState.near),
      far: ensureFinite(far, defaultState.far),
      translationX: ensureFinite(translationX, defaultState.translationX),
      translationY: ensureFinite(translationY, defaultState.translationY),
      zoom: ensureFinite(zoom, defaultState.zoom),
      minZoom: ensureFinite(minZoom, defaultConstraints.minZoom),
      maxZoom: ensureFinite(maxZoom, defaultConstraints.maxZoom)
    });
    this._interactiveState = {
      startPanViewport,
      startPanPos,
      isPanning,
      startRotateViewport,
      isRotating,
      startZoomViewport,
      startZoomPos
    };
  }
  /* Public API */


  getViewportProps() {
    return this._viewportProps;
  }

  getInteractiveState() {
    return this._interactiveState;
  }
  /**
   * Start panning
   * @param {[Number, Number]} pos - position on screen where the pointer grabs
   */


  panStart(_ref2) {
    let pos = _ref2.pos;
    const viewport = new OrbitViewport(this._viewportProps);
    return this._getUpdatedOrbitState({
      startPanPos: pos,
      startPanViewport: viewport
    });
  }
  /**
   * Pan
   * @param {[Number, Number]} pos - position on screen where the pointer is
   */


  pan(_ref3) {
    let pos = _ref3.pos,
        startPos = _ref3.startPos;

    if (this._interactiveState.isRotating) {
      return this._getUpdatedOrbitState();
    }

    const startPanPos = this._interactiveState.startPanPos || startPos;
    assert(startPanPos, '`startPanPos` props is required');
    const viewport = this._interactiveState.startPanViewport || new OrbitViewport(this._viewportProps);
    const deltaX = pos[0] - startPanPos[0];
    const deltaY = pos[1] - startPanPos[1];
    const center = viewport.project(viewport.lookAt);
    const newLookAt = viewport.unproject([center[0] - deltaX, center[1] - deltaY, center[2]]);
    return this._getUpdatedOrbitState({
      lookAt: newLookAt,
      isPanning: true
    });
  }
  /**
   * End panning
   * Must call if `panStart()` was called
   */


  panEnd() {
    return this._getUpdatedOrbitState({
      startPanViewport: null,
      startPanPos: null,
      isPanning: null
    });
  }
  /**
   * Start rotating
   * @param {[Number, Number]} pos - position on screen where the pointer grabs
   */


  rotateStart(_ref4) {
    let pos = _ref4.pos;
    // Rotation center should be the worldspace position at the center of the
    // the screen. If not found, use the last one.
    const viewport = new OrbitViewport(this._viewportProps);
    return this._getUpdatedOrbitState({
      startRotateViewport: viewport
    });
  }
  /**
   * Rotate
   * @param {[Number, Number]} pos - position on screen where the pointer is
   */


  rotate(_ref5) {
    let deltaScaleX = _ref5.deltaScaleX,
        deltaScaleY = _ref5.deltaScaleY;

    if (this._interactiveState.isPanning) {
      return this._getUpdatedOrbitState();
    }

    const startRotateViewport = this._interactiveState.startRotateViewport;

    let _ref6 = startRotateViewport || {},
        rotationX = _ref6.rotationX,
        rotationOrbit = _ref6.rotationOrbit;

    rotationX = ensureFinite(rotationX, this._viewportProps.rotationX);
    rotationOrbit = ensureFinite(rotationOrbit, this._viewportProps.rotationOrbit);
    const newRotationX = clamp(rotationX - deltaScaleY * 180, -89.999, 89.999);
    const newRotationOrbit = (rotationOrbit - deltaScaleX * 180) % 360;
    return this._getUpdatedOrbitState({
      rotationX: newRotationX,
      rotationOrbit: newRotationOrbit,
      isRotating: true
    });
  }
  /**
   * End rotating
   * Must call if `rotateStart()` was called
   */


  rotateEnd() {
    return this._getUpdatedOrbitState({
      startRotateViewport: null,
      isRotating: null
    });
  } // default implementation of shortest path between two view states


  shortestPathFrom(viewState) {
    const props = Object.assign({}, this._viewportProps);
    return props;
  }
  /**
   * Start zooming
   * @param {[Number, Number]} pos - position on screen where the pointer grabs
   */


  zoomStart(_ref7) {
    let pos = _ref7.pos;
    const viewport = new OrbitViewport(this._viewportProps);
    return this._getUpdatedOrbitState({
      startZoomViewport: viewport,
      startZoomPos: pos
    });
  }
  /**
   * Zoom
   * @param {[Number, Number]} pos - position on screen where the current center is
   * @param {[Number, Number]} startPos - the center position at
   *   the start of the operation. Must be supplied of `zoomStart()` was not called
   * @param {Number} scale - a number between [0, 1] specifying the accumulated
   *   relative scale.
   */


  zoom(_ref8) {
    let pos = _ref8.pos,
        startPos = _ref8.startPos,
        scale = _ref8.scale;
    const _this$_viewportProps = this._viewportProps,
          zoom = _this$_viewportProps.zoom,
          minZoom = _this$_viewportProps.minZoom,
          maxZoom = _this$_viewportProps.maxZoom,
          width = _this$_viewportProps.width,
          height = _this$_viewportProps.height;
    const startZoomPos = this._interactiveState.startZoomPos || startPos || pos;
    const viewport = this._interactiveState.startZoomViewport || new OrbitViewport(this._viewportProps);
    const newZoom = clamp(zoom * scale, minZoom, maxZoom);
    const deltaX = pos[0] - startZoomPos[0];
    const deltaY = pos[1] - startZoomPos[1]; // Zoom around the center position

    const cx = startZoomPos[0] - width / 2;
    const cy = height / 2 - startZoomPos[1];
    const center = viewport.project(viewport.lookAt);
    const newCenterX = center[0] - cx + cx * newZoom / zoom + deltaX;
    const newCenterY = center[1] + cy - cy * newZoom / zoom - deltaY;
    const newLookAt = viewport.unproject([newCenterX, newCenterY, center[2]]);
    return this._getUpdatedOrbitState({
      lookAt: newLookAt,
      zoom: newZoom
    });
  }
  /**
   * End zooming
   * Must call if `zoomStart()` was called
   */


  zoomEnd() {
    return this._getUpdatedOrbitState({
      startZoomPos: null
    });
  }
  /* Private methods */


  _getUpdatedOrbitState(newProps) {
    // Update _viewportProps
    return new OrbitState(Object.assign({}, this._viewportProps, this._interactiveState, newProps));
  } // Apply any constraints (mathematical or defined by _viewportProps) to map state


  _applyConstraints(props) {
    // Ensure zoom is within specified range
    const maxZoom = props.maxZoom,
          minZoom = props.minZoom,
          zoom = props.zoom;
    props.zoom = zoom > maxZoom ? maxZoom : zoom;
    props.zoom = zoom < minZoom ? minZoom : zoom;
    return props;
  }

}

export default class OrbitController extends Controller {
  constructor(props) {
    super(OrbitState, props);
  }

  _getTransitionProps() {
    // Enable transitions for zoom change
    return ZOOM_TRANSITION_PROPS;
  }

}
//# sourceMappingURL=orbit-controller.js.map